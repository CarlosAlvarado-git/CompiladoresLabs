
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 02 13:52:04 CST 2022
//----------------------------------------------------

package compiler.parser;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 02 13:52:04 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\010\000\002\035" +
    "\003\000\002\035\006\000\002\003\007\000\002\003\002" +
    "\000\002\043\005\000\002\043\002\000\002\004\011\000" +
    "\002\004\011\000\002\004\002\000\002\036\005\000\002" +
    "\036\002\000\002\037\006\000\002\037\002\000\002\005" +
    "\003\000\002\005\003\000\002\006\006\000\002\007\007" +
    "\000\002\007\002\000\002\040\005\000\002\040\002\000" +
    "\002\010\003\000\002\010\003\000\002\011\007\000\002" +
    "\011\005\000\002\011\011\000\002\011\012\000\002\011" +
    "\006\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\002\000\002\041\004\000\002\041\002\000" +
    "\002\042\003\000\002\042\002\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\006\000\002\013" +
    "\007\000\002\044\004\000\002\044\002\000\002\045\005" +
    "\000\002\045\002\000\002\046\005\000\002\046\002\000" +
    "\002\047\005\000\002\047\002\000\002\014\003\000\002" +
    "\015\003\000\002\015\006\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\004" +
    "\000\002\016\004\000\002\016\005\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\002\000\002\031\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\005\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\020\005\001\002\000\004\002\266\001" +
    "\002\000\004\021\006\001\002\000\004\053\007\001\002" +
    "\000\012\004\ufffc\005\ufffc\017\ufffc\054\ufffc\001\002\000" +
    "\012\004\014\005\015\017\011\054\ufff7\001\002\000\004" +
    "\022\260\001\002\000\004\054\257\001\002\000\004\022" +
    "\016\001\002\000\004\022\uffeb\001\002\000\004\022\uffea" +
    "\001\002\000\012\043\033\045\uffff\055\026\057\uffff\001" +
    "\002\000\006\045\ufffa\057\020\001\002\000\004\022\023" +
    "\001\002\000\004\045\022\001\002\000\012\004\ufffd\005" +
    "\ufffd\017\ufffd\054\ufffd\001\002\000\010\045\uffff\055\026" +
    "\057\uffff\001\002\000\006\045\ufffa\057\020\001\002\000" +
    "\004\045\ufffb\001\002\000\006\026\030\027\031\001\002" +
    "\000\004\056\032\001\002\000\046\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\056\uffaf\057\uffaf\001\002\000\046\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\037\uffae\040\uffae\041\uffae\042\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\056\uffae\057\uffae\001\002\000\006\045\ufffe\057" +
    "\ufffe\001\002\000\010\004\014\005\015\044\ufff5\001\002" +
    "\000\004\022\251\001\002\000\004\044\036\001\002\000" +
    "\004\053\037\001\002\000\030\004\014\005\015\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\022\uffee\053" +
    "\uffee\054\uffee\001\002\000\012\004\014\005\015\017\011" +
    "\054\ufff7\001\002\000\004\054\ufff9\001\002\000\004\022" +
    "\043\001\002\000\004\043\033\001\002\000\004\022\242" +
    "\001\002\000\024\006\046\007\051\010\057\012\053\013" +
    "\047\014\054\022\055\053\037\054\uffe1\001\002\000\004" +
    "\043\211\001\002\000\004\045\207\001\002\000\004\045" +
    "\205\001\002\000\004\043\175\001\002\000\004\043\165" +
    "\001\002\000\030\006\046\015\071\016\074\022\055\026" +
    "\030\027\031\043\076\045\uffdd\047\101\060\075\061\073" +
    "\001\002\000\004\045\157\001\002\000\060\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffcf\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\154" +
    "\056\uffce\057\uffce\001\002\000\024\006\046\007\051\010" +
    "\057\012\053\013\047\014\054\022\055\053\037\054\uffe1" +
    "\001\002\000\004\022\144\001\002\000\004\054\143\001" +
    "\002\000\010\034\063\035\065\036\062\001\002\000\026" +
    "\006\uffda\015\uffda\016\uffda\022\uffda\026\uffda\027\uffda\043" +
    "\uffda\047\uffda\060\uffda\061\uffda\001\002\000\026\006\uffdb" +
    "\015\uffdb\016\uffdb\022\uffdb\026\uffdb\027\uffdb\043\uffdb\047" +
    "\uffdb\060\uffdb\061\uffdb\001\002\000\026\006\046\015\071" +
    "\016\074\022\055\026\030\027\031\043\076\047\101\060" +
    "\075\061\073\001\002\000\026\006\uffdc\015\uffdc\016\uffdc" +
    "\022\uffdc\026\uffdc\027\uffdc\043\uffdc\047\uffdc\060\uffdc\061" +
    "\uffdc\001\002\000\046\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\056\uffcb" +
    "\057\uffcb\001\002\000\046\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056" +
    "\uffcc\057\uffcc\001\002\000\036\030\116\031\125\032\110" +
    "\033\114\037\112\040\115\041\104\042\107\045\141\046" +
    "\111\047\123\050\124\051\122\052\113\001\002\000\046" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\056\uffad\057\uffad\001\002\000" +
    "\046\030\uffb1\031\uffb1\032\uffb1\033\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\056\uffb1\057\uffb1\001\002" +
    "\000\024\023\135\024\133\030\134\031\137\046\111\047" +
    "\123\050\124\051\122\052\113\001\002\000\046\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\056\uffac\057\uffac\001\002\000\026\006" +
    "\046\015\071\016\074\022\055\026\030\027\031\043\076" +
    "\047\101\060\075\061\073\001\002\000\026\006\046\015" +
    "\071\016\074\022\055\026\030\027\031\043\076\047\101" +
    "\060\075\061\073\001\002\000\046\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\056\uffb0\057\uffb0\001\002\000\046\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\056\uffb2\057\uffb2\001\002\000\026\006\046\015" +
    "\071\016\074\022\055\026\030\027\031\043\076\047\101" +
    "\060\075\061\073\001\002\000\046\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\056\uffca\057\uffca\001\002\000\046\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\056\uffc8\057\uffc8\001\002\000\026\006\uffb4\015" +
    "\uffb4\016\uffb4\022\uffb4\026\uffb4\027\uffb4\043\uffb4\047\uffb4" +
    "\060\uffb4\061\uffb4\001\002\000\026\006\046\015\071\016" +
    "\074\022\055\026\030\027\031\043\076\047\101\060\075" +
    "\061\073\001\002\000\026\006\uffc1\015\uffc1\016\uffc1\022" +
    "\uffc1\026\uffc1\027\uffc1\043\uffc1\047\uffc1\060\uffc1\061\uffc1" +
    "\001\002\000\026\006\uffb3\015\uffb3\016\uffb3\022\uffb3\026" +
    "\uffb3\027\uffb3\043\uffb3\047\uffb3\060\uffb3\061\uffb3\001\002" +
    "\000\026\006\uffb8\015\uffb8\016\uffb8\022\uffb8\026\uffb8\027" +
    "\uffb8\043\uffb8\047\uffb8\060\uffb8\061\uffb8\001\002\000\050" +
    "\006\uffbf\015\uffbf\016\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\043\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\060\uffbf\061\uffbf\062\uffbf\001" +
    "\002\000\026\006\uffb6\015\uffb6\016\uffb6\022\uffb6\026\uffb6" +
    "\027\uffb6\043\uffb6\047\uffb6\060\uffb6\061\uffb6\001\002\000" +
    "\050\006\uffbb\015\uffbb\016\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\043\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\001\002\000\026\006\uffb7\015\uffb7\016\uffb7\022\uffb7\026" +
    "\uffb7\027\uffb7\043\uffb7\047\uffb7\060\uffb7\061\uffb7\001\002" +
    "\000\026\006\uffb5\015\uffb5\016\uffb5\022\uffb5\026\uffb5\027" +
    "\uffb5\043\uffb5\047\uffb5\060\uffb5\061\uffb5\001\002\000\026" +
    "\006\uffba\015\uffba\016\uffba\022\uffba\026\uffba\027\uffba\043" +
    "\uffba\047\uffba\060\uffba\061\uffba\001\002\000\026\006\uffc2" +
    "\015\uffc2\016\uffc2\022\uffc2\026\uffc2\027\uffc2\043\uffc2\047" +
    "\uffc2\060\uffc2\061\uffc2\001\002\000\026\006\uffc3\015\uffc3" +
    "\016\uffc3\022\uffc3\026\uffc3\027\uffc3\043\uffc3\047\uffc3\060" +
    "\uffc3\061\uffc3\001\002\000\026\006\uffc0\015\uffc0\016\uffc0" +
    "\022\uffc0\026\uffc0\027\uffc0\043\uffc0\047\uffc0\060\uffc0\061" +
    "\uffc0\001\002\000\050\006\uffbc\015\uffbc\016\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\043" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\050\006\uffbe\015\uffbe\016" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\043\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\050\006\uffbd" +
    "\015\uffbd\016\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\043\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000" +
    "\026\006\uffb9\015\uffb9\016\uffb9\022\uffb9\026\uffb9\027\uffb9" +
    "\043\uffb9\047\uffb9\060\uffb9\061\uffb9\001\002\000\046\030" +
    "\116\031\125\032\110\033\114\037\112\040\115\041\104" +
    "\042\107\044\uffc9\045\uffc9\046\111\047\123\050\124\051" +
    "\122\052\113\053\uffc9\056\uffc9\057\uffc9\001\002\000\036" +
    "\030\116\031\125\032\110\033\114\037\112\040\115\041" +
    "\104\042\107\044\130\046\111\047\123\050\124\051\122" +
    "\052\113\001\002\000\046\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\056" +
    "\uffc6\057\uffc6\001\002\000\046\030\116\031\125\032\110" +
    "\033\114\037\112\040\115\041\104\042\107\044\uffc7\045" +
    "\uffc7\046\111\047\123\050\124\051\122\052\113\053\uffc7" +
    "\056\uffc7\057\uffc7\001\002\000\004\061\140\001\002\000" +
    "\004\061\uffa7\001\002\000\004\061\uffa3\001\002\000\004" +
    "\061\uffa6\001\002\000\004\061\uffa5\001\002\000\004\061" +
    "\uffa4\001\002\000\046\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\056\uffa8" +
    "\057\uffa8\001\002\000\024\006\046\007\051\010\057\012" +
    "\053\013\047\014\054\022\055\053\037\054\uffe1\001\002" +
    "\000\004\054\uffe9\001\002\000\034\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\017\ufff0\022\ufff0\053\ufff0\054\ufff0\001\002\000\004\035" +
    "\145\001\002\000\026\006\046\015\071\016\074\022\055" +
    "\026\030\027\031\043\076\047\101\060\075\061\073\001" +
    "\002\000\036\030\116\031\125\032\110\033\114\037\112" +
    "\040\115\041\104\042\107\046\111\047\123\050\124\051" +
    "\122\052\113\057\147\001\002\000\026\006\046\015\071" +
    "\016\074\022\055\026\030\027\031\043\076\047\101\060" +
    "\075\061\073\001\002\000\036\030\116\031\125\032\110" +
    "\033\114\037\112\040\115\041\104\042\107\046\111\047" +
    "\123\050\124\051\122\052\113\053\037\001\002\000\024" +
    "\006\046\007\051\010\057\012\053\013\047\014\054\022" +
    "\055\053\037\054\uffe1\001\002\000\004\054\uffe6\001\002" +
    "\000\004\054\uffe2\001\002\000\026\006\046\015\071\016" +
    "\074\022\055\026\030\027\031\043\076\047\101\060\075" +
    "\061\073\001\002\000\036\030\116\031\125\032\110\033" +
    "\114\037\112\040\115\041\104\042\107\046\111\047\123" +
    "\050\124\051\122\052\113\056\156\001\002\000\054\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\056\uffcd" +
    "\057\uffcd\001\002\000\024\006\046\007\051\010\057\012" +
    "\053\013\047\014\054\022\055\053\037\054\uffe1\001\002" +
    "\000\004\054\uffe3\001\002\000\036\030\116\031\125\032" +
    "\110\033\114\037\112\040\115\041\104\042\107\045\uffde" +
    "\046\111\047\123\050\124\051\122\052\113\001\002\000" +
    "\004\045\163\001\002\000\024\006\046\007\051\010\057" +
    "\012\053\013\047\014\054\022\055\053\037\054\uffe1\001" +
    "\002\000\004\054\uffe5\001\002\000\030\006\046\015\071" +
    "\016\074\022\055\026\030\027\031\043\076\044\uffd6\047" +
    "\101\060\075\061\073\001\002\000\040\030\116\031\125" +
    "\032\110\033\114\037\112\040\115\041\104\042\107\044" +
    "\uffd4\046\111\047\123\050\124\051\122\052\113\057\171" +
    "\001\002\000\004\044\170\001\002\000\046\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\056\uffd9\057\uffd9\001\002\000\026\006\046" +
    "\015\071\016\074\022\055\026\030\027\031\043\076\047" +
    "\101\060\075\061\073\001\002\000\004\044\uffd7\001\002" +
    "\000\040\030\116\031\125\032\110\033\114\037\112\040" +
    "\115\041\104\042\107\044\uffd4\046\111\047\123\050\124" +
    "\051\122\052\113\057\171\001\002\000\004\044\uffd5\001" +
    "\002\000\026\006\046\015\071\016\074\022\055\026\030" +
    "\027\031\043\076\047\101\060\075\061\073\001\002\000" +
    "\036\030\116\031\125\032\110\033\114\037\112\040\115" +
    "\041\104\042\107\044\177\046\111\047\123\050\124\051" +
    "\122\052\113\001\002\000\004\053\037\001\002\000\026" +
    "\006\uffdf\007\uffdf\010\uffdf\011\201\012\uffdf\013\uffdf\014" +
    "\uffdf\022\uffdf\053\uffdf\054\uffdf\001\002\000\004\053\037" +
    "\001\002\000\024\006\046\007\051\010\057\012\053\013" +
    "\047\014\054\022\055\053\037\054\uffe1\001\002\000\004" +
    "\054\uffe7\001\002\000\024\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\022\uffe0\053\uffe0\054\uffe0\001\002" +
    "\000\024\006\046\007\051\010\057\012\053\013\047\014" +
    "\054\022\055\053\037\054\uffe1\001\002\000\004\054\uffe8" +
    "\001\002\000\024\006\046\007\051\010\057\012\053\013" +
    "\047\014\054\022\055\053\037\054\uffe1\001\002\000\004" +
    "\054\uffe4\001\002\000\004\062\212\001\002\000\026\023" +
    "\231\024\226\030\230\031\233\046\111\047\123\050\124" +
    "\051\122\052\113\062\uff9c\001\002\000\006\044\uffd2\057" +
    "\214\001\002\000\030\006\046\015\071\016\074\022\055" +
    "\026\030\027\031\043\076\047\101\060\075\061\073\062" +
    "\212\001\002\000\004\044\216\001\002\000\046\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\056\uffd8\057\uffd8\001\002\000\040\030" +
    "\116\031\125\032\110\033\114\037\112\040\115\041\104" +
    "\042\107\044\uffc5\046\111\047\123\050\124\051\122\052" +
    "\113\057\uffc5\001\002\000\006\044\uffc4\057\uffc4\001\002" +
    "\000\006\044\uffd0\057\222\001\002\000\030\006\046\015" +
    "\071\016\074\022\055\026\030\027\031\043\076\047\101" +
    "\060\075\061\073\062\212\001\002\000\004\044\uffd3\001" +
    "\002\000\006\044\uffd0\057\222\001\002\000\004\044\uffd1" +
    "\001\002\000\026\023\231\024\226\030\230\031\233\046" +
    "\111\047\123\050\124\051\122\052\113\062\uff9c\001\002" +
    "\000\004\062\240\001\002\000\026\023\231\024\226\030" +
    "\230\031\233\046\111\047\123\050\124\051\122\052\113" +
    "\062\uff9c\001\002\000\026\023\231\024\226\030\230\031" +
    "\233\046\111\047\123\050\124\051\122\052\113\062\uff9c" +
    "\001\002\000\026\023\231\024\226\030\230\031\233\046" +
    "\111\047\123\050\124\051\122\052\113\062\uff9c\001\002" +
    "\000\026\023\231\024\226\030\230\031\233\046\111\047" +
    "\123\050\124\051\122\052\113\062\uff9c\001\002\000\004" +
    "\062\uff9e\001\002\000\004\062\uff9f\001\002\000\004\062" +
    "\uffa0\001\002\000\004\062\uff9d\001\002\000\006\044\uffa2" +
    "\057\uffa2\001\002\000\004\062\uffa1\001\002\000\006\045" +
    "\uffec\057\244\001\002\000\004\045\247\001\002\000\004" +
    "\022\245\001\002\000\006\045\uffec\057\244\001\002\000" +
    "\004\045\uffed\001\002\000\030\004\014\005\015\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\022\uffee\053" +
    "\uffee\054\uffee\001\002\000\024\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\014\uffef\022\uffef\053\uffef\054\uffef\001" +
    "\002\000\006\044\ufff3\057\252\001\002\000\006\004\014" +
    "\005\015\001\002\000\004\044\ufff6\001\002\000\004\022" +
    "\255\001\002\000\006\044\ufff3\057\252\001\002\000\004" +
    "\044\ufff4\001\002\000\004\002\000\001\002\000\004\043" +
    "\261\001\002\000\010\004\014\005\015\044\ufff5\001\002" +
    "\000\004\044\263\001\002\000\004\053\037\001\002\000" +
    "\012\004\014\005\015\017\011\054\ufff7\001\002\000\004" +
    "\054\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\006\004\011\010\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\020\001" +
    "\001\000\004\035\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\024\001\001\000" +
    "\002\001\001\000\004\026\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\033\036\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\037\001\001\000\006\007\044\010" +
    "\043\001\001\000\006\004\040\010\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\055\011\057\013\047\014\051\015\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\065" +
    "\014\051\015\066\016\160\025\101\026\077\027\076\031" +
    "\071\042\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\055\011\152\013\047\014\051\015\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\065\014\051\015\066\016\067\025\101\026\077\027\076" +
    "\031\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\104\021\117\022\116\023\105" +
    "\024\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\135\032\131\001\001\000\002\001\001\000\022" +
    "\013\065\014\051\015\066\016\130\025\101\026\077\027" +
    "\076\031\071\001\001\000\022\013\065\014\051\015\066" +
    "\016\126\025\101\026\077\027\076\031\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\065\014\051" +
    "\015\066\016\102\025\101\026\077\027\076\031\071\001" +
    "\001\000\002\001\001\000\014\020\104\021\117\022\116" +
    "\023\105\024\120\001\001\000\002\001\001\000\022\013" +
    "\065\014\051\015\066\016\125\025\101\026\077\027\076" +
    "\031\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\104\021\117\022\116\023\105" +
    "\024\120\001\001\000\014\020\104\021\117\022\116\023" +
    "\105\024\120\001\001\000\002\001\001\000\014\020\104" +
    "\021\117\022\116\023\105\024\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\055\011\141\013\047\014\051\015\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\065\014\051\015\066\016\145\025\101\026\077" +
    "\027\076\031\071\001\001\000\014\020\104\021\117\022" +
    "\116\023\105\024\120\001\001\000\022\013\065\014\051" +
    "\015\066\016\147\025\101\026\077\027\076\031\071\001" +
    "\001\000\016\006\150\020\104\021\117\022\116\023\105" +
    "\024\120\001\001\000\014\006\055\011\151\013\047\014" +
    "\051\015\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\065\014\051\015\066\016\154\025\101\026" +
    "\077\027\076\031\071\001\001\000\014\020\104\021\117" +
    "\022\116\023\105\024\120\001\001\000\002\001\001\000" +
    "\014\006\055\011\157\013\047\014\051\015\060\001\001" +
    "\000\002\001\001\000\014\020\104\021\117\022\116\023" +
    "\105\024\120\001\001\000\002\001\001\000\014\006\055" +
    "\011\163\013\047\014\051\015\060\001\001\000\002\001" +
    "\001\000\024\013\065\014\051\015\066\016\165\025\101" +
    "\026\077\027\076\031\071\044\166\001\001\000\016\020" +
    "\104\021\117\022\116\023\105\024\120\045\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\065\014" +
    "\051\015\066\016\172\025\101\026\077\027\076\031\071" +
    "\001\001\000\002\001\001\000\016\020\104\021\117\022" +
    "\116\023\105\024\120\045\173\001\001\000\002\001\001" +
    "\000\022\013\065\014\051\015\066\016\175\025\101\026" +
    "\077\027\076\031\071\001\001\000\014\020\104\021\117" +
    "\022\116\023\105\024\120\001\001\000\004\006\177\001" +
    "\001\000\004\041\201\001\001\000\004\006\203\001\001" +
    "\000\014\006\055\011\202\013\047\014\051\015\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\055" +
    "\011\205\013\047\014\051\015\060\001\001\000\002\001" +
    "\001\000\014\006\055\011\207\013\047\014\051\015\060" +
    "\001\001\000\002\001\001\000\004\033\212\001\001\000" +
    "\006\021\231\034\226\001\001\000\004\046\214\001\001" +
    "\000\026\013\065\014\051\015\066\016\216\017\220\025" +
    "\101\026\077\027\076\031\071\033\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\104\021\117\022" +
    "\116\023\105\024\120\001\001\000\002\001\001\000\004" +
    "\047\222\001\001\000\026\013\065\014\051\015\066\016" +
    "\216\017\223\025\101\026\077\027\076\031\071\033\217" +
    "\001\001\000\002\001\001\000\004\047\224\001\001\000" +
    "\002\001\001\000\006\021\231\034\240\001\001\000\002" +
    "\001\001\000\006\021\231\034\236\001\001\000\006\021" +
    "\231\034\235\001\001\000\006\021\231\034\234\001\001" +
    "\000\006\021\231\034\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\245\001\001" +
    "\000\002\001\001\000\006\007\247\010\043\001\001\000" +
    "\002\001\001\000\004\037\252\001\001\000\004\010\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\033\036\261\001\001\000\002\001" +
    "\001\000\004\006\263\001\001\000\006\004\264\010\041" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // char_asterisco ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // char_asterisco ::= GREATER char_asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // char_asterisco ::= LESS char_asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // char_asterisco ::= arith_op char_asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // char_asterisco ::= Digit char_asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // char_asterisco ::= Alpha char_asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // string_literal ::= ComillasDoble char_asterisco ComillasDoble 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("string_literal",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // char ::= GREATER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // char ::= LESS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // char ::= arith_op 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // char ::= Digit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // char ::= Alpha 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // char_literal ::= Comillas char Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_literal",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // alpha_num_asterisco ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alpha_num_asterisco",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alpha_num_asterisco ::= Digit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alpha_num_asterisco",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alpha_num_asterisco ::= Alpha 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alpha_num_asterisco",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bool_literal ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bool_literal ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // int_literal ::= Hex_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // int_literal ::= Decimal_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= bool_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= char_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= int_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond_op ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond_op ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // eq_op ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // eq_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rel_op ::= GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rel_op ::= LESS_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rel_op ::= LESS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rel_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arith_op ::= Mod 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arith_op ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arith_op ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arith_op ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arith_op ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bin_op ::= cond_op 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bin_op ::= eq_op 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bin_op ::= rel_op 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bin_op ::= arith_op 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // callout_arg ::= string_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // callout_arg ::= expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= Exclamacion expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= Menos expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr bin_op expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= method_call 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= location 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // location ::= Id Corche_A expr Corche_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // location ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_name ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_name",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call_coma_callout ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call_coma_callout ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_call_corche_dos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call_corche_dos ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_call_corche_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_call_corche_expr ::= Coma expr method_call_corche_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_call_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_call_corche ::= expr method_call_corche_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_call ::= Callout LEFT_PAR string_literal method_call_corche_dos RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_call ::= method_name LEFT_PAR method_call_corche RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_op ::= MINUS_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_op ::= PLUS_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_expr ::= expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_else_block ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_else_block ::= Else block 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= block statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= Continue Punto_coma statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= Break Punto_coma statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= Return statement_expr Punto_coma statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= For Id ASSIGN expr Coma expr block statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= If LEFT_PAR expr RIGHT_PAR block statement_else_block statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= method_call Punto_coma statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= location assign_op expr Punto_coma statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decl_coma_id ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl_coma_id ::= Coma Id var_decl_coma_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl ::= type Id var_decl_coma_id Punto_coma var_decl 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block ::= Llave_A var_decl statement Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // agru_type_void ::= Void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agru_type_void",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // agru_type_void ::= type 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agru_type_void",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl_corche_coma_type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl_corche_coma_type ::= Coma type Id method_decl_corche_coma_type 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl_corche ::= type Id method_decl_corche_coma_type 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_decl ::= Void Id LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_decl ::= type Id LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl_coma_field ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl_coma_field ::= Coma field_name field_decl_coma_field 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_decl ::= field_decl type field_name field_decl_coma_field Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_name ::= Id Corche_A int_literal Corche_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // field_name ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= Class Program Llave_A field_decl method_decl Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

