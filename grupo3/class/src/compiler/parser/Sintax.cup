package compiler.parser;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public void syntax_error(Symbol s){
        //this.s = s;
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna: " +(s.left)+ ". Identificador " +s.value + " no reconocido." );
    }
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Int, Boolean, Callout, If, For, Else, Return, Break, Continue, True, 
        False, Void, Class, Program, Id, Digit, Alpha, Hex_digit,
        Decimal_literal,Hex_literal,GREATER, LESS,LESS_EQUAL,GREATER_EQUAL,
        PLUS_EQUAL, ASSIGN, MINUS_EQUAL,EQUAL,NOT_EQUAL,AND,OR, LEFT_PAR,
        RIGHT_PAR,Punto_coma,Mas, Menos,Multiplicacion, Division, Mod, Llave_A,
        Llave_C,Corche_A, Corche_C, Coma, Exclamacion,Comillas, ComillasDoble, ERROR;


non terminal INICIO, program, field_decl, method_decl,agru_type_void, 
                block, var_decl, type, statement,
                assign_op, method_call, method_name, location, expr, callout_arg, bin_op,
                arith_op, rel_op, eq_op, cond_op, literal, int_literal,bool_literal,alpha_num_asterisco,
                char_literal, char, string_literal, char_asterisco,field_name,method_decl_corche,method_decl_corche_coma_type,
                var_decl_coma_id,statement_else_block,statement_expr,field_decl_coma_field,
                method_call_corche,method_call_corche_expr,method_call_corche_dos,method_call_coma_callout;

precedence left Mas, Menos,Multiplicacion, Division, Mod,GREATER, LESS, LESS_EQUAL, GREATER_EQUAL,EQUAL, NOT_EQUAL,AND, OR ;
start with INICIO;

INICIO::= program:s {:
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) s);
            parser.padre = (Nodo) tmp;
            System.out.println("Correcto");
            RESULT=tmp;
        :};

program ::= Class Program Llave_A field_decl:fd method_decl:md Llave_C {:

            Nodo tmp = new Nodo("program");
            Nodo class_ = new Nodo("class");
            class_.setValor("class");
            class_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) class_);
            
            Nodo pr = new Nodo("Program");
            pr.setValor("Program");
            pr.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) pr);

            Nodo llavea = new Nodo("{");
            llavea.setValor("{");
            llavea.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavea);

            tmp.addHijo((Nodo) fd);
            tmp.addHijo((Nodo) md);

            Nodo llavec = new Nodo("}");
            llavec.setValor("}");
            llavec.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavec);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
        :};

field_name ::= Id {: 
            Nodo tmp = new Nodo("field_name");
            Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) id_);
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            
            :}
            | Id Corche_A int_literal:il Corche_C {:
            Nodo tmp = new Nodo("field_name");
            Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) id_);

            Nodo Corche_a = new Nodo("[");
            Corche_a.setValor("[");
            Corche_a.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) Corche_a);

            tmp.addHijo((Nodo) il);

            Nodo Corche_c = new Nodo("]");
            Corche_c.setValor("]");
            Corche_c.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) Corche_c);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            :};

field_decl ::= field_decl:fd type:t field_name:fn field_decl_coma_field:fdcf Punto_coma {:
                Nodo tmp = new Nodo("field decl");
                tmp.addHijo((Nodo) fd);
                tmp.addHijo((Nodo) t);
                tmp.addHijo((Nodo) fn);
                tmp.addHijo((Nodo) fdcf);

                Nodo ptm = new Nodo(";");
                ptm.setValor(";");
                ptm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) ptm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                :}
             | ;

field_decl_coma_field ::=
            Coma field_name:fn field_decl_coma_field:fdcf {:
                Nodo tmp = new Nodo("field_decl_coma_field");

                Nodo cm = new Nodo(",");
                cm.setValor(",");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) fn);
                tmp.addHijo((Nodo) fdcf);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            :}
            |
;

method_decl ::= type:t Id LEFT_PAR method_decl_corche:mdc RIGHT_PAR block:b method_decl:md {:
                Nodo tmp = new Nodo("method_decl");

                tmp.addHijo((Nodo) t);
                Nodo id_ = new Nodo("id");
                id_.setValor("id");
                id_.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) id_);

                Nodo lefp = new Nodo("(");
                lefp.setValor("(");
                lefp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lefp);

                tmp.addHijo((Nodo) mdc);

                Nodo rightp = new Nodo(")");
                rightp.setValor(")");
                rightp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rightp);

                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) md);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                :} |
                Void Id LEFT_PAR method_decl_corche:mdc RIGHT_PAR block:b method_decl:md {:
                Nodo tmp = new Nodo("method_decl");

                Nodo vd = new Nodo("void");
                vd.setValor("void");
                vd.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) vd);
                
                Nodo id_ = new Nodo("id");
                id_.setValor("id");
                id_.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) id_);

                Nodo lefp = new Nodo("(");
                lefp.setValor("(");
                lefp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lefp);

                tmp.addHijo((Nodo) mdc);

                Nodo rightp = new Nodo(")");
                rightp.setValor(")");
                rightp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rightp);

                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) md);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                :}| 

;

method_decl_corche ::=
        type:t Id method_decl_corche_coma_type:mdcct {:
        Nodo tmp = new Nodo("method_decl_corche");

        tmp.addHijo((Nodo) t);

        Nodo id_ = new Nodo("id");
        id_.setValor("id");
        id_.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) id_);

        tmp.addHijo((Nodo) mdcct);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        :}|
;

method_decl_corche_coma_type ::=
    Coma type:t Id method_decl_corche_coma_type:mdcct {:
        Nodo tmp = new Nodo("method_decl_corche_coma_type");
        Nodo cm = new Nodo(",");
        cm.setValor(",");
        cm.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) cm);

        tmp.addHijo((Nodo) t);
        Nodo id_ = new Nodo("id");
        id_.setValor("id");
        id_.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) id_);
        tmp.addHijo((Nodo) mdcct);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
    :}|
;

agru_type_void ::= 
            type | 
            Void
;

block ::= Llave_A var_decl statement Llave_C;

var_decl ::= type Id var_decl_coma_id Punto_coma var_decl | ;

var_decl_coma_id ::=
            Coma Id var_decl_coma_id |
;

type ::= Int | Boolean;

statement ::= location assign_op expr Punto_coma statement 
        | method_call Punto_coma statement 
        | If LEFT_PAR expr RIGHT_PAR block statement_else_block statement 
        | For Id ASSIGN expr Coma expr block statement 
        | Return statement_expr Punto_coma statement 
        | Break Punto_coma statement 
        | Continue Punto_coma statement 
        | block statement 
        |;

statement_else_block ::=
    Else block |
;

statement_expr ::=
    expr |
;

assign_op ::= ASSIGN
          | PLUS_EQUAL
          | MINUS_EQUAL;

method_call ::= method_name LEFT_PAR method_call_corche RIGHT_PAR
            | Callout LEFT_PAR string_literal method_call_corche_dos RIGHT_PAR;
//----- Carlos
method_call_corche ::=
        expr method_call_corche_expr |
;

method_call_corche_expr ::=
        Coma expr method_call_corche_expr |
;

method_call_corche_dos ::=
        Coma callout_arg method_call_coma_callout |
;

method_call_coma_callout ::=
        Coma callout_arg method_call_coma_callout |
;

method_name ::= Id;

location ::= Id | Id Corche_A expr Corche_C;

expr ::= location
     | method_call
     | literal
     | expr bin_op expr
     | Menos expr
     | Exclamacion expr
     | LEFT_PAR expr RIGHT_PAR;



callout_arg ::= expr
        | string_literal ;

bin_op ::= arith_op
      | rel_op
      | eq_op
      | cond_op;

arith_op ::= Mas | Menos | Multiplicacion | Division | Mod ;
//----- Mario 
rel_op ::= GREATER | LESS | LESS_EQUAL | GREATER_EQUAL ;

eq_op ::= EQUAL | NOT_EQUAL ;

cond_op ::= AND | OR ;

literal ::= int_literal | char_literal | bool_literal ;


int_literal ::=
        Decimal_literal |
        Hex_literal
;

bool_literal ::=
        True |
        False
;

//id ::=
//        Alpha alpha_num_asterisco
//;

//alpha_num_asterisco ::=
//        Alpha |
//        Digit |
//        /* empty */
/;

char_literal ::=
        Comillas char Comillas
;

char ::=
        Alpha |
        Digit |
        arith_op |
        LESS |
        GREATER
;

string_literal ::=
        ComillasDoble char_asterisco ComillasDoble
;

char_asterisco ::=
        Alpha char_asterisco |
        Digit char_asterisco |
        arith_op char_asterisco |
        LESS char_asterisco |
        GREATER char_asterisco |
        /* empty */
;
