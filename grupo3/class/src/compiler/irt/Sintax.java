
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 26 23:34:58 CST 2022
//----------------------------------------------------

package compiler.irt;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 26 23:34:58 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\031\003\000\002\031\006\000\002\044\002" +
    "\000\002\004\010\000\002\004\002\000\002\037\005\000" +
    "\002\037\002\000\002\045\002\000\002\046\002\000\002" +
    "\005\013\000\002\047\002\000\002\050\002\000\002\005" +
    "\013\000\002\005\002\000\002\051\002\000\002\032\006" +
    "\000\002\032\002\000\002\052\002\000\002\033\007\000" +
    "\002\033\002\000\002\006\006\000\002\053\002\000\002" +
    "\007\010\000\002\007\002\000\002\034\005\000\002\034" +
    "\002\000\002\010\003\000\002\010\003\000\002\054\002" +
    "\000\002\011\010\000\002\055\002\000\002\011\006\000" +
    "\002\056\002\000\002\011\012\000\002\057\002\000\002" +
    "\060\002\000\002\011\014\000\002\061\002\000\002\011" +
    "\007\000\002\062\002\000\002\011\006\000\002\063\002" +
    "\000\002\011\006\000\002\064\002\000\002\011\005\000" +
    "\002\011\002\000\002\065\002\000\002\035\005\000\002" +
    "\035\002\000\002\036\003\000\002\036\002\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\066\002" +
    "\000\002\013\007\000\002\067\002\000\002\013\010\000" +
    "\002\070\002\000\002\040\005\000\002\040\002\000\002" +
    "\071\002\000\002\041\006\000\002\041\002\000\002\072" +
    "\002\000\002\042\006\000\002\042\002\000\002\073\002" +
    "\000\002\043\006\000\002\043\002\000\002\014\003\000" +
    "\002\015\003\000\002\015\006\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\005\000\002\016" +
    "\004\000\002\016\004\000\002\016\005\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\020\005\001\002\000\004\002\000\001" +
    "\002\000\004\021\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\053\011\001\002\000" +
    "\012\004\ufffa\005\ufffa\017\ufffa\054\ufffa\001\002\000\012" +
    "\004\016\005\017\017\013\054\ufff1\001\002\000\004\022" +
    "\264\001\002\000\004\054\263\001\002\000\004\022\020" +
    "\001\002\000\004\022\uffe4\001\002\000\004\022\uffe3\001" +
    "\002\000\012\043\ufff7\045\ufffe\055\031\057\ufffe\001\002" +
    "\000\006\045\ufffc\057\ufffc\001\002\000\006\045\ufff8\057" +
    "\023\001\002\000\004\022\026\001\002\000\004\045\025" +
    "\001\002\000\012\004\ufffb\005\ufffb\017\ufffb\054\ufffb\001" +
    "\002\000\010\045\ufffe\055\031\057\ufffe\001\002\000\006" +
    "\045\ufff8\057\023\001\002\000\004\045\ufff9\001\002\000" +
    "\010\023\032\026\033\027\035\001\002\000\046\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\056\uff96\057\uff96\001\002\000\046\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\053\uff98\056\uff98\057\uff98\001\002\000\004" +
    "\056\036\001\002\000\046\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\056" +
    "\uff97\057\uff97\001\002\000\006\045\ufffd\057\ufffd\001\002" +
    "\000\004\043\040\001\002\000\010\004\016\005\017\044" +
    "\uffee\001\002\000\004\022\253\001\002\000\004\044\043" +
    "\001\002\000\004\053\ufff6\001\002\000\004\053\045\001" +
    "\002\000\030\004\016\005\017\006\uffe7\007\uffe7\010\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\022\uffe7\053\uffe7\054\uffe7\001" +
    "\002\000\012\004\016\005\017\017\013\054\ufff1\001\002" +
    "\000\004\054\ufff5\001\002\000\004\022\051\001\002\000" +
    "\004\043\ufff7\001\002\000\004\022\243\001\002\000\024" +
    "\006\054\007\061\010\064\012\060\013\056\014\062\022" +
    "\063\053\uffd3\054\uffd1\001\002\000\004\043\224\001\002" +
    "\000\004\045\221\001\002\000\004\045\216\001\002\000" +
    "\004\043\uffc8\001\002\000\032\006\054\015\077\016\100" +
    "\022\063\023\032\026\033\027\035\043\102\045\uffcc\047" +
    "\106\060\101\062\103\001\002\000\004\043\164\001\002" +
    "\000\004\045\161\001\002\000\060\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb8\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\055\156\056\uffb7" +
    "\057\uffb7\001\002\000\004\022\145\001\002\000\004\054" +
    "\144\001\002\000\004\053\045\001\002\000\010\034\071" +
    "\035\073\036\070\001\002\000\030\006\uffc9\015\uffc9\016" +
    "\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9\043\uffc9\047\uffc9" +
    "\060\uffc9\062\uffc9\001\002\000\030\006\uffca\015\uffca\016" +
    "\uffca\022\uffca\023\uffca\026\uffca\027\uffca\043\uffca\047\uffca" +
    "\060\uffca\062\uffca\001\002\000\030\006\054\015\077\016" +
    "\100\022\063\023\032\026\033\027\035\043\102\047\106" +
    "\060\101\062\103\001\002\000\030\006\uffcb\015\uffcb\016" +
    "\uffcb\022\uffcb\023\uffcb\026\uffcb\027\uffcb\043\uffcb\047\uffcb" +
    "\060\uffcb\062\uffcb\001\002\000\046\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\056\uffb4\057\uffb4\001\002\000\046\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\056\uffb5\057\uffb5\001\002\000\036\030\123\031" +
    "\132\032\115\033\121\037\117\040\122\041\111\042\114" +
    "\045\137\046\116\047\130\050\131\051\127\052\120\001" +
    "\002\000\046\030\uff95\031\uff95\032\uff95\033\uff95\037\uff95" +
    "\040\uff95\041\uff95\042\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\056\uff95\057\uff95" +
    "\001\002\000\046\030\uff94\031\uff94\032\uff94\033\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\056\uff94\057" +
    "\uff94\001\002\000\030\006\054\015\077\016\100\022\063" +
    "\023\032\026\033\027\035\043\102\047\106\060\101\062" +
    "\103\001\002\000\030\006\054\015\077\016\100\022\063" +
    "\023\032\026\033\027\035\043\102\047\106\060\101\062" +
    "\103\001\002\000\046\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\056\uff9a" +
    "\057\uff9a\001\002\000\046\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\056" +
    "\uff99\057\uff99\001\002\000\046\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\030\006\054\015\077\016" +
    "\100\022\063\023\032\026\033\027\035\043\102\047\106" +
    "\060\101\062\103\001\002\000\046\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\056\uffb3\057\uffb3\001\002\000\046\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\056\uffb1\057\uffb1\001\002\000\030\006\uff9d\015" +
    "\uff9d\016\uff9d\022\uff9d\023\uff9d\026\uff9d\027\uff9d\043\uff9d" +
    "\047\uff9d\060\uff9d\062\uff9d\001\002\000\030\006\054\015" +
    "\077\016\100\022\063\023\032\026\033\027\035\043\102" +
    "\047\106\060\101\062\103\001\002\000\030\006\uffaa\015" +
    "\uffaa\016\uffaa\022\uffaa\023\uffaa\026\uffaa\027\uffaa\043\uffaa" +
    "\047\uffaa\060\uffaa\062\uffaa\001\002\000\030\006\uff9c\015" +
    "\uff9c\016\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\043\uff9c" +
    "\047\uff9c\060\uff9c\062\uff9c\001\002\000\030\006\uffa1\015" +
    "\uffa1\016\uffa1\022\uffa1\023\uffa1\026\uffa1\027\uffa1\043\uffa1" +
    "\047\uffa1\060\uffa1\062\uffa1\001\002\000\030\006\uffa8\015" +
    "\uffa8\016\uffa8\022\uffa8\023\uffa8\026\uffa8\027\uffa8\043\uffa8" +
    "\047\uffa8\060\uffa8\062\uffa8\001\002\000\030\006\uff9f\015" +
    "\uff9f\016\uff9f\022\uff9f\023\uff9f\026\uff9f\027\uff9f\043\uff9f" +
    "\047\uff9f\060\uff9f\062\uff9f\001\002\000\030\006\uffa4\015" +
    "\uffa4\016\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4\043\uffa4" +
    "\047\uffa4\060\uffa4\062\uffa4\001\002\000\030\006\uffa0\015" +
    "\uffa0\016\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0\043\uffa0" +
    "\047\uffa0\060\uffa0\062\uffa0\001\002\000\030\006\uff9e\015" +
    "\uff9e\016\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e\043\uff9e" +
    "\047\uff9e\060\uff9e\062\uff9e\001\002\000\030\006\uffa3\015" +
    "\uffa3\016\uffa3\022\uffa3\023\uffa3\026\uffa3\027\uffa3\043\uffa3" +
    "\047\uffa3\060\uffa3\062\uffa3\001\002\000\030\006\uffab\015" +
    "\uffab\016\uffab\022\uffab\023\uffab\026\uffab\027\uffab\043\uffab" +
    "\047\uffab\060\uffab\062\uffab\001\002\000\030\006\uffac\015" +
    "\uffac\016\uffac\022\uffac\023\uffac\026\uffac\027\uffac\043\uffac" +
    "\047\uffac\060\uffac\062\uffac\001\002\000\030\006\uffa9\015" +
    "\uffa9\016\uffa9\022\uffa9\023\uffa9\026\uffa9\027\uffa9\043\uffa9" +
    "\047\uffa9\060\uffa9\062\uffa9\001\002\000\030\006\uffa5\015" +
    "\uffa5\016\uffa5\022\uffa5\023\uffa5\026\uffa5\027\uffa5\043\uffa5" +
    "\047\uffa5\060\uffa5\062\uffa5\001\002\000\030\006\uffa7\015" +
    "\uffa7\016\uffa7\022\uffa7\023\uffa7\026\uffa7\027\uffa7\043\uffa7" +
    "\047\uffa7\060\uffa7\062\uffa7\001\002\000\030\006\uffa6\015" +
    "\uffa6\016\uffa6\022\uffa6\023\uffa6\026\uffa6\027\uffa6\043\uffa6" +
    "\047\uffa6\060\uffa6\062\uffa6\001\002\000\030\006\uffa2\015" +
    "\uffa2\016\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2\043\uffa2" +
    "\047\uffa2\060\uffa2\062\uffa2\001\002\000\046\030\123\031" +
    "\132\032\115\033\121\037\117\040\122\041\111\042\114" +
    "\044\uffb2\045\uffb2\046\116\047\130\050\131\051\127\052" +
    "\120\053\uffb2\056\uffb2\057\uffb2\001\002\000\036\030\123" +
    "\031\132\032\115\033\121\037\117\040\122\041\111\042" +
    "\114\044\135\046\116\047\130\050\131\051\127\052\120" +
    "\001\002\000\046\030\uffaf\031\uffaf\032\uffaf\033\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\056\uffaf\057" +
    "\uffaf\001\002\000\046\030\123\031\132\032\115\033\121" +
    "\037\117\040\122\041\111\042\114\044\uffb0\045\uffb0\046" +
    "\116\047\130\050\131\051\127\052\120\053\uffb0\056\uffb0" +
    "\057\uffb0\001\002\000\024\006\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\022\uffe2\053\uffe2\054\uffe2\001\002" +
    "\000\024\006\054\007\061\010\064\012\060\013\056\014" +
    "\062\022\063\053\uffd3\054\uffd1\001\002\000\004\054\uffe1" +
    "\001\002\000\024\006\054\007\061\010\064\012\060\013" +
    "\056\014\062\022\063\053\uffd3\054\uffd1\001\002\000\004" +
    "\054\uffd2\001\002\000\034\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\017\uffea" +
    "\022\uffea\053\uffea\054\uffea\001\002\000\004\035\146\001" +
    "\002\000\030\006\054\015\077\016\100\022\063\023\032" +
    "\026\033\027\035\043\102\047\106\060\101\062\103\001" +
    "\002\000\036\030\123\031\132\032\115\033\121\037\117" +
    "\040\122\041\111\042\114\046\116\047\130\050\131\051" +
    "\127\052\120\057\150\001\002\000\030\006\054\015\077" +
    "\016\100\022\063\023\032\026\033\027\035\043\102\047" +
    "\106\060\101\062\103\001\002\000\036\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\046" +
    "\116\047\130\050\131\051\127\052\120\053\uffdc\001\002" +
    "\000\004\053\045\001\002\000\024\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\022\uffdb\053\uffdb\054\uffdb" +
    "\001\002\000\024\006\054\007\061\010\064\012\060\013" +
    "\056\014\062\022\063\053\uffd3\054\uffd1\001\002\000\004" +
    "\054\uffda\001\002\000\030\006\054\015\077\016\100\022" +
    "\063\023\032\026\033\027\035\043\102\047\106\060\101" +
    "\062\103\001\002\000\036\030\123\031\132\032\115\033" +
    "\121\037\117\040\122\041\111\042\114\046\116\047\130" +
    "\050\131\051\127\052\120\056\160\001\002\000\054\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\056\uffb6" +
    "\057\uffb6\001\002\000\024\006\uffd5\007\uffd5\010\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\022\uffd5\053\uffd5\054\uffd5\001\002" +
    "\000\024\006\054\007\061\010\064\012\060\013\056\014" +
    "\062\022\063\053\uffd3\054\uffd1\001\002\000\004\054\uffd4" +
    "\001\002\000\030\006\054\015\077\016\100\022\063\023" +
    "\032\026\033\027\035\043\102\047\106\060\101\062\103" +
    "\001\002\000\036\030\123\031\132\032\115\033\121\037" +
    "\117\040\122\041\111\042\114\044\166\046\116\047\130" +
    "\050\131\051\127\052\120\001\002\000\004\053\uffde\001" +
    "\002\000\004\053\045\001\002\000\026\006\uffce\007\uffce" +
    "\010\uffce\011\uffd0\012\uffce\013\uffce\014\uffce\022\uffce\053" +
    "\uffce\054\uffce\001\002\000\004\011\174\001\002\000\024" +
    "\006\054\007\061\010\064\012\060\013\056\014\062\022" +
    "\063\053\uffd3\054\uffd1\001\002\000\004\054\uffdd\001\002" +
    "\000\004\053\045\001\002\000\024\006\uffcf\007\uffcf\010" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\053\uffcf\054\uffcf" +
    "\001\002\000\036\030\123\031\132\032\115\033\121\037" +
    "\117\040\122\041\111\042\114\045\uffcd\046\116\047\130" +
    "\050\131\051\127\052\120\001\002\000\004\045\200\001" +
    "\002\000\024\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\022\uffd9\053\uffd9\054\uffd9\001\002\000\024\006" +
    "\054\007\061\010\064\012\060\013\056\014\062\022\063" +
    "\053\uffd3\054\uffd1\001\002\000\004\054\uffd8\001\002\000" +
    "\004\043\204\001\002\000\032\006\054\015\077\016\100" +
    "\022\063\023\032\026\033\027\035\043\102\044\uffc2\047" +
    "\106\060\101\062\103\001\002\000\040\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\044" +
    "\uffc4\046\116\047\130\050\131\051\127\052\120\057\uffc4" +
    "\001\002\000\004\044\207\001\002\000\046\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\056\uffc7\057\uffc7\001\002\000\006\044\uffbf" +
    "\057\211\001\002\000\030\006\054\015\077\016\100\022" +
    "\063\023\032\026\033\027\035\043\102\047\106\060\101" +
    "\062\103\001\002\000\004\044\uffc3\001\002\000\040\030" +
    "\123\031\132\032\115\033\121\037\117\040\122\041\111" +
    "\042\114\044\uffc1\046\116\047\130\050\131\051\127\052" +
    "\120\057\uffc1\001\002\000\006\044\uffbf\057\211\001\002" +
    "\000\004\044\uffc0\001\002\000\024\006\uffd7\007\uffd7\010" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\022\uffd7\053\uffd7\054\uffd7" +
    "\001\002\000\024\006\054\007\061\010\064\012\060\013" +
    "\056\014\062\022\063\053\uffd3\054\uffd1\001\002\000\004" +
    "\054\uffd6\001\002\000\024\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\022\uffe0\053\uffe0\054\uffe0\001\002" +
    "\000\024\006\054\007\061\010\064\012\060\013\056\014" +
    "\062\022\063\053\uffd3\054\uffd1\001\002\000\004\054\uffdf" +
    "\001\002\000\004\063\225\001\002\000\006\044\uffc6\057" +
    "\uffc6\001\002\000\006\044\uffbc\057\227\001\002\000\032" +
    "\006\054\015\077\016\100\022\063\023\032\026\033\027" +
    "\035\043\102\047\106\060\101\062\103\063\233\001\002" +
    "\000\004\044\231\001\002\000\046\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\056\uffc5\057\uffc5\001\002\000\040\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\044" +
    "\uffae\046\116\047\130\050\131\051\127\052\120\057\uffae" +
    "\001\002\000\006\044\uffad\057\uffad\001\002\000\006\044" +
    "\uffbe\057\uffbe\001\002\000\006\044\uffb9\057\236\001\002" +
    "\000\032\006\054\015\077\016\100\022\063\023\032\026" +
    "\033\027\035\043\102\047\106\060\101\062\103\063\233" +
    "\001\002\000\004\044\uffbd\001\002\000\006\044\uffbb\057" +
    "\uffbb\001\002\000\006\044\uffb9\057\236\001\002\000\004" +
    "\044\uffba\001\002\000\006\045\uffe9\057\uffe9\001\002\000" +
    "\006\045\uffe5\057\246\001\002\000\004\045\251\001\002" +
    "\000\004\022\247\001\002\000\006\045\uffe5\057\246\001" +
    "\002\000\004\045\uffe6\001\002\000\030\004\016\005\017" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\022" +
    "\uffe7\053\uffe7\054\uffe7\001\002\000\024\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\022\uffe8\053\uffe8\054" +
    "\uffe8\001\002\000\006\044\ufff0\057\ufff0\001\002\000\006" +
    "\044\uffeb\057\255\001\002\000\006\004\016\005\017\001" +
    "\002\000\004\044\uffef\001\002\000\004\022\260\001\002" +
    "\000\006\044\uffed\057\uffed\001\002\000\006\044\uffeb\057" +
    "\255\001\002\000\004\044\uffec\001\002\000\004\002\uffff" +
    "\001\002\000\004\043\ufff4\001\002\000\004\043\266\001" +
    "\002\000\010\004\016\005\017\044\uffee\001\002\000\004" +
    "\044\270\001\002\000\004\053\ufff3\001\002\000\004\053" +
    "\045\001\002\000\012\004\016\005\017\017\013\054\ufff1" +
    "\001\002\000\004\054\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\006\005" +
    "\013\010\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\036\001\001\000\004\044\021\001\001" +
    "\000\004\037\023\001\001\000\004\031\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\027\001\001\000\002\001\001\000\004\026\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\040\032\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\043\001\001\000\004\006\045\001" +
    "\001\000\006\007\052\010\051\001\001\000\006\005\046" +
    "\010\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\036\001\001\000\002\001\001\000\014\011\064" +
    "\013\054\014\056\015\066\064\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\202" +
    "\001\001\000\022\013\073\014\056\015\074\016\175\025" +
    "\106\026\104\027\103\036\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\141\001\001\000\004\012\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\073\014\056\015\074\016\075\025\106\026\104\027\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\111\021\124\022\123\023\112\024\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\073\014\056\015\074\016\135\025\106\026\104\027\103" +
    "\001\001\000\020\013\073\014\056\015\074\016\133\025" +
    "\106\026\104\027\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\073\014\056\015" +
    "\074\016\107\025\106\026\104\027\103\001\001\000\002" +
    "\001\001\000\014\020\111\021\124\022\123\023\112\024" +
    "\125\001\001\000\002\001\001\000\020\013\073\014\056" +
    "\015\074\016\132\025\106\026\104\027\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\111\021\124\022\123\023\112\024\125\001\001\000" +
    "\014\020\111\021\124\022\123\023\112\024\125\001\001" +
    "\000\002\001\001\000\014\020\111\021\124\022\123\023" +
    "\112\024\125\001\001\000\004\054\137\001\001\000\014" +
    "\011\140\013\054\014\056\015\066\064\065\001\001\000" +
    "\002\001\001\000\014\011\142\013\054\014\056\015\066" +
    "\064\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\073\014\056\015\074\016\146" +
    "\025\106\026\104\027\103\001\001\000\014\020\111\021" +
    "\124\022\123\023\112\024\125\001\001\000\020\013\073" +
    "\014\056\015\074\016\150\025\106\026\104\027\103\001" +
    "\001\000\016\020\111\021\124\022\123\023\112\024\125" +
    "\057\151\001\001\000\004\006\152\001\001\000\004\060" +
    "\153\001\001\000\014\011\154\013\054\014\056\015\066" +
    "\064\065\001\001\000\002\001\001\000\020\013\073\014" +
    "\056\015\074\016\156\025\106\026\104\027\103\001\001" +
    "\000\014\020\111\021\124\022\123\023\112\024\125\001" +
    "\001\000\002\001\001\000\004\063\161\001\001\000\014" +
    "\011\162\013\054\014\056\015\066\064\065\001\001\000" +
    "\002\001\001\000\020\013\073\014\056\015\074\016\164" +
    "\025\106\026\104\027\103\001\001\000\014\020\111\021" +
    "\124\022\123\023\112\024\125\001\001\000\004\056\166" +
    "\001\001\000\004\006\167\001\001\000\006\035\171\065" +
    "\170\001\001\000\002\001\001\000\014\011\172\013\054" +
    "\014\056\015\066\064\065\001\001\000\002\001\001\000" +
    "\004\006\174\001\001\000\002\001\001\000\014\020\111" +
    "\021\124\022\123\023\112\024\125\001\001\000\002\001" +
    "\001\000\004\061\200\001\001\000\014\011\201\013\054" +
    "\014\056\015\066\064\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\073\014\056\015\074\016\204" +
    "\025\106\026\104\027\103\040\205\001\001\000\016\020" +
    "\111\021\124\022\123\023\112\024\125\070\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\211\001" +
    "\001\000\020\013\073\014\056\015\074\016\212\025\106" +
    "\026\104\027\103\001\001\000\002\001\001\000\016\020" +
    "\111\021\124\022\123\023\112\024\125\071\213\001\001" +
    "\000\004\041\214\001\001\000\002\001\001\000\004\062" +
    "\216\001\001\000\014\011\217\013\054\014\056\015\066" +
    "\064\065\001\001\000\002\001\001\000\004\055\221\001" +
    "\001\000\014\011\222\013\054\014\056\015\066\064\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\225\001\001\000\004\042\227\001\001\000\022\013\073" +
    "\014\056\015\074\016\231\017\233\025\106\026\104\027" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\111\021\124\022\123\023\112\024\125\001\001\000" +
    "\002\001\001\000\004\072\234\001\001\000\004\043\236" +
    "\001\001\000\022\013\073\014\056\015\074\016\231\017" +
    "\237\025\106\026\104\027\103\001\001\000\002\001\001" +
    "\000\004\073\240\001\001\000\004\043\241\001\001\000" +
    "\002\001\001\000\004\053\243\001\001\000\004\034\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\247\001\001\000\002\001\001\000\006\007\251\010\051" +
    "\001\001\000\002\001\001\000\004\051\253\001\001\000" +
    "\004\033\255\001\001\000\004\010\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\260\001\001\000" +
    "\004\033\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\264\001\001\000\002\001\001\000\006\010" +
    "\040\032\266\001\001\000\002\001\001\000\004\050\270" +
    "\001\001\000\004\006\271\001\001\000\006\005\272\010" +
    "\047\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public void syntax_error(Symbol s){
        //this.s = s;
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna: " +(s.left)+ ". Identificador " +s.value + " no reconocido." + "el type: " + s.sym);
    }
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

    public Symbol getS(){
        return this.s;
    }
 

    public Semantic_fun TABLA = new Semantic_fun();
    public int global_scope = 0;
    public int param_cont = 0;
    public Nodo_irt mdc = new Nodo_irt("parametros");
    public int count_if = 0;
    public int count_for = 0;
    public ArrayList<Nodo_irt> Lista_IRT = new ArrayList<>();
    public ArrayList<String> STACK = new ArrayList<>();
    ArrayList<String> for_ids = new ArrayList<>();
    class ValoresTabla_fun{
    public HashMap<String, String> data;

    public void Adddata(HashMap<String, String> valor){
        this.data = valor;
    }
    
    
}
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bool_literal ::= False 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    tmp.setValor("false");
    tmp.settype("Boolean");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bool_literal ::= True 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    tmp.setValor("true");
    tmp.settype("Boolean");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // int_literal ::= Digit 
            {
              Object RESULT =null;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("Digit");
    tmp.setValor("" + dig);
    tmp.settype("Int");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // int_literal ::= Hex_literal 
            {
              Object RESULT =null;
		int hexlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hexlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object hexl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("Hex_literal");
    // convertirlo. 
    tmp.setValor("" + hexl);
    tmp.settype("Int");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // int_literal ::= Decimal_literal 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("int_literal");
    tmp.setValor("" + dl);
    tmp.settype("Int");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= bool_literal 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo bool = (Nodo) bl;
    tmp.setValor( bool.getValor());
    tmp.settype( bool.gettype());
    
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo chl = (Nodo) cl;
    tmp.setValor( chl.getValor());
    tmp.settype( chl.gettype());
    
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= int_literal 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo inl = (Nodo) il;
    tmp.setValor( inl.getValor());
    tmp.settype( inl.gettype());
    
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond_op ::= OR 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("OR");
        tmp.setValor("OR");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cond_op ::= AND 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("AND");
        tmp.setValor("AND");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // eq_op ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("NOT_EQUAL");
        tmp.setValor("NOT_EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // eq_op ::= EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("EQUAL");
        tmp.setValor("EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rel_op ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("GREATER_EQUAL");
        tmp.setValor("GREATER_EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rel_op ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("LESS_EQUAL");
        tmp.setValor("LESS_EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rel_op ::= LESS 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("LESS");
        tmp.setValor("LESS");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rel_op ::= GREATER 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("GREATER");
        tmp.setValor("GREATER");
        RESULT = tmp;

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arith_op ::= Mod 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Mod");
        tmp.setValor("Mod");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arith_op ::= Division 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Div");
        tmp.setValor("Div");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arith_op ::= Multiplicacion 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Multi");
        tmp.setValor("Multi");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arith_op ::= Menos 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Menos");
        tmp.setValor("Menos");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arith_op ::= Mas 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Mas");
        tmp.setValor("Mas");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bin_op ::= cond_op 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("cond_op");
        Nodo cov = (Nodo) co;
        tmp.setValor(cov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bin_op ::= eq_op 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("eq_op");
        Nodo eov = (Nodo) eo;
        tmp.setValor(eov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bin_op ::= rel_op 
            {
              Object RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("rel_op");
        Nodo rov = (Nodo) ro;
        tmp.setValor(rov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bin_op ::= arith_op 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("arith_op");
        Nodo aov = (Nodo) ao;
        tmp.setValor(aov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // callout_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int Slleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Slright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object Sl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("callout_arg");
        Nodo strl   = new Nodo("STRING_LITERAL");
        strl.setValor("" + Sl);
        String valor = strl.getValor();
        valor = valor.substring(1,valor.length()-1);
        strl.setValor(valor);
        try{
            int entero = Integer.valueOf(strl.getValor());
            tmp.settype("Int");
            tmp.setValor("" + Sl);
            
        }catch (Exception es){
            strl.setIdentifier(valor);
            if (strl.getIdentifier().equals("true") || strl.getIdentifier().equals("false")){
                tmp.settype("Boolean");
                tmp.setValor("" + Sl);
            }else {
                int esta = valor.indexOf("[");
                if(esta != -1){
                    valor = valor.substring(0,esta);
                    strl.setIdentifier(valor);
                    System.out.println("El identi del strl es: " + strl.getIdentifier());
                    int [] bandera = parser.TABLA.lookup(strl, parser.global_scope);
                    if (bandera[0] == 1) {
                       tmp.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                       tmp.setValor(strl.getIdentifier());
                    }
                    else {
                        bandera = parser.TABLA.lookup_param(strl);
                        if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                            tmp.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                            tmp.setValor(strl.getIdentifier());

                        }else {
                        System.out.println("La variable " + strl.getIdentifier() + ",no existe");
                        System.exit(0);
                        }
                    }
                    
                }else {
                    strl.setIdentifier(valor);
                    System.out.println("El identi del strl es: " + strl.getIdentifier());
                    int [] bandera = parser.TABLA.lookup(strl, parser.global_scope);
                    if (bandera[0] == 1) {
                       tmp.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                       tmp.setValor(strl.getIdentifier());
                    }
                    else {
                        bandera = parser.TABLA.lookup_param(strl);
                        if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                            tmp.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                            tmp.setValor(strl.getIdentifier());

                        }else {
                        System.out.println("La variable " + strl.getIdentifier() + ",no existe");
                        System.exit(0);
                        }
                    }
                }   
            }
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // callout_arg ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("callout_arg");
        Nodo expr_x = (Nodo) ex;
        tmp.settype(expr_x.gettype());
        tmp.setValor(expr_x.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = (Nodo) ex;
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= Exclamacion expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
       Nodo tmp = new Nodo("expr");
        Nodo expr1 = (Nodo) ex;
        if (expr1.gettype().equals("Boolean")){
            tmp.settype("Boolean");
            Nodo_irt negacion = new Nodo_irt("Negacion");
                negacion.Crear_negacion(expr1.getValor());
                if (parser.STACK.size() == 0){
                    negacion.negacion_nodo.setRegistro("$t0");
                    parser.STACK.add("$t0");
                    tmp.setValor("$t0");}
                else {
                    int ultimo = parser.STACK.size();
                    negacion.negacion_nodo.setRegistro("$t" + ultimo);
                    parser.STACK.add("$t" + ultimo);
                    tmp.setValor("$t" + ultimo);
                }
                parser.Lista_IRT.add(negacion);
            
        }
        else {
            System.out.println("No se puede usar el signo ! con integers");
            System.exit(0);
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= Menos expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");
        Nodo expr1 = (Nodo) ex;
        if (expr1.gettype().equals("Int")){
            tmp.settype("Int");
            Nodo_irt operador = new Nodo_irt("Operador");
                operador.Crear_operacion("Menos","0", expr1.getValor());
                if (parser.STACK.size() == 0){
                    operador.co.setRegistro("$t0");
                    parser.STACK.add("$t0");
                    tmp.setValor("$t0");}
                else {
                    int ultimo = parser.STACK.size();
                    operador.co.setRegistro("$t" + ultimo);
                    parser.STACK.add("$t" + ultimo);
                    tmp.setValor("$t" + ultimo);
                }
                parser.Lista_IRT.add(operador);
            
        }
        else {
            System.out.println("No se puede usar el - menos con booleanos");
            System.exit(0);
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr bin_op expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo expr1 = (Nodo) ex;
        Nodo bin_op_ = (Nodo) bo;
        Nodo expr2 = (Nodo) ex2;


        if (bin_op_.getNombre().equals("arith_op") || bin_op_.getNombre().equals("rel_op") )
        {
            if(expr1.gettype().equals("Int")){
                if (expr1.gettype().equals(expr2.gettype())){
                Nodo_irt operacion = new Nodo_irt("Operador");
                switch(bin_op_.getValor()) {
                    case "Mas":
                            tmp.settype(expr1.gettype());
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                            
                        break;
                    case "Menos":
                            tmp.settype(expr1.gettype());
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                            
                        break;
                    case "Multi":
                            tmp.settype(expr1.gettype());
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                            
                        break;
                    case "Div":
                            tmp.settype(expr1.gettype());
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                            
                        break;
                    case "Mod":
                            tmp.settype(expr1.gettype());
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                            
                        break;
                    case "GREATER":
                            tmp.settype("Boolean");
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                             
                        break;
                    case "LESS":
                            tmp.settype("Boolean");
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                             
                        break;
                    case "LESS_EQUAL":
                            tmp.settype("Boolean");
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                             
                        break;
                    case "GREATER_EQUAL":
                            tmp.settype("Boolean");
                            
                            operacion.Crear_operacion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                            if (parser.STACK.size() == 0){
                                operacion.op.setRegistro("$t0");
                                parser.STACK.add("$t0");
                                tmp.setValor("$t0");}
                            else {
                                int ultimo = parser.STACK.size();
                                operacion.op.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                                tmp.setValor("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(operacion);
                             
                        break;
                    default:
                        System.out.println("No entro nada");
                
                    }
                }
                else {
                    System.out.println("Operación de distinto tipo");
                    System.exit(0);
                }

            }
            else {
                System.out.println("No se pueden operar las variables booleanas con este signo: " + bin_op_.getValor());
                System.exit(0);
                }
    
        }else{
            if(expr1.gettype().equals(expr2.gettype())){
                tmp.settype("Boolean");
                Nodo_irt condicion = new Nodo_irt("Condicion");
                condicion.Crear_condicion(bin_op_.getValor(),expr1.getValor() , expr2.getValor());
                if (parser.STACK.size() == 0){
                    condicion.co.setRegistro("$t0");
                    parser.STACK.add("$t0");
                    tmp.setValor("$t0");}
                else {
                    int ultimo = parser.STACK.size();
                    condicion.co.setRegistro("$t" + ultimo);
                    parser.STACK.add("$t" + ultimo);
                    tmp.setValor("$t" + ultimo);
                }
                parser.Lista_IRT.add(condicion);
                             
                }
            else{
                System.out.println("Operación de variables de distintos tipos");
                System.exit(0);
            }
        }
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) lit);
        Nodo liter = (Nodo) lit;
        tmp.settype(liter.gettype());
        tmp.setValor(liter.getValor());
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= method_call 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");
        if (parser.TABLA.BANDERAS.get("Llamada_callout").equals("Si")){
            System.out.println("Cambie la bandera: " + parser.TABLA.BANDERAS.get("Llamada_callout"));
            tmp.settype("Int");
            parser.TABLA.BANDERAS.replace("Llamada_callout", "");
        }
        else {
            tmp.settype(parser.TABLA.BANDERAS.get("Llamada_fun_type"));
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= location 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        // buscar el id del location
        // guardar su valor en tmp.setValor();
        Nodo loc = (Nodo) l;
        int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
        if (bandera[0] == 1) {
           tmp.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
           System.out.println("EL LOC IDENTI: " + loc.getIdentifier());
           tmp.setValor(loc.getIdentifier());
        }
        else {
            bandera = parser.TABLA.lookup_param(loc);
            if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                tmp.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                System.out.println("EL LOC IDENTI: " + loc.getIdentifier());
                tmp.setValor(loc.getIdentifier());
                
            }else {
            System.out.println("La variable " + loc.getIdentifier() + ",no existe");
            System.exit(0);
            }
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // location ::= Id Corche_A expr Corche_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("location");


        tmp.setIdentifier(id + "");
        System.out.println("ENTRE A LOCATION ::= Id[num]");
        
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // location ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("location");


        tmp.setIdentifier(id + "");
        System.out.println("ENTRE A LOCATION ::= Id");
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // method_name ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_name");


        tmp.setIdentifier(id + "");
        System.out.println("ENTRE A LOCATION ::= Id");
        
        RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_name",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // method_call_coma_callout ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // method_call_coma_callout ::= Coma callout_arg NT$23 method_call_coma_callout 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$23 ::= 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("method_call_coma_callout");

                Nodo callout_arg_x = (Nodo) ca;
                if (parser.TABLA.Tabla_fun.get("PARAM").get(parser.param_cont).data.get("type").equals(callout_arg_x.gettype())) {
                    System.out.println("Parámetro bueno");
                    parser.param_cont = parser.param_cont + 1;
                    parser.mdc.parametros_nodo.addParame(callout_arg_x.getValor());
                } else {
                    System.out.println("El parametro es de tipo: " + parser.TABLA.Tabla_fun.get("PARAM").get(0).data.get("type") + ", no puede ser: " + callout_arg_x.gettype());
                    System.exit(0);
                }
                


                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_call_corche_dos ::= 
            {
              Object RESULT =null;
		 if(parser.TABLA.Tabla_fun.get("PARAM") == null) {System.out.println("Todo bien");}
                else {
                    System.out.println("La funcion requiere paramtros");
                    System.exit(0);
                } 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_call_corche_dos ::= Coma callout_arg NT$22 method_call_coma_callout 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$22 ::= 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            
        Nodo tmp = new Nodo("call_corche_primero");
                
                Nodo callout_arg_x = (Nodo) ca;
                if (parser.TABLA.Tabla_fun.get("PARAM").get(parser.param_cont).data.get("type").equals(callout_arg_x.gettype())) {
                    System.out.println("Primer parámetro bueno");
                    parser.param_cont = parser.param_cont + 1;
                    parser.mdc.Crear_parametros();
                    parser.mdc.parametros_nodo.addParame(callout_arg_x.getValor());
                } else {
                    System.out.println("El parametro es de tipo: " + parser.TABLA.Tabla_fun.get("PARAM").get(parser.param_cont).data.get("type") + ", no puede ser: " + callout_arg_x.gettype());
                    System.exit(0);
                }
                
                RESULT = tmp;
            
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // method_call_corche_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // method_call_corche_expr ::= Coma expr NT$21 method_call_corche_expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$21 ::= 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("method_call_corche_expr");
                Nodo expr_x = (Nodo) ex;
                if (parser.TABLA.Tabla_fun.get("PARAM").get(parser.param_cont).data.get("type").equals(expr_x.gettype())) {
                    System.out.println("Parámetro bueno");
                    parser.param_cont = parser.param_cont + 1;
                    parser.mdc.parametros_nodo.addParame(expr_x.getValor());
                } else {
                    System.out.println("El parametro es de tipo: " + parser.TABLA.Tabla_fun.get("PARAM").get(0).data.get("type") + ", no puede ser: " + expr_x.gettype());
                    System.exit(0);
                }
                
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // method_call_corche ::= 
            {
              Object RESULT =null;
		 
                if(parser.TABLA.Tabla_fun.get("PARAM") == null) {System.out.println("Todo bien");}
                else {
                    System.out.println("La funcion requiere paramtros");
                    System.exit(0);
                }
        
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // method_call_corche ::= expr NT$20 method_call_corche_expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$20 ::= 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("method_call_corche");
                
                Nodo expr_x = (Nodo) ex;
                if (parser.TABLA.Tabla_fun.get("PARAM").get(parser.param_cont).data.get("type").equals(expr_x.gettype())) {
                    System.out.println("Primer parámetro bueno");
                    parser.param_cont = parser.param_cont + 1;
                    parser.mdc.Crear_parametros();
                    parser.mdc.parametros_nodo.addParame(expr_x.getValor());
                    
                    
                } else {
                    System.out.println("El parametro es de tipo: " + parser.TABLA.Tabla_fun.get("PARAM").get(parser.param_cont).data.get("type") + ", no puede ser: " + expr_x.gettype());
                    System.exit(0);
                }
                
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_call ::= Callout LEFT_PAR STRING_LITERAL NT$19 method_call_corche_dos RIGHT_PAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Slleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Slright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object Sl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int mccdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mccd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  
                    if (parser.TABLA.Tabla_fun.get("PARAM") != null && parser.param_cont == parser.TABLA.Tabla_fun.get("PARAM").size()){
                            parser.param_cont = 0;
                            parser.TABLA.Tabla_fun.replace("PARAM", null);
                            Nodo fun = new Nodo("");
                            fun.setIdentifier("" + Sl);
                            String valor = fun.getIdentifier();
                            valor = valor.substring(1,valor.length()-1);
                            fun.setIdentifier(valor);
                            Nodo mename = (Nodo) fun;
                            Nodo_irt metodo = new Nodo_irt("Method_call");
                            if (parser.mdc.parametros_nodo != null){
                                    metodo.Crear_method((mename.getIdentifier()), parser.mdc.parametros_nodo.getParame());
                                    parser.Lista_IRT.add(metodo);
                                    parser.mdc.parametros_nodo.Clear_parame();
                            }
                            else {
                                    metodo.Crear_method((mename.getIdentifier()), "()");
                                    parser.Lista_IRT.add(metodo);
                                    }
                              
                    }else {
                        if (parser.param_cont != 0){
                        System.out.println("Faltan parámetros");
                        System.exit(0);
                        }
                        else {
                            parser.param_cont = 0;
                            parser.TABLA.Tabla_fun.replace("PARAM", null);}
                            Nodo fun = new Nodo("");
                            fun.setIdentifier("" + Sl);
                            String valor = fun.getIdentifier();
                            valor = valor.substring(1,valor.length()-1);
                            fun.setIdentifier(valor);
                            Nodo mename = (Nodo) fun;
                            Nodo_irt metodo = new Nodo_irt("Method_call");
                            metodo.Crear_method((mename.getIdentifier()), "()");
                            parser.Lista_IRT.add(metodo);
                        }

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$19 ::= 
            {
              Object RESULT =null;
		int Slleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Slright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object Sl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo fun = new Nodo("");
                fun.setIdentifier("" + Sl);
                String valor = fun.getIdentifier();
                valor = valor.substring(1,valor.length()-1);
                fun.setIdentifier(valor);
                parser.TABLA.BANDERAS.replace("Llamada_callout", "Si");
                System.out.println("Cambie la bandera: " + parser.TABLA.BANDERAS.get("Llamada_callout"));
                int [] bandera = parser.TABLA.lookup(fun, parser.global_scope);
                if (bandera[0] == 1 && bandera[2] == 1) {
                    if (parser.TABLA.Tabla.get("Scope: " + 1).get(bandera[1]).data.containsValue("Metodo")){
                        System.out.println("Funcion " + fun.getIdentifier() + " llamada por callout");
                        parser.TABLA.BANDERAS.replace("Llamada_fun", fun.getIdentifier());
                        for (int x = 0; x < parser.TABLA.Tabla_m.get("DATA").size(); x++) {
                            for (String y : parser.TABLA.Tabla_m.get("DATA").get(x).data.keySet()) {
                                if (y.equals("Funcion") && parser.TABLA.Tabla_m.get("DATA").get(x).data.get(y).equals(fun.getIdentifier())){  
                                    if (parser.TABLA.Tabla_fun.get("PARAM") == null){
                                        parser.TABLA.BANDERAS.replace("Llamada_fun_type", parser.TABLA.Tabla_m.get("DATA").get(x).data.get("type"));
                                        System.out.println("LA DE PARAM ESTA VACIA");
                                        ValoresTabla_fun data = parser.TABLA.Tabla_m.get("DATA").get(x);
                                        ArrayList<ValoresTabla_fun> lista = new ArrayList<>();
                                        lista.add(data);
                                        parser.TABLA.Tabla_fun.replace("PARAM", lista);
                                    }
                                    else{
                                        System.out.println("Ya hay en PARAM, SOLO AGREGO");
                                        ValoresTabla_fun data = parser.TABLA.Tabla_m.get("DATA").get(x);
                                        parser.TABLA.Tabla_fun.get("PARAM").add(data);
                                    }
                                }

                            }
                        }
                         
                    }
                    else {
                        System.out.println("No existe el metodo " + fun.getIdentifier());
                        System.exit(0);
                        }
                }
                else {
                    System.out.println("No existe el metodo " + fun.getIdentifier());
                    System.exit(0);
                }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // method_call ::= method_name NT$18 LEFT_PAR method_call_corche RIGHT_PAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int mccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mcc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                if (parser.TABLA.Tabla_fun.get("PARAM") != null && parser.param_cont == parser.TABLA.Tabla_fun.get("PARAM").size()){
                            parser.param_cont = 0;
                            parser.TABLA.Tabla_fun.replace("PARAM", null);
                            Nodo mename = (Nodo) mn;
                            Nodo_irt metodo = new Nodo_irt("Method_call");
                            System.out.println("El valor de parser.mdc.parametros_nodo" + parser.mdc.parametros_nodo);
                            if (parser.mdc.parametros_nodo != null)
                                {
                                    metodo.Crear_method((mename.getIdentifier()), parser.mdc.parametros_nodo.getParame());
                                    parser.Lista_IRT.add(metodo);
                                    parser.mdc.parametros_nodo.Clear_parame();
                            }
                            else {
                                    metodo.Crear_method((mename.getIdentifier()), "()");
                                    parser.Lista_IRT.add(metodo);
                                    }
                }         
                    else {
                        System.out.println("El valor de parser.mdc.parametros_nodo" + parser.mdc.parametros_nodo);
                        
                        if (parser.param_cont != 0){
                        System.out.println("Faltan parámetros");
                        System.exit(0);}
                        else {
                            parser.param_cont = 0;
                            parser.TABLA.Tabla_fun.replace("PARAM", null);}
                            Nodo mename = (Nodo) mn;
                            Nodo_irt metodo = new Nodo_irt("Method_call");
                            metodo.Crear_method((mename.getIdentifier()), "()");
                            parser.Lista_IRT.add(metodo);
                        }
                        
                    

            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$18 ::= 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo mtodo = (Nodo) mn;
                
                int [] bandera = parser.TABLA.lookup(mtodo, parser.global_scope);
                if (bandera[0] == 1 && bandera[2] == 1) {  
                    // ver si la hash contiene con values, Metodo. 
                    if (parser.TABLA.Tabla.get("Scope: " + 1).get(bandera[1]).data.containsValue("Metodo")){
                        System.out.println("Funcion " + mtodo.getIdentifier() + " llamada");
                        parser.TABLA.BANDERAS.replace("Llamada_fun", mtodo.getIdentifier());
                        for (int x = 0; x < parser.TABLA.Tabla_m.get("DATA").size(); x++) {
                            for (String y : parser.TABLA.Tabla_m.get("DATA").get(x).data.keySet()) {
                                if (y.equals("Funcion") && parser.TABLA.Tabla_m.get("DATA").get(x).data.get(y).equals(mtodo.getIdentifier())){   
                                        if (parser.TABLA.Tabla_fun.get("PARAM") == null){
                                                parser.TABLA.BANDERAS.replace("Llamada_fun_type", parser.TABLA.Tabla_m.get("DATA").get(x).data.get("type"));
                                                System.out.println("LA DE PARAM ESTA VACIA");
                                                ValoresTabla_fun data = parser.TABLA.Tabla_m.get("DATA").get(x);
                                                ArrayList<ValoresTabla_fun> lista = new ArrayList<>();
                                                lista.add(data);
                                                parser.TABLA.Tabla_fun.replace("PARAM", lista);
                                        }
                                        else{
                                            System.out.println("Ya hay en PARAM, SOLO AGREGO");
                                            ValoresTabla_fun data = parser.TABLA.Tabla_m.get("DATA").get(x);
                                            parser.TABLA.Tabla_fun.get("PARAM").add(data);
                                        }
                                }

                            }
                        }
                         
                    }
                    else {
                        System.out.println("No existe el metodo " + mtodo.getIdentifier());
                        System.exit(0);
                        }
                }
                else {
                    System.out.println("No existe el metodo " + mtodo.getIdentifier());
                    System.exit(0);
                }
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assign_op ::= MINUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo mn_e  = new Nodo("MINUS_EQUAL");
                mn_e.setValor("MINUS_EQUAL");
                tmp.setValor("MINUS_EQUAL");
                mn_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) mn_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign_op ::= PLUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo pl_e  = new Nodo("PLUS_EQUAL");
                pl_e.setValor("PLUS_EQUAL");
                tmp.setValor("PLUS_EQUAL");
                pl_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pl_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo assing  = new Nodo("ASSIGN");
                assing.setValor("ASSIGN");
                tmp.setValor("ASSIGN");
                assing.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) assing); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_expr ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("statement_expr");
        Nodo e = (Nodo) ex;
        tmp.settype(e.gettype());
        tmp.setValor(e.getValor());        
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_else_block ::= 
            {
              Object RESULT =null;
		
            Nodo_irt end_if = new Nodo_irt("END_IF");
            end_if.Crear_END_IF(parser.TABLA.BANDERAS.get("Funcion") +  "_END_IF_" + parser.count_if);  
            parser.count_if =  parser.count_if - 1;
            parser.Lista_IRT.add(end_if);
            
            

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_else_block ::= NT$17 Else block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo_irt else_c = new Nodo_irt("ELSE");
                else_c.Crear_ELSE(parser.TABLA.BANDERAS.get("Funcion") + "_END_ELSE_" + parser.count_if);
                parser.Lista_IRT.add(else_c);
                parser.count_if =  parser.count_if - 1;

    
    
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$17 ::= 
            {
              Object RESULT =null;

        parser.global_scope = parser.global_scope + 1;
        parser.TABLA.pushScope(parser.global_scope);
        
        Nodo_irt else_c = new Nodo_irt("ELSE");
        else_c.Crear_ELSE(parser.TABLA.BANDERAS.get("Funcion") + "_ELSE_" + parser.count_if);
        parser.Lista_IRT.add(else_c);

    
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= NT$16 block statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$16 ::= 
            {
              Object RESULT =null;

                Nodo tmp = new Nodo("statement");
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= Continue Punto_coma NT$15 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$15 ::= 
            {
              Object RESULT =null;

                Nodo tmp = new Nodo("statement");
                
                if (parser.TABLA.BANDERAS.get("For").equals("Si")){
                    System.out.println("Continue correcto");
                    
                        tmp.setIdentifier(parser.for_ids.get(parser.for_ids.size() - 1));
                            Nodo_irt operacion_for = new Nodo_irt("Operacion_FOR");
                            operacion_for.Crear_operacion("Mas", tmp.getIdentifier(), "1");
                            operacion_for.op.setRegistro(tmp.getIdentifier());
                            Nodo_irt jump_for = new Nodo_irt("Jump_FOR");
                            jump_for.Crear_FOR("jump: " + parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                            parser.for_ids.remove(parser.for_ids.size() - 1);
                            Nodo_irt continue_c = new Nodo_irt("Continue_For");
                            continue_c.Crear_Continue(operacion_for, jump_for);
                            parser.Lista_IRT.add(continue_c);
                }
                else {
                    System.out.println("No puede usar Continue si no se está dentro de un For");
                    System.exit(0);
                }
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= Break Punto_coma NT$14 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$14 ::= 
            {
              Object RESULT =null;

                Nodo tmp = new Nodo("statement");
                
                if (parser.TABLA.BANDERAS.get("For").equals("Si")){
                    System.out.println("Break correcto");
                    
                    Nodo_irt break_for = new Nodo_irt("Break_FOR");
                    break_for.Crear_FOR("break: " + "end: "+ parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                    parser.Lista_IRT.add(break_for);
                }
                else {
                    System.out.println("No puede usar break si no se está dentro de un For");
                    System.exit(0);
                }
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= Return statement_expr Punto_coma NT$13 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmexleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stmexright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stmex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$13 ::= 
            {
              Object RESULT =null;
		int stmexleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stmexright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stmex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

                Nodo tmp = new Nodo("statement");
                
                Nodo stmex_x = (Nodo) stmex;
                if (parser.TABLA.BANDERAS.get("Funcion_type").equals(stmex_x.gettype())){
                    System.out.println("Return correcto");
                }
                else {
                    System.out.println("El valor de retorno no es del mismo type de la funcion: " + parser.TABLA.BANDERAS.get("Funcion_type") + " != " + stmex_x.gettype());
                    System.exit(0);
                }

                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= For Id ASSIGN expr Coma expr NT$11 block NT$12 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                        // condicion del for
                        Nodo tmp = new Nodo("statement");
                        tmp.setIdentifier("" + id);
                            Nodo_irt operacion_for = new Nodo_irt("Operacion_FOR");
                            operacion_for.Crear_operacion("Mas", tmp.getIdentifier(), "1");
                            operacion_for.op.setRegistro(tmp.getIdentifier());
                            parser.Lista_IRT.add(operacion_for);
                            Nodo_irt jump_for = new Nodo_irt("Jump_FOR");
                            jump_for.Crear_FOR("jump: " + parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                            parser.Lista_IRT.add(jump_for);
                            Nodo_irt end_for = new Nodo_irt("End_FOR");
                            end_for.Crear_FOR("end: " + parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                            parser.Lista_IRT.add(end_for);
                            parser.count_for = parser.count_for - 1;
                            parser.TABLA.BANDERAS.replace("For", "");
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("statement");
                Nodo e = (Nodo) ex;
                Nodo e2 = (Nodo) ex2;
                tmp.setIdentifier("" + id);
                int [] bandera = parser.TABLA.lookup(tmp, parser.global_scope);
                if (bandera[0] == 1) {  
                    // se crea nuevo scope
                    tmp.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                    
                    if (tmp.gettype().equals(e.gettype())){
                        parser.global_scope = parser.global_scope + 1;
                        parser.TABLA.pushScope(parser.global_scope);
                        // antes de la coma
                        Nodo_irt asi_for = new Nodo_irt("Asignacion");
                        asi_for.Crear_Asignacion("ASSIGN", e.getValor(), tmp.getIdentifier());
                        parser.Lista_IRT.add(asi_for);
                        parser.for_ids.add(tmp.getIdentifier());
                        // despues de la coma
                        if(e2.gettype().equals("Int")){
                            System.out.println("Asignacion correcta");
                            parser.TABLA.BANDERAS.replace("For", "Si");
                            // tag de for
                            Nodo_irt tag_for = new Nodo_irt("FOR");
                            parser.count_for = parser.count_for + 1;
                            tag_for.Crear_FOR(parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                            parser.Lista_IRT.add(tag_for);
                            // condicion del for
                            Nodo_irt condicion_for = new Nodo_irt("Condicion");
                            condicion_for.Crear_condicion("LESS_EQUAL", tmp.getIdentifier(), e2.getValor());
                            if (parser.STACK.size() == 0){
                                condicion_for.co.setRegistro("$t0");
                                parser.STACK.add("$t0");
                            }
                            else {
                                int ultimo = parser.STACK.size();
                                condicion_for.co.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(condicion_for);
                            
                        }
                        else
                        {
                        System.out.println("La variable del loop debe ser integer");
                        System.exit(0);
                            }
                   }
                   else {
                        System.out.println("La variable " + tmp.getIdentifier() + "no es del mismo type del valor asignado");
                        System.exit(0);
                    }
                }
                else 
                {   
                    bandera = parser.TABLA.lookup_param(tmp);
                    if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                        tmp.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                        if (tmp.gettype().equals(e.gettype())){
                            parser.global_scope = parser.global_scope + 1;
                            parser.TABLA.pushScope(parser.global_scope);
                            Nodo_irt asi_for = new Nodo_irt("Asignacion");
                            asi_for.Crear_Asignacion("ASSIGN", e.getValor(), tmp.getIdentifier());
                            parser.Lista_IRT.add(asi_for);
                            parser.for_ids.add(tmp.getIdentifier());
                            if(e2.gettype().equals("Int")){
                                System.out.println("Asignacion correcta");
                                parser.TABLA.BANDERAS.replace("For", "Si");
                                // tag de for
                            Nodo_irt tag_for = new Nodo_irt("FOR");
                            parser.count_for = parser.count_for + 1;
                            tag_for.Crear_FOR(parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                            parser.Lista_IRT.add(tag_for);
                            // condicion del for
                            Nodo_irt condicion_for = new Nodo_irt("Condicion");
                            condicion_for.Crear_condicion("LESS_EQUAL", tmp.getIdentifier(), e2.getValor());
                            if (parser.STACK.size() == 0){
                                condicion_for.co.setRegistro("$t0");
                                parser.STACK.add("$t0");
                            }
                            else {
                                int ultimo = parser.STACK.size();
                                condicion_for.co.setRegistro("$t" + ultimo);
                                parser.STACK.add("$t" + ultimo);
                            }
                            parser.Lista_IRT.add(condicion_for);
                            }
                            else
                            {
                                System.out.println("La variable del loop debe ser integer");
                                System.exit(0);
                            }
                       }
                       else {
                            System.out.println("La variable " + tmp.getIdentifier() + "no es del mismo type del valor asignado");
                            System.exit(0);
                        }
                    }else {
                            //  genera nuevo scope y entra la variable
                            parser.global_scope = parser.global_scope + 1;
                            parser.TABLA.pushScope(parser.global_scope);

                            Nodo nueva = new Nodo("id");
                            nueva.setllamada("variable");
                            nueva.setIdentifier(id + "");
                            nueva.settype("Int");
                            nueva.setValor("0");
                            nueva.setLocation(idright + 1);
                            nueva.setmemoria(4);
                            nueva.setscope(parser.global_scope);

                            parser.TABLA.insertSymbol(nueva, parser.global_scope);
                            if (nueva.gettype().equals(e.gettype())){
                                Nodo_irt asi_for = new Nodo_irt("Asignacion");
                                asi_for.Crear_Asignacion("ASSIGN", e.getValor(), nueva.getIdentifier());
                                parser.Lista_IRT.add(asi_for);
                                parser.for_ids.add(nueva.getIdentifier());
                                if(e2.gettype().equals("Int")){
                                    System.out.println("Asignacion correcta");
                                    parser.TABLA.BANDERAS.replace("For", "Si");
                                    // tag de for
                                    Nodo_irt tag_for = new Nodo_irt("FOR");
                                    parser.count_for = parser.count_for + 1;
                                    tag_for.Crear_FOR(parser.TABLA.BANDERAS.get("Funcion") + "_FOR_" + parser.count_for);
                                    parser.Lista_IRT.add(tag_for);
                                    // condicion del for
                                    Nodo_irt condicion_for = new Nodo_irt("Condicion");
                                    condicion_for.Crear_condicion("LESS_EQUAL", nueva.getIdentifier(), e2.getValor());
                                    if (parser.STACK.size() == 0){
                                        condicion_for.co.setRegistro("$t0");
                                        parser.STACK.add("$t0");
                                    }
                                    else {
                                        int ultimo = parser.STACK.size();
                                        condicion_for.co.setRegistro("$t" + ultimo);
                                        parser.STACK.add("$t" + ultimo);
                                    }
                                    parser.Lista_IRT.add(condicion_for);
                                }
                                else
                                {
                                System.out.println("La variable del loop debe ser integer");
                                System.exit(0);
                                    }
                           }
                           else {
                                System.out.println("La variable " + nueva.getIdentifier() + "no es del mismo type del valor asignado");
                                System.exit(0);
                            }
                    }
                }
                
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= If LEFT_PAR expr RIGHT_PAR NT$10 block statement_else_block statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sebleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sebright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
            Nodo tmp = new Nodo("statement");
                Nodo expr_r = (Nodo) ex;
                if (expr_r.gettype().equals("Int")){
                    System.out.println("El resultado de expr no es boolean");
                    System.exit(0);
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);

                Nodo_irt if_condicion = new Nodo_irt("IF");
                parser.count_if =  parser.count_if + 1;
                if_condicion.Crear_IF(parser.TABLA.BANDERAS.get("Funcion") + "_IF_" + parser.count_if);
                if_condicion.if_nodo.getCondicion(expr_r.getValor());
                parser.Lista_IRT.add(if_condicion);
                

                
                RESULT = tmp;
                
                
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= method_call Punto_coma NT$9 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

                Nodo tmp = new Nodo("statement");
                System.out.println("SE LLAMO A UN Metodo");
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= location assign_op expr Punto_coma NT$8 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

                Nodo tmp = new Nodo("statement");
                
                Nodo loc = (Nodo) l;
                Nodo e = (Nodo) ex;
                Nodo asig = (Nodo) asop;
                if (asig.getValor().equals("ASSIGN"))
                {
                    // buscar el id en la tabla
                    //System.out.println("El type de loc es: " + loc.gettype());
                    System.out.println("EL VALOR DE e ES: " + e.getValor());
                    int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
                    if (bandera[0] == 1) {
                        loc.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                        if (loc.gettype().equals(e.gettype())){
                            System.out.println("Asignacion correcta");
                            Nodo_irt asignacion = new Nodo_irt("Asignacion");
                           asignacion.Crear_Asignacion(asig.getValor(), e.getValor(), loc.getIdentifier());
                           parser.Lista_IRT.add(asignacion);
                       }
                       else {
                            System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                            System.exit(0);
                        }
                    }
                    else {
                        bandera = parser.TABLA.lookup_param(loc);
                        if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                            loc.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                            if (loc.gettype().equals(e.gettype())){
                                System.out.println("Asignacion correcta");
                                Nodo_irt asignacion = new Nodo_irt("Asignacion");
                           asignacion.Crear_Asignacion(asig.getValor(), e.getValor(), loc.getIdentifier());
                           parser.Lista_IRT.add(asignacion);
                           }
                           else {
                                System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                System.exit(0);
                            }
                        }else {
                        System.out.println("La variable " + loc.getIdentifier() + ",no existe");
                        System.exit(0);
                        }
                    }
                }
                else if (asig.getValor().equals("PLUS_EQUAL")) 
                {
                    int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
                    if (bandera[0] == 1) {
                        loc.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                        if (loc.gettype().equals("Int")){
                            if (loc.gettype().equals(e.gettype())){
                                System.out.println("Asignacion correcta");
                                Nodo_irt asignacion = new Nodo_irt("Asignacion");
                           asignacion.Crear_Asignacion(asig.getValor(), e.getValor(), loc.getIdentifier());
                           parser.Lista_IRT.add(asignacion);
                           }
                           else {
                                System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                System.exit(0);
                            }
                        }
                        else {
                            System.out.println("No se puede realizar la operacion += con booleanos");
                            System.exit(0);
                        }

                    }
                    else {
                            bandera = parser.TABLA.lookup_param(loc);
                            if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                                loc.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                                if (loc.gettype().equals(e.gettype())){
                                    System.out.println("Asignacion correcta");
                                    Nodo_irt asignacion = new Nodo_irt("Asignacion");
                           asignacion.Crear_Asignacion(asig.getValor(), e.getValor(), loc.getIdentifier());
                           parser.Lista_IRT.add(asignacion);
                               }
                               else {
                                    System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                    System.exit(0);
                                }
                            }else {
                            System.out.println("La variable " + loc.getIdentifier() + ",no existe");
                            System.exit(0);
                        }
                    }
                }
                else {
                    int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
                    if (bandera[0] == 1) {
                        loc.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                        if (loc.gettype().equals("Int")){
                            if (loc.gettype().equals(e.gettype())){
                                System.out.println("Asignacion correcta");
                                Nodo_irt asignacion = new Nodo_irt("Asignacion");
                           asignacion.Crear_Asignacion(asig.getValor(), e.getValor(), loc.getIdentifier());
                           parser.Lista_IRT.add(asignacion);
                           }
                           else {
                                System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                System.exit(0);
                            }
                        }
                        else {
                            System.out.println("No se puede realizar la operacion -= con booleanos");
                            System.exit(0);
                        }

                    }
                    else {
                        bandera = parser.TABLA.lookup_param(loc);
                            if (bandera[0] == 1 && parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("Funcion").equals(parser.TABLA.BANDERAS.get("Funcion"))) {
                                loc.settype(parser.TABLA.Tabla_m.get("DATA").get(bandera[1]).data.get("type"));
                                if (loc.gettype().equals(e.gettype())){
                                    System.out.println("Asignacion correcta");
                                    Nodo_irt asignacion = new Nodo_irt("Asignacion");
                           asignacion.Crear_Asignacion(asig.getValor(), e.getValor(), loc.getIdentifier());
                           parser.Lista_IRT.add(asignacion);
                               }
                               else {
                                    System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                    System.exit(0);
                                }
                            }else {
                            System.out.println("La variable " + loc.getIdentifier() + ",no existe");
                            System.exit(0);
                    }
                    }
                }
                
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= Boolean 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        tmp.setValor("Boolean");
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= Int 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        tmp.setValor("Int");
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_decl_coma_id ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_decl_coma_id ::= Coma Id var_decl_coma_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("var_decl_coma_id");
                tmp.setllamada("variable");
                tmp.settype(parser.TABLA.BANDERAS.get("Type"));
                if (tmp.gettype().equals("Boolean")){ tmp.setValor("True");} else {tmp.setValor("0");}
                if (tmp.gettype().equals("Boolean")){ tmp.setmemoria(1);} else {tmp.setmemoria(4);}
                
                tmp.setIdentifier(id + "");
                tmp.setLocation(idright + 1);
                tmp.setscope(parser.global_scope);
                tmp.setValor("0");
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE LAS COMAS var_decl: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                     Nodo_irt crear_variable = new Nodo_irt("Crear_Variable");
                    crear_variable.Crear_variable(tmp.getIdentifier(), "" + tmp.getmemoria());
                    parser.Lista_IRT.add(crear_variable);
                }
                else {
                    System.out.println("La variable " + tmp.getIdentifier() + ", esta repetida");
                    System.exit(0);
                }
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_decl ::= type Id NT$7 var_decl_coma_id Punto_coma var_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$7 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            Nodo tmp = new Nodo("var decl");                
            Nodo ty = (Nodo) t;
            tmp.setllamada("variable");
            parser.TABLA.BANDERAS.replace("Type", ty.getValor());
            tmp.settype(ty.getValor());
            tmp.setIdentifier(id + "");
            tmp.setscope(parser.global_scope);
            tmp.setValor("0");
            if (tmp.gettype().equals("Boolean")){ tmp.setValor("True");} else {tmp.setValor("0");}
            if (tmp.gettype().equals("Boolean")){ tmp.setmemoria(1);} else {tmp.setmemoria(4);}
            tmp.setLocation(idright + 1);
            int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
            System.out.println("La bandera trae: " + bandera);
            if (bandera == 2){
                System.out.println("La variable " + tmp.getIdentifier() + ", se guardará");
                parser.TABLA.insertSymbol(tmp, parser.global_scope);
                Nodo_irt crear_variable = new Nodo_irt("Crear_Variable");
                    crear_variable.Crear_variable(tmp.getIdentifier(), "" + tmp.getmemoria());
                    parser.Lista_IRT.add(crear_variable);
            }
            else {
                System.out.println("La variable " + tmp.getIdentifier() + ",está repetida");
                System.exit(0);
            }
            RESULT = tmp;
    
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= Llave_A var_decl statement Llave_C 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("block");
        



        // ultimo
        
        parser.TABLA.popScope(parser.global_scope);
        parser.global_scope = parser.global_scope - 1;
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_decl_corche_coma_type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_decl_corche_coma_type ::= Coma type Id NT$6 method_decl_corche_coma_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_decl_corche_coma_type");

        tmp.setllamada("variable");
        Nodo ty = (Nodo) t;
        tmp.settype(ty.getValor());
        tmp.setIdentifier(id + "");
        if (tmp.gettype().equals("Int")) 
        { 
            tmp.setValor("0"); 
        } 
        else 
        { 
            tmp.setValor("True"); 
        }
        tmp.setLocation(idright + 1);
        if (tmp.gettype().equals("Int")){ tmp.setmemoria(4); } else { tmp.setmemoria(1); }
        
        tmp.setscope(parser.global_scope);
        tmp.setfuncion(parser.TABLA.BANDERAS.get("Funcion"));
        

        System.out.println("DESDE variables del metodo el resto: La variable" + tmp.getIdentifier() + ", se guardará");
        parser.TABLA.insertSymbol_m(tmp);
        RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        parser.mdc.parametros_nodo.addParame("" + id);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_decl_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl_corche ::= type Id NT$5 method_decl_corche_coma_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Nodo tmp = new Nodo("method_decl_corche");

        tmp.setllamada("variable");
        Nodo ty = (Nodo) t;
        tmp.settype(ty.getValor());
        tmp.setIdentifier(id + "");
        if (tmp.gettype().equals("Int")){ tmp.setValor("0"); } else { tmp.setValor("True"); }
        tmp.setLocation(idright + 1);
        if (tmp.gettype().equals("Int")){ tmp.setmemoria(4);} else { tmp.setmemoria(1); }
        
        System.out.print("El global_scope es: " + parser.global_scope);
        System.out.print("El Funcion guardado es: " + parser.TABLA.BANDERAS.get("Funcion"));
        tmp.setscope(parser.global_scope);
        tmp.setfuncion(parser.TABLA.BANDERAS.get("Funcion"));
        

        System.out.println("DESDE variables del metodo: La variable " + tmp.getIdentifier() + ", se guardará");
        parser.TABLA.insertSymbol_m(tmp);
        

        parser.mdc.Crear_parametros();
        parser.mdc.parametros_nodo.addParame("" + id);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl ::= Void Id NT$3 LEFT_PAR method_decl_corche RIGHT_PAR NT$4 block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
                        Nodo_irt metodo = new Nodo_irt("Metodo");
                        if (parser.mdc.parametros_nodo != null)
                            {
                                metodo.Crear_metodo(("" + id), parser.mdc.parametros_nodo.getParame());
                                parser.Lista_IRT.add(metodo);
                                parser.mdc.parametros_nodo.Clear_parame();
                        }
                        else {
                                metodo.Crear_metodo(("" + id), "()");
                                parser.Lista_IRT.add(metodo);
                                }
                        
                        
                        
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;


                Nodo tmp = new Nodo("method_decl");
                tmp.setllamada("Metodo");
                tmp.settype("Void");
                tmp.setIdentifier(id + "");
                tmp.setValor(""); 
                tmp.setLocation(idright + 1);
                tmp.setmemoria(0);
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE METHOD VOID: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                    parser.TABLA.BANDERAS.replace("Funcion", tmp.getIdentifier());
                    parser.TABLA.BANDERAS.replace("Funcion_type", tmp.gettype());
                }
                else {
                    System.out.println("El nombre del método esta repetido:  " + tmp.getIdentifier());
                    System.exit(0);
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl ::= type Id NT$1 LEFT_PAR method_decl_corche RIGHT_PAR NT$2 block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
                        Nodo_irt metodo = new Nodo_irt("Metodo");
                        if (parser.mdc.parametros_nodo != null)
                            {
                                metodo.Crear_metodo(("" + id), parser.mdc.parametros_nodo.getParame());
                                parser.Lista_IRT.add(metodo);
                                parser.mdc.parametros_nodo.Clear_parame();
                        }
                        else {
                                metodo.Crear_metodo(("" + id), "()");
                                parser.Lista_IRT.add(metodo);
                                }
                        
                        
                        
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                if (parser.global_scope != 0){
                    System.out.println("MAS DE 1 SCOPE");
                }
                else {
                    System.out.println("HACER EL 1 SCOPE");
                    System.out.println("desde method decl ");
                    parser.global_scope = parser.global_scope + 1;
                    parser.TABLA.pushScope(parser.global_scope);
                }
                Nodo tmp = new Nodo("method_decl");
                tmp.setllamada("Metodo");
                Nodo ty = (Nodo) t;
                System.out.println("El valor es: " + ty.getValor());
                tmp.settype(ty.getValor());
                tmp.setIdentifier(id + "");
                if (tmp.gettype().equals("Int")){ tmp.setValor("0"); } else { tmp.setValor("True"); }
                tmp.setLocation(idright + 1);
                if (tmp.gettype().equals("Int")){ tmp.setmemoria(4);} else { tmp.setmemoria(1); }
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE METHOD: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                    parser.TABLA.BANDERAS.replace("Funcion", tmp.getIdentifier());
                    parser.TABLA.BANDERAS.replace("Funcion_type", tmp.gettype());
                }
                else {
                    System.out.println("El nombre del metodo esta repetido " + tmp.getIdentifier());
                    System.exit(0);
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;



                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_decl_coma_field ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl_coma_field ::= Coma field_name field_decl_coma_field 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("field_decl_coma_field");
                
                Nodo field = (Nodo) fn;
                field.settype(parser.TABLA.BANDERAS.get("Type"));
                if (field.gettype().equals("Boolean")){ field.setValor("True");}
                if (field.gettype().equals("Int")){ field.setmemoria(field.getmemoria() * 4);} else { field.setmemoria(field.getmemoria() * 1); }
                field.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(field, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE LAS COMAS: La variable " + field.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(field, parser.global_scope);
                    Nodo_irt crear_variable = new Nodo_irt("Crear_Variable");
                    crear_variable.Crear_variable(field.getIdentifier(), "" + field.getmemoria());
                    parser.Lista_IRT.add(crear_variable);
                }
                else {
                    System.out.println("La variable " + field.getIdentifier() + ", esta repetida");
                    System.exit(0);
                }
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl ::= field_decl type field_name NT$0 field_decl_coma_field Punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("field decl");
                Nodo field = (Nodo) fn;
                if (parser.global_scope != 0){
                    System.out.println("MAS DE 1 SCOPE");
                }
                else {
                    System.out.println("HACER EL 1 SCOPE");
                    System.out.println("La cree con: " + field.getIdentifier());
                    parser.global_scope = parser.global_scope + 1;
                    parser.TABLA.pushScope(parser.global_scope);
                    
                
                }
                
                
                Nodo ty = (Nodo) t;
                parser.TABLA.BANDERAS.replace("Type", ty.getValor());
                field.settype(ty.getValor());
                field.setscope(parser.global_scope);
                if (field.gettype().equals("Boolean")){ field.setValor("True");}
                if (field.gettype().equals("Int")){ field.setmemoria(field.getmemoria() * 4);} else { field.setmemoria(field.getmemoria() * 1); }
                int bandera = parser.TABLA.lookup_f(field, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("La variable " + field.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(field, parser.global_scope);
                    Nodo_irt crear_variable = new Nodo_irt("Crear_Variable");
                    crear_variable.Crear_variable(field.getIdentifier(), "" + field.getmemoria());
                    parser.Lista_IRT.add(crear_variable);
                }
                else {
                    System.out.println("La variable " + field.getIdentifier() + " ya existe");
                    System.exit(0);
                }
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_name ::= Id Corche_A int_literal Corche_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Nodo tmp = new Nodo("field_name_vector");
            
            tmp.setllamada("vector");
            tmp.setIdentifier(id + "");
            tmp.setValor("0");
            tmp.setLocation(idright + 1);
            Nodo inl = (Nodo) il;
            try {
                tmp.setmemoria(Integer.valueOf(inl.getValor()));
                }
            catch(Exception es){
                System.out.println(es);
                }
            
            RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_name ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            
            Nodo tmp = new Nodo("field_name_id");
            tmp.setllamada("variable");
            tmp.setIdentifier(id + "");
            tmp.setValor("0");
            tmp.setLocation(idright + 1);
            tmp.setmemoria(1);
            RESULT = tmp;
            
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Class Program Llave_A field_decl method_decl Llave_C 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		

            Nodo tmp = new Nodo("program");
            Nodo class_ = new Nodo("class");
            class_.setValor("class");
            class_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) class_);
            
            Nodo pr = new Nodo("Program");
            pr.setValor("Program");
            pr.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) pr);

            Nodo llavea = new Nodo("Llave_A");
            llavea.setValor("Llave_A");
            llavea.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavea);

            tmp.addHijo((Nodo) fd);
            tmp.addHijo((Nodo) md);

            Nodo llavec = new Nodo("Llave_C");
            llavec.setValor("Llave_C");
            llavec.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavec);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= program 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) s);
            parser.padre = (Nodo) tmp;
            System.out.println("Correcto");
            RESULT=tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

