
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 25 17:52:03 CST 2022
//----------------------------------------------------

package compiler.irt;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 25 17:52:03 CST 2022
  */
public class IRT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IRT() {super();}

  /** Constructor which sets the default scanner. */
  public IRT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public IRT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\031\003\000\002\031\006\000\002\004\007" +
    "\000\002\004\002\000\002\037\005\000\002\037\002\000" +
    "\002\044\002\000\002\005\012\000\002\005\011\000\002" +
    "\005\002\000\002\045\002\000\002\032\006\000\002\032" +
    "\002\000\002\046\002\000\002\033\007\000\002\033\002" +
    "\000\002\006\006\000\002\007\007\000\002\007\002\000" +
    "\002\034\005\000\002\034\002\000\002\010\003\000\002" +
    "\010\003\000\002\011\007\000\002\011\005\000\002\011" +
    "\011\000\002\011\012\000\002\011\006\000\002\011\005" +
    "\000\002\011\005\000\002\011\004\000\002\011\002\000" +
    "\002\035\004\000\002\035\002\000\002\036\003\000\002" +
    "\036\002\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\006\000\002\013\007\000\002\040\004" +
    "\000\002\040\002\000\002\041\005\000\002\041\002\000" +
    "\002\042\005\000\002\042\002\000\002\043\005\000\002" +
    "\043\002\000\002\014\003\000\002\015\003\000\002\015" +
    "\006\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\005\000\002\016\004\000\002\016\004\000" +
    "\002\016\005\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\020\005\001\002\000\004\002\000\001" +
    "\002\000\004\021\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\053\011\001\002\000" +
    "\012\004\ufffb\005\ufffb\017\ufffb\054\ufffb\001\002\000\012" +
    "\004\016\005\017\017\013\054\ufff5\001\002\000\004\022" +
    "\241\001\002\000\004\054\240\001\002\000\004\022\020" +
    "\001\002\000\004\022\uffe9\001\002\000\004\022\uffe8\001" +
    "\002\000\012\043\036\045\ufffe\055\030\057\ufffe\001\002" +
    "\000\006\045\ufff9\057\022\001\002\000\004\022\025\001" +
    "\002\000\004\045\024\001\002\000\012\004\ufffc\005\ufffc" +
    "\017\ufffc\054\ufffc\001\002\000\010\045\ufffe\055\030\057" +
    "\ufffe\001\002\000\006\045\ufff9\057\022\001\002\000\004" +
    "\045\ufffa\001\002\000\010\023\031\026\032\027\034\001" +
    "\002\000\046\030\uffab\031\uffab\032\uffab\033\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\056\uffab\057\uffab" +
    "\001\002\000\046\030\uffad\031\uffad\032\uffad\033\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\056\uffad\057" +
    "\uffad\001\002\000\004\056\035\001\002\000\046\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\056\uffac\057\uffac\001\002\000\006\045" +
    "\ufffd\057\ufffd\001\002\000\010\004\016\005\017\044\ufff2" +
    "\001\002\000\004\022\230\001\002\000\004\044\041\001" +
    "\002\000\004\053\ufff8\001\002\000\004\053\043\001\002" +
    "\000\030\004\016\005\017\006\uffec\007\uffec\010\uffec\012" +
    "\uffec\013\uffec\014\uffec\022\uffec\053\uffec\054\uffec\001\002" +
    "\000\012\004\016\005\017\017\013\054\ufff5\001\002\000" +
    "\004\054\ufff7\001\002\000\004\022\047\001\002\000\004" +
    "\043\036\001\002\000\004\022\221\001\002\000\024\006" +
    "\052\007\056\010\063\012\055\013\054\014\060\022\061" +
    "\053\043\054\uffdf\001\002\000\004\043\205\001\002\000" +
    "\004\045\203\001\002\000\004\045\201\001\002\000\032" +
    "\006\052\015\075\016\076\022\061\023\031\026\032\027" +
    "\034\043\100\045\uffdb\047\104\060\077\062\101\001\002" +
    "\000\004\043\165\001\002\000\004\043\155\001\002\000" +
    "\004\045\153\001\002\000\060\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcd\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055\150\056\uffcc\057" +
    "\uffcc\001\002\000\024\006\052\007\056\010\063\012\055" +
    "\013\054\014\060\022\061\053\043\054\uffdf\001\002\000" +
    "\004\022\140\001\002\000\004\054\137\001\002\000\010" +
    "\034\067\035\071\036\066\001\002\000\030\006\uffd8\015" +
    "\uffd8\016\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\043\uffd8" +
    "\047\uffd8\060\uffd8\062\uffd8\001\002\000\030\006\uffd9\015" +
    "\uffd9\016\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\043\uffd9" +
    "\047\uffd9\060\uffd9\062\uffd9\001\002\000\030\006\052\015" +
    "\075\016\076\022\061\023\031\026\032\027\034\043\100" +
    "\047\104\060\077\062\101\001\002\000\030\006\uffda\015" +
    "\uffda\016\uffda\022\uffda\023\uffda\026\uffda\027\uffda\043\uffda" +
    "\047\uffda\060\uffda\062\uffda\001\002\000\046\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\056\uffc9\057\uffc9\001\002\000\046\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\056\uffca\057\uffca\001\002\000\036\030" +
    "\121\031\130\032\113\033\117\037\115\040\120\041\107" +
    "\042\112\045\135\046\114\047\126\050\127\051\125\052" +
    "\116\001\002\000\046\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\056\uffaa" +
    "\057\uffaa\001\002\000\046\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\056" +
    "\uffa9\057\uffa9\001\002\000\030\006\052\015\075\016\076" +
    "\022\061\023\031\026\032\027\034\043\100\047\104\060" +
    "\077\062\101\001\002\000\030\006\052\015\075\016\076" +
    "\022\061\023\031\026\032\027\034\043\100\047\104\060" +
    "\077\062\101\001\002\000\046\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\056\uffaf\057\uffaf\001\002\000\046\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\037\uffae\040\uffae\041\uffae\042\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\056\uffae\057\uffae\001\002\000\046\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\056\uffb0\057\uffb0\001\002\000\030\006\052\015" +
    "\075\016\076\022\061\023\031\026\032\027\034\043\100" +
    "\047\104\060\077\062\101\001\002\000\046\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\056\uffc8\057\uffc8\001\002\000\046\030\121" +
    "\031\130\032\113\033\117\037\115\040\120\041\107\042" +
    "\112\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\056\uffc6\057\uffc6\001\002\000\030\006" +
    "\uffb2\015\uffb2\016\uffb2\022\uffb2\023\uffb2\026\uffb2\027\uffb2" +
    "\043\uffb2\047\uffb2\060\uffb2\062\uffb2\001\002\000\030\006" +
    "\052\015\075\016\076\022\061\023\031\026\032\027\034" +
    "\043\100\047\104\060\077\062\101\001\002\000\030\006" +
    "\uffbf\015\uffbf\016\uffbf\022\uffbf\023\uffbf\026\uffbf\027\uffbf" +
    "\043\uffbf\047\uffbf\060\uffbf\062\uffbf\001\002\000\030\006" +
    "\uffb1\015\uffb1\016\uffb1\022\uffb1\023\uffb1\026\uffb1\027\uffb1" +
    "\043\uffb1\047\uffb1\060\uffb1\062\uffb1\001\002\000\030\006" +
    "\uffb6\015\uffb6\016\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6" +
    "\043\uffb6\047\uffb6\060\uffb6\062\uffb6\001\002\000\030\006" +
    "\uffbd\015\uffbd\016\uffbd\022\uffbd\023\uffbd\026\uffbd\027\uffbd" +
    "\043\uffbd\047\uffbd\060\uffbd\062\uffbd\001\002\000\030\006" +
    "\uffb4\015\uffb4\016\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4" +
    "\043\uffb4\047\uffb4\060\uffb4\062\uffb4\001\002\000\030\006" +
    "\uffb9\015\uffb9\016\uffb9\022\uffb9\023\uffb9\026\uffb9\027\uffb9" +
    "\043\uffb9\047\uffb9\060\uffb9\062\uffb9\001\002\000\030\006" +
    "\uffb5\015\uffb5\016\uffb5\022\uffb5\023\uffb5\026\uffb5\027\uffb5" +
    "\043\uffb5\047\uffb5\060\uffb5\062\uffb5\001\002\000\030\006" +
    "\uffb3\015\uffb3\016\uffb3\022\uffb3\023\uffb3\026\uffb3\027\uffb3" +
    "\043\uffb3\047\uffb3\060\uffb3\062\uffb3\001\002\000\030\006" +
    "\uffb8\015\uffb8\016\uffb8\022\uffb8\023\uffb8\026\uffb8\027\uffb8" +
    "\043\uffb8\047\uffb8\060\uffb8\062\uffb8\001\002\000\030\006" +
    "\uffc0\015\uffc0\016\uffc0\022\uffc0\023\uffc0\026\uffc0\027\uffc0" +
    "\043\uffc0\047\uffc0\060\uffc0\062\uffc0\001\002\000\030\006" +
    "\uffc1\015\uffc1\016\uffc1\022\uffc1\023\uffc1\026\uffc1\027\uffc1" +
    "\043\uffc1\047\uffc1\060\uffc1\062\uffc1\001\002\000\030\006" +
    "\uffbe\015\uffbe\016\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe" +
    "\043\uffbe\047\uffbe\060\uffbe\062\uffbe\001\002\000\030\006" +
    "\uffba\015\uffba\016\uffba\022\uffba\023\uffba\026\uffba\027\uffba" +
    "\043\uffba\047\uffba\060\uffba\062\uffba\001\002\000\030\006" +
    "\uffbc\015\uffbc\016\uffbc\022\uffbc\023\uffbc\026\uffbc\027\uffbc" +
    "\043\uffbc\047\uffbc\060\uffbc\062\uffbc\001\002\000\030\006" +
    "\uffbb\015\uffbb\016\uffbb\022\uffbb\023\uffbb\026\uffbb\027\uffbb" +
    "\043\uffbb\047\uffbb\060\uffbb\062\uffbb\001\002\000\030\006" +
    "\uffb7\015\uffb7\016\uffb7\022\uffb7\023\uffb7\026\uffb7\027\uffb7" +
    "\043\uffb7\047\uffb7\060\uffb7\062\uffb7\001\002\000\046\030" +
    "\121\031\130\032\113\033\117\037\115\040\120\041\107" +
    "\042\112\044\uffc7\045\uffc7\046\114\047\126\050\127\051" +
    "\125\052\116\053\uffc7\056\uffc7\057\uffc7\001\002\000\036" +
    "\030\121\031\130\032\113\033\117\037\115\040\120\041" +
    "\107\042\112\044\133\046\114\047\126\050\127\051\125" +
    "\052\116\001\002\000\046\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\056" +
    "\uffc4\057\uffc4\001\002\000\046\030\121\031\130\032\113" +
    "\033\117\037\115\040\120\041\107\042\112\044\uffc5\045" +
    "\uffc5\046\114\047\126\050\127\051\125\052\116\053\uffc5" +
    "\056\uffc5\057\uffc5\001\002\000\024\006\052\007\056\010" +
    "\063\012\055\013\054\014\060\022\061\053\043\054\uffdf" +
    "\001\002\000\004\054\uffe7\001\002\000\034\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\017\uffee\022\uffee\053\uffee\054\uffee\001\002\000" +
    "\004\035\141\001\002\000\030\006\052\015\075\016\076" +
    "\022\061\023\031\026\032\027\034\043\100\047\104\060" +
    "\077\062\101\001\002\000\036\030\121\031\130\032\113" +
    "\033\117\037\115\040\120\041\107\042\112\046\114\047" +
    "\126\050\127\051\125\052\116\057\143\001\002\000\030" +
    "\006\052\015\075\016\076\022\061\023\031\026\032\027" +
    "\034\043\100\047\104\060\077\062\101\001\002\000\036" +
    "\030\121\031\130\032\113\033\117\037\115\040\120\041" +
    "\107\042\112\046\114\047\126\050\127\051\125\052\116" +
    "\053\043\001\002\000\024\006\052\007\056\010\063\012" +
    "\055\013\054\014\060\022\061\053\043\054\uffdf\001\002" +
    "\000\004\054\uffe4\001\002\000\004\054\uffe0\001\002\000" +
    "\030\006\052\015\075\016\076\022\061\023\031\026\032" +
    "\027\034\043\100\047\104\060\077\062\101\001\002\000" +
    "\036\030\121\031\130\032\113\033\117\037\115\040\120" +
    "\041\107\042\112\046\114\047\126\050\127\051\125\052" +
    "\116\056\152\001\002\000\054\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\056\uffcb\057\uffcb\001\002\000" +
    "\024\006\052\007\056\010\063\012\055\013\054\014\060" +
    "\022\061\053\043\054\uffdf\001\002\000\004\054\uffe1\001" +
    "\002\000\032\006\052\015\075\016\076\022\061\023\031" +
    "\026\032\027\034\043\100\044\uffd4\047\104\060\077\062" +
    "\101\001\002\000\040\030\121\031\130\032\113\033\117" +
    "\037\115\040\120\041\107\042\112\044\uffd2\046\114\047" +
    "\126\050\127\051\125\052\116\057\161\001\002\000\004" +
    "\044\160\001\002\000\046\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\056" +
    "\uffd7\057\uffd7\001\002\000\030\006\052\015\075\016\076" +
    "\022\061\023\031\026\032\027\034\043\100\047\104\060" +
    "\077\062\101\001\002\000\004\044\uffd5\001\002\000\040" +
    "\030\121\031\130\032\113\033\117\037\115\040\120\041" +
    "\107\042\112\044\uffd2\046\114\047\126\050\127\051\125" +
    "\052\116\057\161\001\002\000\004\044\uffd3\001\002\000" +
    "\030\006\052\015\075\016\076\022\061\023\031\026\032" +
    "\027\034\043\100\047\104\060\077\062\101\001\002\000" +
    "\036\030\121\031\130\032\113\033\117\037\115\040\120" +
    "\041\107\042\112\044\167\046\114\047\126\050\127\051" +
    "\125\052\116\001\002\000\004\053\043\001\002\000\026" +
    "\006\uffdd\007\uffdd\010\uffdd\011\172\012\uffdd\013\uffdd\014" +
    "\uffdd\022\uffdd\053\uffdd\054\uffdd\001\002\000\024\006\052" +
    "\007\056\010\063\012\055\013\054\014\060\022\061\053" +
    "\043\054\uffdf\001\002\000\004\053\043\001\002\000\024" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\022" +
    "\uffde\053\uffde\054\uffde\001\002\000\004\054\uffe5\001\002" +
    "\000\036\030\121\031\130\032\113\033\117\037\115\040" +
    "\120\041\107\042\112\045\uffdc\046\114\047\126\050\127" +
    "\051\125\052\116\001\002\000\004\045\177\001\002\000" +
    "\024\006\052\007\056\010\063\012\055\013\054\014\060" +
    "\022\061\053\043\054\uffdf\001\002\000\004\054\uffe3\001" +
    "\002\000\024\006\052\007\056\010\063\012\055\013\054" +
    "\014\060\022\061\053\043\054\uffdf\001\002\000\004\054" +
    "\uffe2\001\002\000\024\006\052\007\056\010\063\012\055" +
    "\013\054\014\060\022\061\053\043\054\uffdf\001\002\000" +
    "\004\054\uffe6\001\002\000\004\063\206\001\002\000\006" +
    "\044\uffd0\057\207\001\002\000\032\006\052\015\075\016" +
    "\076\022\061\023\031\026\032\027\034\043\100\047\104" +
    "\060\077\062\101\063\213\001\002\000\004\044\211\001" +
    "\002\000\046\030\uffd6\031\uffd6\032\uffd6\033\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\056\uffd6\057\uffd6" +
    "\001\002\000\040\030\121\031\130\032\113\033\117\037" +
    "\115\040\120\041\107\042\112\044\uffc3\046\114\047\126" +
    "\050\127\051\125\052\116\057\uffc3\001\002\000\006\044" +
    "\uffc2\057\uffc2\001\002\000\006\044\uffce\057\215\001\002" +
    "\000\032\006\052\015\075\016\076\022\061\023\031\026" +
    "\032\027\034\043\100\047\104\060\077\062\101\063\213" +
    "\001\002\000\004\044\uffd1\001\002\000\006\044\uffce\057" +
    "\215\001\002\000\004\044\uffcf\001\002\000\006\045\uffea" +
    "\057\223\001\002\000\004\045\226\001\002\000\004\022" +
    "\224\001\002\000\006\045\uffea\057\223\001\002\000\004" +
    "\045\uffeb\001\002\000\030\004\016\005\017\006\uffec\007" +
    "\uffec\010\uffec\012\uffec\013\uffec\014\uffec\022\uffec\053\uffec" +
    "\054\uffec\001\002\000\024\006\uffed\007\uffed\010\uffed\012" +
    "\uffed\013\uffed\014\uffed\022\uffed\053\uffed\054\uffed\001\002" +
    "\000\006\044\ufff4\057\ufff4\001\002\000\006\044\uffef\057" +
    "\232\001\002\000\006\004\016\005\017\001\002\000\004" +
    "\044\ufff3\001\002\000\004\022\235\001\002\000\006\044" +
    "\ufff1\057\ufff1\001\002\000\006\044\uffef\057\232\001\002" +
    "\000\004\044\ufff0\001\002\000\004\002\uffff\001\002\000" +
    "\004\043\242\001\002\000\010\004\016\005\017\044\ufff2" +
    "\001\002\000\004\044\244\001\002\000\004\053\043\001" +
    "\002\000\012\004\016\005\017\017\013\054\ufff5\001\002" +
    "\000\004\054\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\006\005" +
    "\013\010\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\022\001\001\000\004" +
    "\031\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\026\001\001\000\002\001\001" +
    "\000\004\026\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\036\032\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\041\001\001\000\004\006\043" +
    "\001\001\000\006\007\050\010\047\001\001\000\006\005" +
    "\044\010\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\061\011" +
    "\063\013\052\014\056\015\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\071\014" +
    "\056\015\072\016\174\025\104\026\102\027\101\036\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\061\011\146\013\052" +
    "\014\056\015\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\071\014\056\015\072\016\073\025" +
    "\104\026\102\027\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\107\021\122\022" +
    "\121\023\110\024\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\071\014\056\015\072\016\133\025" +
    "\104\026\102\027\101\001\001\000\020\013\071\014\056" +
    "\015\072\016\131\025\104\026\102\027\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\071\014\056\015\072\016\105\025\104\026\102\027" +
    "\101\001\001\000\002\001\001\000\014\020\107\021\122" +
    "\022\121\023\110\024\123\001\001\000\002\001\001\000" +
    "\020\013\071\014\056\015\072\016\130\025\104\026\102" +
    "\027\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\107\021\122\022\121\023\110" +
    "\024\123\001\001\000\014\020\107\021\122\022\121\023" +
    "\110\024\123\001\001\000\002\001\001\000\014\020\107" +
    "\021\122\022\121\023\110\024\123\001\001\000\014\006" +
    "\061\011\135\013\052\014\056\015\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\071\014\056\015\072\016\141\025\104\026\102\027\101" +
    "\001\001\000\014\020\107\021\122\022\121\023\110\024" +
    "\123\001\001\000\020\013\071\014\056\015\072\016\143" +
    "\025\104\026\102\027\101\001\001\000\016\006\144\020" +
    "\107\021\122\022\121\023\110\024\123\001\001\000\014" +
    "\006\061\011\145\013\052\014\056\015\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\071\014\056" +
    "\015\072\016\150\025\104\026\102\027\101\001\001\000" +
    "\014\020\107\021\122\022\121\023\110\024\123\001\001" +
    "\000\002\001\001\000\014\006\061\011\153\013\052\014" +
    "\056\015\064\001\001\000\002\001\001\000\022\013\071" +
    "\014\056\015\072\016\155\025\104\026\102\027\101\040" +
    "\156\001\001\000\016\020\107\021\122\022\121\023\110" +
    "\024\123\041\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\071\014\056\015\072\016\162\025\104" +
    "\026\102\027\101\001\001\000\002\001\001\000\016\020" +
    "\107\021\122\022\121\023\110\024\123\041\163\001\001" +
    "\000\002\001\001\000\020\013\071\014\056\015\072\016" +
    "\165\025\104\026\102\027\101\001\001\000\014\020\107" +
    "\021\122\022\121\023\110\024\123\001\001\000\004\006" +
    "\167\001\001\000\004\035\170\001\001\000\014\006\061" +
    "\011\173\013\052\014\056\015\064\001\001\000\004\006" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\107\021\122\022\121\023\110\024\123\001\001\000" +
    "\002\001\001\000\014\006\061\011\177\013\052\014\056" +
    "\015\064\001\001\000\002\001\001\000\014\006\061\011" +
    "\201\013\052\014\056\015\064\001\001\000\002\001\001" +
    "\000\014\006\061\011\203\013\052\014\056\015\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\207" +
    "\001\001\000\022\013\071\014\056\015\072\016\211\017" +
    "\213\025\104\026\102\027\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\107\021\122\022\121\023" +
    "\110\024\123\001\001\000\002\001\001\000\004\043\215" +
    "\001\001\000\022\013\071\014\056\015\072\016\211\017" +
    "\216\025\104\026\102\027\101\001\001\000\002\001\001" +
    "\000\004\043\217\001\001\000\002\001\001\000\004\034" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\224\001\001\000\002\001\001\000\006\007\226\010" +
    "\047\001\001\000\002\001\001\000\004\045\230\001\001" +
    "\000\004\033\232\001\001\000\004\010\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\235\001\001" +
    "\000\004\033\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\036\032\242\001\001" +
    "\000\002\001\001\000\004\006\244\001\001\000\006\005" +
    "\245\010\045\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IRT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IRT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IRT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public void syntax_error(Symbol s){
        //this.s = s;
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna: " +(s.left)+ ". Identificador " +s.value + " no reconocido." + "el type: " + s.sym);
    }
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

    public Symbol getS(){
        return this.s;
    }
    public Nodo_irt mdc = new Nodo_irt("parametros");
    public ArrayList<Nodo_irt> Lista_IRT = new ArrayList<>();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IRT$actions {
  private final IRT parser;

  /** Constructor */
  CUP$IRT$actions(IRT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IRT$do_action(
    int                        CUP$IRT$act_num,
    java_cup.runtime.lr_parser CUP$IRT$parser,
    java.util.Stack            CUP$IRT$stack,
    int                        CUP$IRT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IRT$result;

      /* select the action based on the action number */
      switch (CUP$IRT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bool_literal ::= False 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bool_literal ::= True 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // int_literal ::= Digit 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // int_literal ::= Hex_literal 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // int_literal ::= Decimal_literal 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= bool_literal 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= int_literal 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond_op ::= OR 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond_op ::= AND 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // eq_op ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // eq_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // rel_op ::= GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rel_op ::= LESS_EQUAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rel_op ::= LESS 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rel_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arith_op ::= Mod 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arith_op ::= Division 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arith_op ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arith_op ::= Menos 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arith_op ::= Mas 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bin_op ::= cond_op 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bin_op ::= eq_op 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bin_op ::= rel_op 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bin_op ::= arith_op 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // callout_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // callout_arg ::= expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= Exclamacion expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= Menos expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr bin_op expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= literal 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= method_call 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= location 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // location ::= Id Corche_A expr Corche_C 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // location ::= Id 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_name ::= Id 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_name",10, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call_coma_callout ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call_coma_callout ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call_corche_dos ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call_corche_dos ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_call_corche_expr ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call_corche_expr ::= Coma expr method_call_corche_expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_call_corche ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_call_corche ::= expr method_call_corche_expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_call ::= Callout LEFT_PAR STRING_LITERAL method_call_corche_dos RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-4)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_call ::= method_name LEFT_PAR method_call_corche RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assign_op ::= MINUS_EQUAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign_op ::= PLUS_EQUAL 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_expr ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_expr ::= expr 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_else_block ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_else_block ::= Else block 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= block statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= Continue Punto_coma statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= Break Punto_coma statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= Return statement_expr Punto_coma statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= For Id ASSIGN expr Coma expr block statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-7)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= If LEFT_PAR expr RIGHT_PAR block statement_else_block statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-6)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= method_call Punto_coma statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= location assign_op expr Punto_coma statement 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-4)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= Boolean 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= Int 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_decl_coma_id ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decl_coma_id ::= Coma Id var_decl_coma_id 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= type Id var_decl_coma_id Punto_coma var_decl 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-4)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= Llave_A var_decl statement Llave_C 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl_corche_coma_type ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl_corche_coma_type ::= Coma type Id NT$2 method_decl_corche_coma_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-2)).value;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-4)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.peek()).value;
 
            parser.mdc.parametros_nodo.addParame("" + id);
        
              CUP$IRT$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl_corche ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl_corche ::= type Id NT$1 method_decl_corche_coma_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-2)).value;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.peek()).value;
 
            parser.mdc.Crear_parametros();
            parser.mdc.parametros_nodo.addParame("" + id);

         
              CUP$IRT$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl ::= Void Id LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-6)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= type Id LEFT_PAR method_decl_corche RIGHT_PAR NT$0 block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-6)).value;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-7)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-3)).value;
 
                        Nodo_irt metodo = new Nodo_irt("Metodo");
                        metodo.Crear_method(("" + id), parser.mdc);
                        parser.Lista_IRT.add(metodo);
                        
                
              CUP$IRT$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl_coma_field ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl_coma_field ::= Coma field_name field_decl_coma_field 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-2)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl ::= 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_decl ::= field_decl type field_name field_decl_coma_field Punto_coma 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-4)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_name ::= Id Corche_A int_literal Corche_C 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-3)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_name ::= Id 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Class Program Llave_A field_decl method_decl Llave_C 
            {
              Object RESULT =null;

              CUP$IRT$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-5)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= program 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.peek()).value;
		
            System.out.println("Correcto");
        
              CUP$IRT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          return CUP$IRT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IRT$stack.elementAt(CUP$IRT$top-1)).value;
		RESULT = start_val;
              CUP$IRT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$IRT$stack.elementAt(CUP$IRT$top-1)), ((java_cup.runtime.Symbol)CUP$IRT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$IRT$parser.done_parsing();
          return CUP$IRT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

