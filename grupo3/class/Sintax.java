
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 23 18:45:20 CST 2022
//----------------------------------------------------

package compiler.semantic;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 23 18:45:20 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\031\003\000\002\031\006\000\002\044\002" +
    "\000\002\004\010\000\002\004\002\000\002\037\005\000" +
    "\002\037\002\000\002\045\002\000\002\005\012\000\002" +
    "\046\002\000\002\005\012\000\002\005\002\000\002\047" +
    "\002\000\002\032\006\000\002\032\002\000\002\033\006" +
    "\000\002\033\002\000\002\006\006\000\002\050\002\000" +
    "\002\007\010\000\002\007\002\000\002\034\005\000\002" +
    "\034\002\000\002\010\003\000\002\010\003\000\002\051" +
    "\002\000\002\011\010\000\002\011\005\000\002\011\011" +
    "\000\002\011\012\000\002\011\006\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\002\000\002" +
    "\035\004\000\002\035\002\000\002\036\003\000\002\036" +
    "\002\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\006\000\002\013\007\000\002\040\004\000" +
    "\002\040\002\000\002\041\005\000\002\041\002\000\002" +
    "\042\005\000\002\042\002\000\002\043\005\000\002\043" +
    "\002\000\002\014\003\000\002\015\003\000\002\015\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\005\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\020\005\001\002\000\004\002\000\001" +
    "\002\000\004\021\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\053\011\001\002\000" +
    "\012\004\ufffa\005\ufffa\017\ufffa\054\ufffa\001\002\000\012" +
    "\004\016\005\017\017\013\054\ufff3\001\002\000\004\022" +
    "\243\001\002\000\004\054\242\001\002\000\004\022\020" +
    "\001\002\000\004\022\uffe7\001\002\000\004\022\uffe6\001" +
    "\002\000\012\043\ufff7\045\ufffe\055\031\057\ufffe\001\002" +
    "\000\006\045\ufffc\057\ufffc\001\002\000\006\045\ufff8\057" +
    "\023\001\002\000\004\022\026\001\002\000\004\045\025" +
    "\001\002\000\012\004\ufffb\005\ufffb\017\ufffb\054\ufffb\001" +
    "\002\000\010\045\ufffe\055\031\057\ufffe\001\002\000\006" +
    "\045\ufff8\057\023\001\002\000\004\045\ufff9\001\002\000" +
    "\010\023\032\026\034\027\035\001\002\000\046\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\056\uffa8\057\uffa8\001\002\000\004\056" +
    "\036\001\002\000\046\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\056\uffaa" +
    "\057\uffaa\001\002\000\046\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\056" +
    "\uffa9\057\uffa9\001\002\000\006\045\ufffd\057\ufffd\001\002" +
    "\000\004\043\040\001\002\000\010\004\016\005\017\044" +
    "\ufff0\001\002\000\004\022\233\001\002\000\004\044\043" +
    "\001\002\000\004\053\044\001\002\000\030\004\016\005" +
    "\017\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\022\uffea\053\uffea\054\uffea\001\002\000\012\004\016\005" +
    "\017\017\013\054\ufff3\001\002\000\004\054\ufff6\001\002" +
    "\000\004\022\050\001\002\000\004\043\ufff7\001\002\000" +
    "\004\022\223\001\002\000\024\006\053\007\056\010\064" +
    "\012\060\013\055\014\061\022\062\053\044\054\uffdc\001" +
    "\002\000\004\043\207\001\002\000\004\045\205\001\002" +
    "\000\004\045\203\001\002\000\004\043\173\001\002\000" +
    "\004\043\163\001\002\000\032\006\053\015\076\016\077" +
    "\022\062\023\032\026\034\027\035\043\101\045\uffd8\047" +
    "\105\060\100\062\102\001\002\000\004\045\155\001\002" +
    "\000\060\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffca" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\055\152\056\uffc9\057\uffc9\001\002\000\024" +
    "\006\053\007\056\010\064\012\060\013\055\014\061\022" +
    "\062\053\044\054\uffdc\001\002\000\004\022\142\001\002" +
    "\000\004\054\141\001\002\000\010\034\070\035\072\036" +
    "\067\001\002\000\030\006\uffd5\015\uffd5\016\uffd5\022\uffd5" +
    "\023\uffd5\026\uffd5\027\uffd5\043\uffd5\047\uffd5\060\uffd5\062" +
    "\uffd5\001\002\000\030\006\uffd6\015\uffd6\016\uffd6\022\uffd6" +
    "\023\uffd6\026\uffd6\027\uffd6\043\uffd6\047\uffd6\060\uffd6\062" +
    "\uffd6\001\002\000\030\006\053\015\076\016\077\022\062" +
    "\023\032\026\034\027\035\043\101\047\105\060\100\062" +
    "\102\001\002\000\030\006\uffd7\015\uffd7\016\uffd7\022\uffd7" +
    "\023\uffd7\026\uffd7\027\uffd7\043\uffd7\047\uffd7\060\uffd7\062" +
    "\uffd7\001\002\000\046\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6" +
    "\057\uffc6\001\002\000\046\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\056" +
    "\uffc7\057\uffc7\001\002\000\036\030\122\031\131\032\114" +
    "\033\120\037\116\040\121\041\110\042\113\045\136\046" +
    "\115\047\127\050\130\051\126\052\117\001\002\000\046" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\056\uffa7\057\uffa7\001\002\000" +
    "\046\030\uffa6\031\uffa6\032\uffa6\033\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\056\uffa6\057\uffa6\001\002" +
    "\000\030\006\053\015\076\016\077\022\062\023\032\026" +
    "\034\027\035\043\101\047\105\060\100\062\102\001\002" +
    "\000\030\006\053\015\076\016\077\022\062\023\032\026" +
    "\034\027\035\043\101\047\105\060\100\062\102\001\002" +
    "\000\046\030\uffac\031\uffac\032\uffac\033\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\056\uffac\057\uffac\001" +
    "\002\000\046\030\uffab\031\uffab\032\uffab\033\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\056\uffab\057\uffab" +
    "\001\002\000\046\030\uffad\031\uffad\032\uffad\033\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\056\uffad\057" +
    "\uffad\001\002\000\030\006\053\015\076\016\077\022\062" +
    "\023\032\026\034\027\035\043\101\047\105\060\100\062" +
    "\102\001\002\000\046\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\056\uffc5" +
    "\057\uffc5\001\002\000\046\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\056" +
    "\uffc3\057\uffc3\001\002\000\030\006\uffaf\015\uffaf\016\uffaf" +
    "\022\uffaf\023\uffaf\026\uffaf\027\uffaf\043\uffaf\047\uffaf\060" +
    "\uffaf\062\uffaf\001\002\000\030\006\053\015\076\016\077" +
    "\022\062\023\032\026\034\027\035\043\101\047\105\060" +
    "\100\062\102\001\002\000\030\006\uffbc\015\uffbc\016\uffbc" +
    "\022\uffbc\023\uffbc\026\uffbc\027\uffbc\043\uffbc\047\uffbc\060" +
    "\uffbc\062\uffbc\001\002\000\030\006\uffae\015\uffae\016\uffae" +
    "\022\uffae\023\uffae\026\uffae\027\uffae\043\uffae\047\uffae\060" +
    "\uffae\062\uffae\001\002\000\030\006\uffb3\015\uffb3\016\uffb3" +
    "\022\uffb3\023\uffb3\026\uffb3\027\uffb3\043\uffb3\047\uffb3\060" +
    "\uffb3\062\uffb3\001\002\000\030\006\uffba\015\uffba\016\uffba" +
    "\022\uffba\023\uffba\026\uffba\027\uffba\043\uffba\047\uffba\060" +
    "\uffba\062\uffba\001\002\000\030\006\uffb1\015\uffb1\016\uffb1" +
    "\022\uffb1\023\uffb1\026\uffb1\027\uffb1\043\uffb1\047\uffb1\060" +
    "\uffb1\062\uffb1\001\002\000\030\006\uffb6\015\uffb6\016\uffb6" +
    "\022\uffb6\023\uffb6\026\uffb6\027\uffb6\043\uffb6\047\uffb6\060" +
    "\uffb6\062\uffb6\001\002\000\030\006\uffb2\015\uffb2\016\uffb2" +
    "\022\uffb2\023\uffb2\026\uffb2\027\uffb2\043\uffb2\047\uffb2\060" +
    "\uffb2\062\uffb2\001\002\000\030\006\uffb0\015\uffb0\016\uffb0" +
    "\022\uffb0\023\uffb0\026\uffb0\027\uffb0\043\uffb0\047\uffb0\060" +
    "\uffb0\062\uffb0\001\002\000\030\006\uffb5\015\uffb5\016\uffb5" +
    "\022\uffb5\023\uffb5\026\uffb5\027\uffb5\043\uffb5\047\uffb5\060" +
    "\uffb5\062\uffb5\001\002\000\030\006\uffbd\015\uffbd\016\uffbd" +
    "\022\uffbd\023\uffbd\026\uffbd\027\uffbd\043\uffbd\047\uffbd\060" +
    "\uffbd\062\uffbd\001\002\000\030\006\uffbe\015\uffbe\016\uffbe" +
    "\022\uffbe\023\uffbe\026\uffbe\027\uffbe\043\uffbe\047\uffbe\060" +
    "\uffbe\062\uffbe\001\002\000\030\006\uffbb\015\uffbb\016\uffbb" +
    "\022\uffbb\023\uffbb\026\uffbb\027\uffbb\043\uffbb\047\uffbb\060" +
    "\uffbb\062\uffbb\001\002\000\030\006\uffb7\015\uffb7\016\uffb7" +
    "\022\uffb7\023\uffb7\026\uffb7\027\uffb7\043\uffb7\047\uffb7\060" +
    "\uffb7\062\uffb7\001\002\000\030\006\uffb9\015\uffb9\016\uffb9" +
    "\022\uffb9\023\uffb9\026\uffb9\027\uffb9\043\uffb9\047\uffb9\060" +
    "\uffb9\062\uffb9\001\002\000\030\006\uffb8\015\uffb8\016\uffb8" +
    "\022\uffb8\023\uffb8\026\uffb8\027\uffb8\043\uffb8\047\uffb8\060" +
    "\uffb8\062\uffb8\001\002\000\030\006\uffb4\015\uffb4\016\uffb4" +
    "\022\uffb4\023\uffb4\026\uffb4\027\uffb4\043\uffb4\047\uffb4\060" +
    "\uffb4\062\uffb4\001\002\000\046\030\122\031\131\032\114" +
    "\033\120\037\116\040\121\041\110\042\113\044\uffc4\045" +
    "\uffc4\046\115\047\127\050\130\051\126\052\117\053\uffc4" +
    "\056\uffc4\057\uffc4\001\002\000\036\030\122\031\131\032" +
    "\114\033\120\037\116\040\121\041\110\042\113\044\134" +
    "\046\115\047\127\050\130\051\126\052\117\001\002\000" +
    "\046\030\uffc1\031\uffc1\032\uffc1\033\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\056\uffc1\057\uffc1\001\002" +
    "\000\046\030\122\031\131\032\114\033\120\037\116\040" +
    "\121\041\110\042\113\044\uffc2\045\uffc2\046\115\047\127" +
    "\050\130\051\126\052\117\053\uffc2\056\uffc2\057\uffc2\001" +
    "\002\000\024\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\022\uffe5\053\uffe5\054\uffe5\001\002\000\024\006" +
    "\053\007\056\010\064\012\060\013\055\014\061\022\062" +
    "\053\044\054\uffdc\001\002\000\004\054\uffe4\001\002\000" +
    "\034\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\017\uffed\022\uffed\053\uffed\054" +
    "\uffed\001\002\000\004\035\143\001\002\000\030\006\053" +
    "\015\076\016\077\022\062\023\032\026\034\027\035\043" +
    "\101\047\105\060\100\062\102\001\002\000\036\030\122" +
    "\031\131\032\114\033\120\037\116\040\121\041\110\042" +
    "\113\046\115\047\127\050\130\051\126\052\117\057\145" +
    "\001\002\000\030\006\053\015\076\016\077\022\062\023" +
    "\032\026\034\027\035\043\101\047\105\060\100\062\102" +
    "\001\002\000\036\030\122\031\131\032\114\033\120\037" +
    "\116\040\121\041\110\042\113\046\115\047\127\050\130" +
    "\051\126\052\117\053\044\001\002\000\024\006\053\007" +
    "\056\010\064\012\060\013\055\014\061\022\062\053\044" +
    "\054\uffdc\001\002\000\004\054\uffe1\001\002\000\004\054" +
    "\uffdd\001\002\000\030\006\053\015\076\016\077\022\062" +
    "\023\032\026\034\027\035\043\101\047\105\060\100\062" +
    "\102\001\002\000\036\030\122\031\131\032\114\033\120" +
    "\037\116\040\121\041\110\042\113\046\115\047\127\050" +
    "\130\051\126\052\117\056\154\001\002\000\054\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\056\uffc8\057" +
    "\uffc8\001\002\000\024\006\053\007\056\010\064\012\060" +
    "\013\055\014\061\022\062\053\044\054\uffdc\001\002\000" +
    "\004\054\uffde\001\002\000\036\030\122\031\131\032\114" +
    "\033\120\037\116\040\121\041\110\042\113\045\uffd9\046" +
    "\115\047\127\050\130\051\126\052\117\001\002\000\004" +
    "\045\161\001\002\000\024\006\053\007\056\010\064\012" +
    "\060\013\055\014\061\022\062\053\044\054\uffdc\001\002" +
    "\000\004\054\uffe0\001\002\000\032\006\053\015\076\016" +
    "\077\022\062\023\032\026\034\027\035\043\101\044\uffd1" +
    "\047\105\060\100\062\102\001\002\000\040\030\122\031" +
    "\131\032\114\033\120\037\116\040\121\041\110\042\113" +
    "\044\uffcf\046\115\047\127\050\130\051\126\052\117\057" +
    "\167\001\002\000\004\044\166\001\002\000\046\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\056\uffd4\057\uffd4\001\002\000\030\006" +
    "\053\015\076\016\077\022\062\023\032\026\034\027\035" +
    "\043\101\047\105\060\100\062\102\001\002\000\004\044" +
    "\uffd2\001\002\000\040\030\122\031\131\032\114\033\120" +
    "\037\116\040\121\041\110\042\113\044\uffcf\046\115\047" +
    "\127\050\130\051\126\052\117\057\167\001\002\000\004" +
    "\044\uffd0\001\002\000\030\006\053\015\076\016\077\022" +
    "\062\023\032\026\034\027\035\043\101\047\105\060\100" +
    "\062\102\001\002\000\036\030\122\031\131\032\114\033" +
    "\120\037\116\040\121\041\110\042\113\044\175\046\115" +
    "\047\127\050\130\051\126\052\117\001\002\000\004\053" +
    "\044\001\002\000\026\006\uffda\007\uffda\010\uffda\011\200" +
    "\012\uffda\013\uffda\014\uffda\022\uffda\053\uffda\054\uffda\001" +
    "\002\000\024\006\053\007\056\010\064\012\060\013\055" +
    "\014\061\022\062\053\044\054\uffdc\001\002\000\004\053" +
    "\044\001\002\000\024\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\022\uffdb\053\uffdb\054\uffdb\001\002\000" +
    "\004\054\uffe2\001\002\000\024\006\053\007\056\010\064" +
    "\012\060\013\055\014\061\022\062\053\044\054\uffdc\001" +
    "\002\000\004\054\uffdf\001\002\000\024\006\053\007\056" +
    "\010\064\012\060\013\055\014\061\022\062\053\044\054" +
    "\uffdc\001\002\000\004\054\uffe3\001\002\000\004\063\210" +
    "\001\002\000\006\044\uffcd\057\211\001\002\000\032\006" +
    "\053\015\076\016\077\022\062\023\032\026\034\027\035" +
    "\043\101\047\105\060\100\062\102\063\215\001\002\000" +
    "\004\044\213\001\002\000\046\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\056\uffd3\057\uffd3\001\002\000\040\030\122\031\131\032" +
    "\114\033\120\037\116\040\121\041\110\042\113\044\uffc0" +
    "\046\115\047\127\050\130\051\126\052\117\057\uffc0\001" +
    "\002\000\006\044\uffbf\057\uffbf\001\002\000\006\044\uffcb" +
    "\057\217\001\002\000\032\006\053\015\076\016\077\022" +
    "\062\023\032\026\034\027\035\043\101\047\105\060\100" +
    "\062\102\063\215\001\002\000\004\044\uffce\001\002\000" +
    "\006\044\uffcb\057\217\001\002\000\004\044\uffcc\001\002" +
    "\000\006\045\uffec\057\uffec\001\002\000\006\045\uffe8\057" +
    "\226\001\002\000\004\045\231\001\002\000\004\022\227" +
    "\001\002\000\006\045\uffe8\057\226\001\002\000\004\045" +
    "\uffe9\001\002\000\030\004\016\005\017\006\uffea\007\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\022\uffea\053\uffea\054" +
    "\uffea\001\002\000\024\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\022\uffeb\053\uffeb\054\uffeb\001\002\000" +
    "\006\044\ufff2\057\ufff2\001\002\000\006\044\uffee\057\235" +
    "\001\002\000\006\004\016\005\017\001\002\000\004\044" +
    "\ufff1\001\002\000\004\022\240\001\002\000\006\044\uffee" +
    "\057\235\001\002\000\004\044\uffef\001\002\000\004\002" +
    "\uffff\001\002\000\004\043\ufff5\001\002\000\004\043\245" +
    "\001\002\000\010\004\016\005\017\044\ufff0\001\002\000" +
    "\004\044\247\001\002\000\004\053\044\001\002\000\012" +
    "\004\016\005\017\017\013\054\ufff3\001\002\000\004\054" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\006\005" +
    "\013\010\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\036\001\001\000\004\044\021\001\001" +
    "\000\004\037\023\001\001\000\004\031\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\027\001\001\000\002\001\001\000\004\026\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\040\032\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\044\001\001\000\006\007\051\010" +
    "\050\001\001\000\006\005\045\010\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\036\001\001\000" +
    "\002\001\001\000\014\006\062\011\064\013\053\014\056" +
    "\015\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\072\014\056\015\073\016\156\025\105\026\103\027" +
    "\102\036\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\062\011\150\013\053\014\056\015\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\072\014\056\015\073\016\074\025\105\026\103\027\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\110\021\123\022\122\023\111\024\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\072\014\056\015\073\016\134\025\105\026\103\027\102" +
    "\001\001\000\020\013\072\014\056\015\073\016\132\025" +
    "\105\026\103\027\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\072\014\056\015" +
    "\073\016\106\025\105\026\103\027\102\001\001\000\002" +
    "\001\001\000\014\020\110\021\123\022\122\023\111\024" +
    "\124\001\001\000\002\001\001\000\020\013\072\014\056" +
    "\015\073\016\131\025\105\026\103\027\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\110\021\123\022\122\023\111\024\124\001\001\000" +
    "\014\020\110\021\123\022\122\023\111\024\124\001\001" +
    "\000\002\001\001\000\014\020\110\021\123\022\122\023" +
    "\111\024\124\001\001\000\004\051\136\001\001\000\014" +
    "\006\062\011\137\013\053\014\056\015\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\072\014\056\015\073\016\143\025\105\026\103\027" +
    "\102\001\001\000\014\020\110\021\123\022\122\023\111" +
    "\024\124\001\001\000\020\013\072\014\056\015\073\016" +
    "\145\025\105\026\103\027\102\001\001\000\016\006\146" +
    "\020\110\021\123\022\122\023\111\024\124\001\001\000" +
    "\014\006\062\011\147\013\053\014\056\015\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\072\014" +
    "\056\015\073\016\152\025\105\026\103\027\102\001\001" +
    "\000\014\020\110\021\123\022\122\023\111\024\124\001" +
    "\001\000\002\001\001\000\014\006\062\011\155\013\053" +
    "\014\056\015\065\001\001\000\002\001\001\000\014\020" +
    "\110\021\123\022\122\023\111\024\124\001\001\000\002" +
    "\001\001\000\014\006\062\011\161\013\053\014\056\015" +
    "\065\001\001\000\002\001\001\000\022\013\072\014\056" +
    "\015\073\016\163\025\105\026\103\027\102\040\164\001" +
    "\001\000\016\020\110\021\123\022\122\023\111\024\124" +
    "\041\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\072\014\056\015\073\016\170\025\105\026\103" +
    "\027\102\001\001\000\002\001\001\000\016\020\110\021" +
    "\123\022\122\023\111\024\124\041\171\001\001\000\002" +
    "\001\001\000\020\013\072\014\056\015\073\016\173\025" +
    "\105\026\103\027\102\001\001\000\014\020\110\021\123" +
    "\022\122\023\111\024\124\001\001\000\004\006\175\001" +
    "\001\000\004\035\176\001\001\000\014\006\062\011\201" +
    "\013\053\014\056\015\065\001\001\000\004\006\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\062" +
    "\011\203\013\053\014\056\015\065\001\001\000\002\001" +
    "\001\000\014\006\062\011\205\013\053\014\056\015\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\211\001\001\000\022\013\072\014\056\015\073\016\213" +
    "\017\215\025\105\026\103\027\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\110\021\123\022\122" +
    "\023\111\024\124\001\001\000\002\001\001\000\004\043" +
    "\217\001\001\000\022\013\072\014\056\015\073\016\213" +
    "\017\220\025\105\026\103\027\102\001\001\000\002\001" +
    "\001\000\004\043\221\001\001\000\002\001\001\000\004" +
    "\050\223\001\001\000\004\034\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\227\001\001\000\002" +
    "\001\001\000\006\007\231\010\050\001\001\000\002\001" +
    "\001\000\004\047\233\001\001\000\004\033\235\001\001" +
    "\000\004\010\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\243\001\001\000\002\001\001\000" +
    "\006\010\040\032\245\001\001\000\002\001\001\000\004" +
    "\006\247\001\001\000\006\005\250\010\046\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public void syntax_error(Symbol s){
        //this.s = s;
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna: " +(s.left)+ ". Identificador " +s.value + " no reconocido." + "el type: " + s.sym);
    }
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

    public Symbol getS(){
        return this.s;
    }
 

    public Semantic_fun TABLA = new Semantic_fun();
    public int global_scope = 0;
    
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bool_literal ::= False 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    Nodo false_ = new Nodo("False");
    false_.setValor("False");
    false_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) false_);
    tmp.setValor("false");
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bool_literal ::= True 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    Nodo true_ = new Nodo("True");
    true_.setValor("True");
    true_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) true_);
    tmp.setValor("true");
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // int_literal ::= Digit 
            {
              Object RESULT =null;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("int_literal");
    Nodo Digit_ = new Nodo("Digit");
    
    Digit_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) Digit_);
    tmp.setValor(dig + "");
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // int_literal ::= Hex_literal 
            {
              Object RESULT =null;
		int hexlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hexlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object hexl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("int_literal");
    Nodo hex_literal_ = new Nodo("Hex_literal");
    
    hex_literal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) hex_literal_);
    tmp.setValor(hexl + "");
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // int_literal ::= Decimal_literal 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("int_literal");
    Nodo decimal_literal_ = new Nodo("Decimal_literal");
    decimal_literal_.setValor("" + dl);
    decimal_literal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) decimal_literal_);
    tmp.setValor("" + dl);
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= bool_literal 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    tmp.addHijo((Nodo) bl);
    Nodo bol = (Nodo) bl;
    tmp.setValor( bol.getValor());
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo chal = new Nodo("CHAR_LITERAL");
    chal.setValor("CHAR_LITERAL");
    chal.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) chal);
    tmp.setValor("" + cl);
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= int_literal 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    tmp.addHijo((Nodo) il);
    Nodo inl = (Nodo) il;
    tmp.setValor( inl.getValor());
    

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond_op ::= OR 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("cond_op");
    Nodo or_ = new Nodo("OR");
    or_.setValor("OR");
    or_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) or_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond_op ::= AND 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("cond_op");
    Nodo and_ = new Nodo("AND");
    and_.setValor("AND");
    and_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) and_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // eq_op ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("eq_op");
    Nodo not_equal_ = new Nodo("NOT_EQUAL");
    not_equal_.setValor("NOT_EQUAL");
    not_equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) not_equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // eq_op ::= EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("eq_op");
    Nodo equal_ = new Nodo("EQUAL");
    equal_.setValor("EQUAL");
    equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // rel_op ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("rel_op");
    Nodo greater_equal_ = new Nodo("GREATER_EQUAL");
    greater_equal_.setValor("GREATER_EQUAL");
    greater_equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) greater_equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // rel_op ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("rel_op");
    Nodo less_equal_ = new Nodo("LESS_EQUAL");
    less_equal_.setValor("LESS_EQUAL");
    less_equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) less_equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // rel_op ::= LESS 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("rel_op");
    Nodo less_ = new Nodo("LESS");
    less_.setValor("LESS");
    less_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) less_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // rel_op ::= GREATER 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("rel_op");
        Nodo greater_ = new Nodo("GREATER");
        greater_.setValor("GREATER");
        greater_.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) greater_);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arith_op ::= Mod 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo mod = new Nodo("Mod");
        mod.setValor("Mod");
        mod.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) mod);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arith_op ::= Division 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo division = new Nodo("Division");
        division.setValor("Division");
        division.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) division);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arith_op ::= Multiplicacion 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo multiplicacion = new Nodo("Multiplicacion");
        multiplicacion.setValor("Multiplicacion");
        multiplicacion.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) multiplicacion);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arith_op ::= Menos 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo menos = new Nodo("Menos");
        menos.setValor("Menos");
        menos.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) menos);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arith_op ::= Mas 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo mas = new Nodo("Mas");
        mas.setValor("Mas");
        mas.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) mas);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bin_op ::= cond_op 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");
        
        tmp.addHijo((Nodo) co);
        Nodo cov = (Nodo) co;
        tmp.setValor(cov.getValor());
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bin_op ::= eq_op 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");
        
        tmp.addHijo((Nodo) eo);
        Nodo eov = (Nodo) eo;
        tmp.setValor(eov.getValor());
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bin_op ::= rel_op 
            {
              Object RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");

        tmp.addHijo((Nodo) ro);
        Nodo rov = (Nodo) ro;
        tmp.setValor(rov.getValor());
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bin_op ::= arith_op 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");

        tmp.addHijo((Nodo) ao);
        Nodo aov = (Nodo) ao;
        tmp.setValor(aov.getValor());
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // callout_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("callout_arg");

        Nodo strl   = new Nodo("STRING_LITERAL");
        strl.setValor("STRING_LITERAL");
        strl.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) strl); 

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // callout_arg ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("callout_arg");

        tmp.addHijo((Nodo) ex);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo lefp = new Nodo("LEFT_PAR");
        lefp.setValor("LEFT_PAR");
        lefp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) lefp);

        tmp.addHijo((Nodo) ex);

        Nodo rightp = new Nodo("RIGHT_PAR");
        rightp.setValor("RIGHT_PAR");
        rightp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) rightp);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= Exclamacion expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo exclamacion = new Nodo("Exclamacion");
        exclamacion.setValor("Exclamacion");
        exclamacion.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) exclamacion);

        tmp.addHijo((Nodo) ex);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= Menos expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo menos = new Nodo("Menos");
        menos.setValor("Menos");
        menos.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) menos);

        tmp.addHijo((Nodo) ex);
        
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr bin_op expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) ex);

        tmp.addHijo((Nodo) bo);

        tmp.addHijo((Nodo) ex2);
        
        
        
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) lit);
        Nodo liter = (Nodo) lit;
        tmp.setValor(liter.getValor());
        
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= method_call 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) mc);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= location 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) l);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // location ::= Id Corche_A expr Corche_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("location");
        Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);

            id_.setIdentifier(id + "");
            id_.setLocation(idright + 1);
            tmp.addHijo((Nodo) id_);

        Nodo Corche_a = new Nodo("Corche_A");
        Corche_a.setValor("Corche_A");
        Corche_a.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) Corche_a);

        tmp.addHijo((Nodo) ex);

        Nodo Corche_c = new Nodo("Corche_C");
        Corche_c.setValor("Corche_C");
        Corche_c.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) Corche_c);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // location ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("location");

        Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);

            id_.setIdentifier(id + "");
            id_.setLocation(idright + 1);
            tmp.addHijo((Nodo) id_);

        tmp.setNumNodo(parser.contador++);
        System.out.println("ENTRE A LOCATION ::= Id");
        tmp.setValor("0");
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_name ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_name");
        
        Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);

            id_.setIdentifier(id + "");
            id_.setLocation(idright + 1);
            tmp.addHijo((Nodo) id_);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_name",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call_coma_callout ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call_coma_callout ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_coma_callout");

                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);
                tmp.addHijo((Nodo) ca);
                tmp.addHijo((Nodo) mccc);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call_corche_dos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call_corche_dos ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche_dos");
                
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) ca);

                tmp.addHijo((Nodo) mccc);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call_corche_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call_corche_expr ::= Coma expr method_call_corche_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche_expr");
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) ex);
                
                tmp.addHijo((Nodo) mcce);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_call_corche ::= expr method_call_corche_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche");

                tmp.addHijo((Nodo) ex);
                
                tmp.addHijo((Nodo) mcce);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call ::= Callout LEFT_PAR STRING_LITERAL method_call_corche_dos RIGHT_PAR 
            {
              Object RESULT =null;
		int mccdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mccd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("method_call");
                Nodo call_out   = new Nodo("Callout");
                call_out.setValor("Callout");
                call_out.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) call_out); 

                Nodo lpar  = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 

                 Nodo strl   = new Nodo("STRING_LITERAL");
                strl.setValor("STRING_LITERAL");
                strl.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) strl); 

                tmp.addHijo((Nodo) mccd); 

                Nodo rpar  = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_call ::= method_name LEFT_PAR method_call_corche RIGHT_PAR 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int mccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mcc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("method_call");
                tmp.addHijo((Nodo) mn);
                Nodo lpar  = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 
                tmp.addHijo((Nodo) mcc);
                Nodo rpar  = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assign_op ::= MINUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo mn_e  = new Nodo("MINUS_EQUAL");
                mn_e.setValor("MINUS_EQUAL");
                tmp.setValor("MINUS_EQUAL");
                mn_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) mn_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assign_op ::= PLUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo pl_e  = new Nodo("PLUS_EQUAL");
                pl_e.setValor("PLUS_EQUAL");
                tmp.setValor("PLUS_EQUAL");
                pl_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pl_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo assing  = new Nodo("ASSIGN");
                assing.setValor("ASSIGN");
                tmp.setValor("ASSIGN");
                assing.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) assing); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_expr ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("statement_expr");
        tmp.addHijo((Nodo) ex);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_else_block ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_else_block ::= Else block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("statement_else_block");
        Nodo el = new Nodo("Else");
        el.setValor("Else");
        el.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) el); 
        tmp.addHijo((Nodo) b); 
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= block statement 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                tmp.addHijo((Nodo) b); 
                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= Continue Punto_coma statement 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo cn = new Nodo("Continue");
                cn.setValor("Continue");
                cn.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cn); 
                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= Break Punto_coma statement 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo br = new Nodo("Break");
                br.setValor("Break");
                br.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) br); 
                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= Return statement_expr Punto_coma statement 
            {
              Object RESULT =null;
		int stmexleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stmexright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stmex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");

                Nodo rt = new Nodo("Return");
                rt.setValor("Return");
                rt.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rt); 

                tmp.addHijo((Nodo) stmex); 
                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 
                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= For Id ASSIGN expr Coma expr block statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo for_ = new Nodo("For");
                for_.setValor("For");
                for_.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) for_); 

                Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);

            id_.setIdentifier(id + "");
            id_.setLocation(idright + 1);
            tmp.addHijo((Nodo) id_);

                Nodo assing  = new Nodo("ASSIGN");
                assing.setValor("ASSIGN");
                assing.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) assing); 

                tmp.addHijo((Nodo) ex); 
                Nodo cm  = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm); 

                tmp.addHijo((Nodo) ex2); 
                tmp.addHijo((Nodo) b); 
                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= If LEFT_PAR expr RIGHT_PAR block statement_else_block statement 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sebleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sebright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo if_ = new Nodo("If");
                if_.setValor("If");
                if_.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) if_); 

                Nodo lpar = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 

                tmp.addHijo((Nodo) ex);
                Nodo rpar = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 

                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) seb);
                tmp.addHijo((Nodo) stm);
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= method_call Punto_coma statement 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                tmp.addHijo((Nodo) mc);

                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= location assign_op expr Punto_coma NT$5 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

                Nodo tmp = new Nodo("statement");
                
                Nodo loc = (Nodo) l;
                Nodo e = (Nodo) ex;
                Nodo asig = (Nodo) asop;
                if (asig.getValor().equals("ASSIGN"))
                {
                    System.out.println(loc.getIdentifier());
                    loc.setValor(e.getValor());
                    System.out.println("Se hizo loc = exr");
                }
                else if (asig.getValor().equals("PLUS_EQUAL")) 
                {
                    try {
                        int valorAc = Integer.valueOf(loc.getValor());
                        int valorex = Integer.valueOf(e.getValor());
                        int nuevo_valor = valorAc + valorex;
                        loc.setValor( String.valueOf(nuevo_valor));
                        System.out.println("Se hizo loc += exr");
                    }
                    catch(NumberFormatException es){
                        System.out.println("Loc: " + loc.getValor() + "    e: " + e.getValor());
                        System.out.println("ERROR EN +=, EXPR TRAER COMO VALOR ALGO QUE NO PUEDE SER INTEGER");
                    }
                }
                else {
                    try {
                        int valorAc = Integer.valueOf(loc.getValor());
                        int valorex = Integer.valueOf(e.getValor());
                        int nuevo_valor = valorAc + valorex;
                        loc.setValor( String.valueOf(nuevo_valor));
                        System.out.println("Se hizo loc -= exr");
                    }
                    catch(NumberFormatException es){
                        System.out.println("Loc: " + loc.getValor() + "    e: " + e.getValor());
                        System.out.println("ERROR EN -=, EXPR TRAER COMO VALOR ALGO QUE NO PUEDE SER INTEGER");
                    }
                }
                
                
                tmp.addHijo( loc);
                tmp.addHijo( asig);
                tmp.addHijo(e);

                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= Boolean 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        tmp.setValor("Boolean");
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= Int 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        tmp.setValor("Int");
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_decl_coma_id ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_decl_coma_id ::= Coma Id var_decl_coma_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("var_decl_coma_id");
                tmp.setllamada("variable");
                tmp.settype(parser.TABLA.BANDERAS.get("Type"));
                if (tmp.gettype().equals("Boolean")){ tmp.setValor("True");} else {tmp.setValor("0");}
                if (tmp.gettype().equals("Boolean")){ tmp.setmemoria(1);} else {tmp.setmemoria(4);}
                
                tmp.setIdentifier(id + "");
                tmp.setLocation(idright + 1);
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                if (bandera == 2){
                    System.out.println("DESDE LAS COMAS var_decl: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                }
                else {
                    parser.TABLA.BANDERAS.replace("Error_repeticion", "La variable " + tmp.getIdentifier() + ", esta repetida");
                    System.out.println("La variable " + tmp.getIdentifier() + ", esta repetida");
                }
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decl ::= type Id NT$4 var_decl_coma_id Punto_coma var_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            Nodo tmp = new Nodo("var decl");                
            Nodo ty = (Nodo) t;
            tmp.setllamada("variable");
            parser.TABLA.BANDERAS.replace("Type", ty.getValor());
            tmp.settype(ty.getValor());
            tmp.setIdentifier(id + "");
            tmp.setscope(parser.global_scope);
            if (tmp.gettype().equals("Boolean")){ tmp.setValor("True");} else {tmp.setValor("0");}
            if (tmp.gettype().equals("Boolean")){ tmp.setmemoria(1);} else {tmp.setmemoria(4);}
            tmp.setLocation(idright + 1);
            int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
            if (bandera == 2){
                System.out.println("La variable " + tmp.getIdentifier() + ", se guardará");
                parser.TABLA.insertSymbol(tmp, parser.global_scope);
            }
            else {
                parser.TABLA.BANDERAS.replace("Error_repeticion", "La variable " + tmp.getIdentifier() + ", esta repetida");
                System.out.println("La variable " + tmp.getIdentifier() + ", esta repetida");
            }
            RESULT = tmp;
    
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= Llave_A var_decl statement Llave_C 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("block");
        



        // ultimo
        
        parser.TABLA.popScope(parser.global_scope);
        parser.global_scope = parser.global_scope - 1;
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_decl_corche_coma_type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl_corche_coma_type ::= Coma type Id method_decl_corche_coma_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_decl_corche_coma_type");

        tmp.setllamada("variable");
        Nodo ty = (Nodo) t;
        tmp.settype(ty.getValor());
        tmp.setIdentifier(id + "");
        if (tmp.gettype().equals("Int")) 
        { 
            tmp.setValor("0"); 
        } 
        else 
        { 
            tmp.setValor("True"); 
        }
        tmp.setLocation(idright + 1);
        if (tmp.gettype().equals("Int")){ tmp.setmemoria(4); } else { tmp.setmemoria(1); }
        
        tmp.setscope(parser.global_scope);
        tmp.setfuncion(parser.TABLA.BANDERAS.get("Funcion"));
        

        System.out.println("DESDE variables del metodo el resto: La variable" + tmp.getIdentifier() + ", se guardará");
        parser.TABLA.insertSymbol_m(tmp);
        RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl_corche ::= type Id NT$3 method_decl_corche_coma_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Nodo tmp = new Nodo("method_decl_corche");

        tmp.setllamada("variable");
        Nodo ty = (Nodo) t;
        tmp.settype(ty.getValor());
        tmp.setIdentifier(id + "");
        if (tmp.gettype().equals("Int")){ tmp.setValor("0"); } else { tmp.setValor("True"); }
        tmp.setLocation(idright + 1);
        if (tmp.gettype().equals("Int")){ tmp.setmemoria(4);} else { tmp.setmemoria(1); }
        
        System.out.print("El global_scope es: " + parser.global_scope);
        System.out.print("El Funcion guardado es: " + parser.TABLA.BANDERAS.get("Funcion"));
        tmp.setscope(parser.global_scope);
        tmp.setfuncion(parser.TABLA.BANDERAS.get("Funcion"));
        

        System.out.println("DESDE variables del metodo: La variable " + tmp.getIdentifier() + ", se guardará");
        parser.TABLA.insertSymbol_m(tmp);
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl ::= Void Id NT$2 LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;


                Nodo tmp = new Nodo("method_decl");
                tmp.setllamada("Metodo");
                tmp.settype("Void");
                tmp.setIdentifier(id + "");
                tmp.setValor(""); 
                tmp.setLocation(idright + 1);
                tmp.setmemoria(0);
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                if (bandera == 2){
                    System.out.println("DESDE METHOD VOID: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                    parser.TABLA.BANDERAS.replace("Funcion", tmp.getIdentifier());
                }
                else {
                    parser.TABLA.BANDERAS.replace("Error_repeticion desde VOID", "El método " + tmp.getIdentifier() + ", esta repetido");
                    System.out.println("El método " + tmp.getIdentifier() + ", esta repetido");
                    parser.TABLA.BANDERAS.replace("Funcion", "ERROR");
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl ::= type Id NT$1 LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("method_decl");
                tmp.setllamada("Metodo");
                Nodo ty = (Nodo) t;
                System.out.println("El valor es: " + ty.getValor());
                tmp.settype(ty.getValor());
                tmp.setIdentifier(id + "");
                if (tmp.gettype().equals("Int")){ tmp.setValor("0"); } else { tmp.setValor("True"); }
                tmp.setLocation(idright + 1);
                if (tmp.gettype().equals("Int")){ tmp.setmemoria(4);} else { tmp.setmemoria(1); }
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                if (bandera == 2){
                    System.out.println("DESDE METHOD: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                    parser.TABLA.BANDERAS.replace("Funcion", tmp.getIdentifier());
                }
                else {
                    parser.TABLA.BANDERAS.replace("Error_repeticion", "El método " + tmp.getIdentifier() + ", esta repetido");
                    System.out.println("El método " + tmp.getIdentifier() + ", esta repetido");
                    parser.TABLA.BANDERAS.replace("Funcion", "ERROR");
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;



                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_decl_coma_field ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl_coma_field ::= Coma field_name field_decl_coma_field 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("field_decl_coma_field");
                
                Nodo field = (Nodo) fn;
                //System.out.println("HOLAAAAAAAAAAA" + parser.TABLA.BANDERAS.get("Type"));
                field.settype(parser.TABLA.BANDERAS.get("Type"));
                if (field.gettype().equals("Boolean")){ field.setValor("True");}
                if (field.gettype().equals("Int")){ field.setmemoria(field.getmemoria() * 4);} else { field.setmemoria(field.getmemoria() * 1); }
                field.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(field, parser.global_scope);
                if (bandera == 2){
                    System.out.println("DESDE LAS COMAS: La variable " + field.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(field, parser.global_scope);
                }
                else {
                    parser.TABLA.BANDERAS.replace("Error_repeticion", "La variable " + field.getIdentifier() + ", esta repetida");
                    System.out.println("La variable " + field.getIdentifier() + ", esta repetida");
                }
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl ::= field_decl type field_name NT$0 field_decl_coma_field Punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("field decl");
                Nodo field = (Nodo) fn;
                if (parser.global_scope != 0){
                    System.out.println("MAS DE 1 SCOPE");
                }
                else {
                    System.out.println("HACER EL 1 SCOPE");
                    System.out.println("La cree con: " + field.getIdentifier());
                    parser.global_scope = parser.global_scope + 1;
                    parser.TABLA.pushScope(parser.global_scope);
                    
                
                }
                
                
                Nodo ty = (Nodo) t;
                parser.TABLA.BANDERAS.replace("Type", ty.getValor());
                field.settype(ty.getValor());
                field.setscope(parser.global_scope);
                if (field.gettype().equals("Boolean")){ field.setValor("True");}
                if (field.gettype().equals("Int")){ field.setmemoria(field.getmemoria() * 4);} else { field.setmemoria(field.getmemoria() * 1); }
                int bandera = parser.TABLA.lookup_f(field, parser.global_scope);
                if (bandera == 2){
                    System.out.println("La variable " + field.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(field, parser.global_scope);
                }
                else {
                    parser.TABLA.BANDERAS.replace("Error_repeticion", "La variable " + field.getIdentifier() + ", esta repetida");
                    System.out.println("La variable " + field.getIdentifier() + ", esta repetida");
                }
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_name ::= Id Corche_A int_literal Corche_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Nodo tmp = new Nodo("field_name_vector");
            
            tmp.setllamada("vector");
            tmp.setIdentifier(id + "");
            tmp.setValor("0");
            tmp.setLocation(idright + 1);
            Nodo inl = (Nodo) il;
            try {
                tmp.setmemoria(Integer.valueOf(inl.getValor()));
                }
            catch(Exception es){
                System.out.println(es);
                }
            
            RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_name ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            
            Nodo tmp = new Nodo("field_name_id");
            tmp.setllamada("variable");
            tmp.setIdentifier(id + "");
            tmp.setValor("0");
            tmp.setLocation(idright + 1);
            tmp.setmemoria(1);
            RESULT = tmp;
            
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Class Program Llave_A field_decl method_decl Llave_C 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		

            Nodo tmp = new Nodo("program");
            Nodo class_ = new Nodo("class");
            class_.setValor("class");
            class_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) class_);
            
            Nodo pr = new Nodo("Program");
            pr.setValor("Program");
            pr.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) pr);

            Nodo llavea = new Nodo("Llave_A");
            llavea.setValor("Llave_A");
            llavea.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavea);

            tmp.addHijo((Nodo) fd);
            tmp.addHijo((Nodo) md);

            Nodo llavec = new Nodo("Llave_C");
            llavec.setValor("Llave_C");
            llavec.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavec);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= program 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) s);
            parser.padre = (Nodo) tmp;
            System.out.println("Correcto");
            RESULT=tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

