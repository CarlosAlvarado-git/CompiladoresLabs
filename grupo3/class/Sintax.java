
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 24 09:41:46 CST 2022
//----------------------------------------------------

package compiler.semantic;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 24 09:41:46 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\031\003\000\002\031\006\000\002\044\002" +
    "\000\002\004\010\000\002\004\002\000\002\037\005\000" +
    "\002\037\002\000\002\045\002\000\002\005\012\000\002" +
    "\046\002\000\002\005\012\000\002\005\002\000\002\047" +
    "\002\000\002\032\006\000\002\032\002\000\002\033\006" +
    "\000\002\033\002\000\002\006\006\000\002\050\002\000" +
    "\002\007\010\000\002\007\002\000\002\034\005\000\002" +
    "\034\002\000\002\010\003\000\002\010\003\000\002\051" +
    "\002\000\002\011\010\000\002\011\005\000\002\052\002" +
    "\000\002\011\012\000\002\053\002\000\002\011\013\000" +
    "\002\054\002\000\002\011\007\000\002\055\002\000\002" +
    "\011\006\000\002\056\002\000\002\011\006\000\002\057" +
    "\002\000\002\011\005\000\002\011\002\000\002\060\002" +
    "\000\002\035\005\000\002\035\002\000\002\036\003\000" +
    "\002\036\002\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\006\000\002\013\007\000\002\040" +
    "\004\000\002\040\002\000\002\041\005\000\002\041\002" +
    "\000\002\042\005\000\002\042\002\000\002\043\005\000" +
    "\002\043\002\000\002\014\003\000\002\015\003\000\002" +
    "\015\006\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\017\003\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\020\005\001\002\000\004\002\000\001" +
    "\002\000\004\021\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\053\011\001\002\000" +
    "\012\004\ufffa\005\ufffa\017\ufffa\054\ufffa\001\002\000\012" +
    "\004\016\005\017\017\013\054\ufff3\001\002\000\004\022" +
    "\252\001\002\000\004\054\251\001\002\000\004\022\020" +
    "\001\002\000\004\022\uffe7\001\002\000\004\022\uffe6\001" +
    "\002\000\012\043\ufff7\045\ufffe\055\031\057\ufffe\001\002" +
    "\000\006\045\ufffc\057\ufffc\001\002\000\006\045\ufff8\057" +
    "\023\001\002\000\004\022\026\001\002\000\004\045\025" +
    "\001\002\000\012\004\ufffb\005\ufffb\017\ufffb\054\ufffb\001" +
    "\002\000\010\045\ufffe\055\031\057\ufffe\001\002\000\006" +
    "\045\ufff8\057\023\001\002\000\004\045\ufff9\001\002\000" +
    "\010\023\032\026\033\027\035\001\002\000\046\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\056\uffa1\057\uffa1\001\002\000\046\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\056\uffa3\057\uffa3\001\002\000\004" +
    "\056\036\001\002\000\046\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\056" +
    "\uffa2\057\uffa2\001\002\000\006\045\ufffd\057\ufffd\001\002" +
    "\000\004\043\040\001\002\000\010\004\016\005\017\044" +
    "\ufff0\001\002\000\004\022\242\001\002\000\004\044\043" +
    "\001\002\000\004\053\044\001\002\000\030\004\016\005" +
    "\017\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\022\uffea\053\uffea\054\uffea\001\002\000\012\004\016\005" +
    "\017\017\013\054\ufff3\001\002\000\004\054\ufff6\001\002" +
    "\000\004\022\050\001\002\000\004\043\ufff7\001\002\000" +
    "\004\022\232\001\002\000\024\006\053\007\057\010\063" +
    "\012\060\013\055\014\061\022\062\053\uffd8\054\uffd6\001" +
    "\002\000\004\043\216\001\002\000\004\045\214\001\002" +
    "\000\004\045\211\001\002\000\004\043\201\001\002\000" +
    "\004\043\167\001\002\000\032\006\053\015\100\016\101" +
    "\022\062\023\032\026\033\027\035\043\103\045\uffd1\047" +
    "\107\060\102\062\104\001\002\000\004\045\157\001\002" +
    "\000\060\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc3" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\055\154\056\uffc2\057\uffc2\001\002\000\004" +
    "\022\144\001\002\000\004\054\143\001\002\000\010\034" +
    "\072\035\074\036\071\001\002\000\004\053\044\001\002" +
    "\000\024\006\053\007\057\010\063\012\060\013\055\014" +
    "\061\022\062\053\uffd8\054\uffd6\001\002\000\004\054\uffd7" +
    "\001\002\000\030\006\uffce\015\uffce\016\uffce\022\uffce\023" +
    "\uffce\026\uffce\027\uffce\043\uffce\047\uffce\060\uffce\062\uffce" +
    "\001\002\000\030\006\uffcf\015\uffcf\016\uffcf\022\uffcf\023" +
    "\uffcf\026\uffcf\027\uffcf\043\uffcf\047\uffcf\060\uffcf\062\uffcf" +
    "\001\002\000\030\006\053\015\100\016\101\022\062\023" +
    "\032\026\033\027\035\043\103\047\107\060\102\062\104" +
    "\001\002\000\030\006\uffd0\015\uffd0\016\uffd0\022\uffd0\023" +
    "\uffd0\026\uffd0\027\uffd0\043\uffd0\047\uffd0\060\uffd0\062\uffd0" +
    "\001\002\000\046\030\uffbf\031\uffbf\032\uffbf\033\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf\057" +
    "\uffbf\001\002\000\046\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0" +
    "\057\uffc0\001\002\000\036\030\124\031\133\032\116\033" +
    "\122\037\120\040\123\041\112\042\115\045\140\046\117" +
    "\047\131\050\132\051\130\052\121\001\002\000\046\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\056\uffa0\057\uffa0\001\002\000\046" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\056\uff9f\057\uff9f\001\002\000" +
    "\030\006\053\015\100\016\101\022\062\023\032\026\033" +
    "\027\035\043\103\047\107\060\102\062\104\001\002\000" +
    "\030\006\053\015\100\016\101\022\062\023\032\026\033" +
    "\027\035\043\103\047\107\060\102\062\104\001\002\000" +
    "\046\030\uffa5\031\uffa5\032\uffa5\033\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\056\uffa5\057\uffa5\001\002" +
    "\000\046\030\uffa4\031\uffa4\032\uffa4\033\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\056\uffa4\057\uffa4\001" +
    "\002\000\046\030\uffa6\031\uffa6\032\uffa6\033\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\056\uffa6\057\uffa6" +
    "\001\002\000\030\006\053\015\100\016\101\022\062\023" +
    "\032\026\033\027\035\043\103\047\107\060\102\062\104" +
    "\001\002\000\046\030\uffbe\031\uffbe\032\uffbe\033\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\056\uffbe\057" +
    "\uffbe\001\002\000\046\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\056\uffbc" +
    "\057\uffbc\001\002\000\030\006\uffa8\015\uffa8\016\uffa8\022" +
    "\uffa8\023\uffa8\026\uffa8\027\uffa8\043\uffa8\047\uffa8\060\uffa8" +
    "\062\uffa8\001\002\000\030\006\053\015\100\016\101\022" +
    "\062\023\032\026\033\027\035\043\103\047\107\060\102" +
    "\062\104\001\002\000\030\006\uffb5\015\uffb5\016\uffb5\022" +
    "\uffb5\023\uffb5\026\uffb5\027\uffb5\043\uffb5\047\uffb5\060\uffb5" +
    "\062\uffb5\001\002\000\030\006\uffa7\015\uffa7\016\uffa7\022" +
    "\uffa7\023\uffa7\026\uffa7\027\uffa7\043\uffa7\047\uffa7\060\uffa7" +
    "\062\uffa7\001\002\000\030\006\uffac\015\uffac\016\uffac\022" +
    "\uffac\023\uffac\026\uffac\027\uffac\043\uffac\047\uffac\060\uffac" +
    "\062\uffac\001\002\000\030\006\uffb3\015\uffb3\016\uffb3\022" +
    "\uffb3\023\uffb3\026\uffb3\027\uffb3\043\uffb3\047\uffb3\060\uffb3" +
    "\062\uffb3\001\002\000\030\006\uffaa\015\uffaa\016\uffaa\022" +
    "\uffaa\023\uffaa\026\uffaa\027\uffaa\043\uffaa\047\uffaa\060\uffaa" +
    "\062\uffaa\001\002\000\030\006\uffaf\015\uffaf\016\uffaf\022" +
    "\uffaf\023\uffaf\026\uffaf\027\uffaf\043\uffaf\047\uffaf\060\uffaf" +
    "\062\uffaf\001\002\000\030\006\uffab\015\uffab\016\uffab\022" +
    "\uffab\023\uffab\026\uffab\027\uffab\043\uffab\047\uffab\060\uffab" +
    "\062\uffab\001\002\000\030\006\uffa9\015\uffa9\016\uffa9\022" +
    "\uffa9\023\uffa9\026\uffa9\027\uffa9\043\uffa9\047\uffa9\060\uffa9" +
    "\062\uffa9\001\002\000\030\006\uffae\015\uffae\016\uffae\022" +
    "\uffae\023\uffae\026\uffae\027\uffae\043\uffae\047\uffae\060\uffae" +
    "\062\uffae\001\002\000\030\006\uffb6\015\uffb6\016\uffb6\022" +
    "\uffb6\023\uffb6\026\uffb6\027\uffb6\043\uffb6\047\uffb6\060\uffb6" +
    "\062\uffb6\001\002\000\030\006\uffb7\015\uffb7\016\uffb7\022" +
    "\uffb7\023\uffb7\026\uffb7\027\uffb7\043\uffb7\047\uffb7\060\uffb7" +
    "\062\uffb7\001\002\000\030\006\uffb4\015\uffb4\016\uffb4\022" +
    "\uffb4\023\uffb4\026\uffb4\027\uffb4\043\uffb4\047\uffb4\060\uffb4" +
    "\062\uffb4\001\002\000\030\006\uffb0\015\uffb0\016\uffb0\022" +
    "\uffb0\023\uffb0\026\uffb0\027\uffb0\043\uffb0\047\uffb0\060\uffb0" +
    "\062\uffb0\001\002\000\030\006\uffb2\015\uffb2\016\uffb2\022" +
    "\uffb2\023\uffb2\026\uffb2\027\uffb2\043\uffb2\047\uffb2\060\uffb2" +
    "\062\uffb2\001\002\000\030\006\uffb1\015\uffb1\016\uffb1\022" +
    "\uffb1\023\uffb1\026\uffb1\027\uffb1\043\uffb1\047\uffb1\060\uffb1" +
    "\062\uffb1\001\002\000\030\006\uffad\015\uffad\016\uffad\022" +
    "\uffad\023\uffad\026\uffad\027\uffad\043\uffad\047\uffad\060\uffad" +
    "\062\uffad\001\002\000\046\030\124\031\133\032\116\033" +
    "\122\037\120\040\123\041\112\042\115\044\uffbd\045\uffbd" +
    "\046\117\047\131\050\132\051\130\052\121\053\uffbd\056" +
    "\uffbd\057\uffbd\001\002\000\036\030\124\031\133\032\116" +
    "\033\122\037\120\040\123\041\112\042\115\044\136\046" +
    "\117\047\131\050\132\051\130\052\121\001\002\000\046" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\056\uffba\057\uffba\001\002\000" +
    "\046\030\124\031\133\032\116\033\122\037\120\040\123" +
    "\041\112\042\115\044\uffbb\045\uffbb\046\117\047\131\050" +
    "\132\051\130\052\121\053\uffbb\056\uffbb\057\uffbb\001\002" +
    "\000\024\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\022\uffe5\053\uffe5\054\uffe5\001\002\000\024\006\053" +
    "\007\057\010\063\012\060\013\055\014\061\022\062\053" +
    "\uffd8\054\uffd6\001\002\000\004\054\uffe4\001\002\000\034" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\017\uffed\022\uffed\053\uffed\054\uffed" +
    "\001\002\000\004\035\145\001\002\000\030\006\053\015" +
    "\100\016\101\022\062\023\032\026\033\027\035\043\103" +
    "\047\107\060\102\062\104\001\002\000\036\030\124\031" +
    "\133\032\116\033\122\037\120\040\123\041\112\042\115" +
    "\046\117\047\131\050\132\051\130\052\121\057\147\001" +
    "\002\000\030\006\053\015\100\016\101\022\062\023\032" +
    "\026\033\027\035\043\103\047\107\060\102\062\104\001" +
    "\002\000\036\030\124\031\133\032\116\033\122\037\120" +
    "\040\123\041\112\042\115\046\117\047\131\050\132\051" +
    "\130\052\121\053\uffe0\001\002\000\004\053\044\001\002" +
    "\000\024\006\053\007\057\010\063\012\060\013\055\014" +
    "\061\022\062\053\uffd8\054\uffd6\001\002\000\004\054\uffdf" +
    "\001\002\000\030\006\053\015\100\016\101\022\062\023" +
    "\032\026\033\027\035\043\103\047\107\060\102\062\104" +
    "\001\002\000\036\030\124\031\133\032\116\033\122\037" +
    "\120\040\123\041\112\042\115\046\117\047\131\050\132" +
    "\051\130\052\121\056\156\001\002\000\054\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\056\uffc1\057\uffc1" +
    "\001\002\000\024\006\uffda\007\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\022\uffda\053\uffda\054\uffda\001\002\000\024" +
    "\006\053\007\057\010\063\012\060\013\055\014\061\022" +
    "\062\053\uffd8\054\uffd6\001\002\000\004\054\uffd9\001\002" +
    "\000\036\030\124\031\133\032\116\033\122\037\120\040" +
    "\123\041\112\042\115\045\uffd2\046\117\047\131\050\132" +
    "\051\130\052\121\001\002\000\004\045\164\001\002\000" +
    "\024\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde" +
    "\022\uffde\053\uffde\054\uffde\001\002\000\024\006\053\007" +
    "\057\010\063\012\060\013\055\014\061\022\062\053\uffd8" +
    "\054\uffd6\001\002\000\004\054\uffdd\001\002\000\030\006" +
    "\053\015\100\016\101\022\062\023\032\026\033\027\035" +
    "\043\103\047\107\060\102\062\104\001\002\000\036\030" +
    "\124\031\133\032\116\033\122\037\120\040\123\041\112" +
    "\042\115\044\171\046\117\047\131\050\132\051\130\052" +
    "\121\001\002\000\004\053\uffe2\001\002\000\004\053\044" +
    "\001\002\000\026\006\uffd3\007\uffd3\010\uffd3\011\175\012" +
    "\uffd3\013\uffd3\014\uffd3\022\uffd3\053\uffd3\054\uffd3\001\002" +
    "\000\024\006\053\007\057\010\063\012\060\013\055\014" +
    "\061\022\062\053\uffd8\054\uffd6\001\002\000\004\053\uffd5" +
    "\001\002\000\004\053\044\001\002\000\024\006\uffd4\007" +
    "\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\022\uffd4\053\uffd4" +
    "\054\uffd4\001\002\000\004\054\uffe1\001\002\000\032\006" +
    "\053\015\100\016\101\022\062\023\032\026\033\027\035" +
    "\043\103\044\uffca\047\107\060\102\062\104\001\002\000" +
    "\040\030\124\031\133\032\116\033\122\037\120\040\123" +
    "\041\112\042\115\044\uffc8\046\117\047\131\050\132\051" +
    "\130\052\121\057\205\001\002\000\004\044\204\001\002" +
    "\000\046\030\uffcd\031\uffcd\032\uffcd\033\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\056\uffcd\057\uffcd\001" +
    "\002\000\030\006\053\015\100\016\101\022\062\023\032" +
    "\026\033\027\035\043\103\047\107\060\102\062\104\001" +
    "\002\000\004\044\uffcb\001\002\000\040\030\124\031\133" +
    "\032\116\033\122\037\120\040\123\041\112\042\115\044" +
    "\uffc8\046\117\047\131\050\132\051\130\052\121\057\205" +
    "\001\002\000\004\044\uffc9\001\002\000\024\006\uffdc\007" +
    "\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\022\uffdc\053\uffdc" +
    "\054\uffdc\001\002\000\024\006\053\007\057\010\063\012" +
    "\060\013\055\014\061\022\062\053\uffd8\054\uffd6\001\002" +
    "\000\004\054\uffdb\001\002\000\024\006\053\007\057\010" +
    "\063\012\060\013\055\014\061\022\062\053\uffd8\054\uffd6" +
    "\001\002\000\004\054\uffe3\001\002\000\004\063\217\001" +
    "\002\000\006\044\uffc6\057\220\001\002\000\032\006\053" +
    "\015\100\016\101\022\062\023\032\026\033\027\035\043" +
    "\103\047\107\060\102\062\104\063\224\001\002\000\004" +
    "\044\222\001\002\000\046\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056" +
    "\uffcc\057\uffcc\001\002\000\040\030\124\031\133\032\116" +
    "\033\122\037\120\040\123\041\112\042\115\044\uffb9\046" +
    "\117\047\131\050\132\051\130\052\121\057\uffb9\001\002" +
    "\000\006\044\uffb8\057\uffb8\001\002\000\006\044\uffc4\057" +
    "\226\001\002\000\032\006\053\015\100\016\101\022\062" +
    "\023\032\026\033\027\035\043\103\047\107\060\102\062" +
    "\104\063\224\001\002\000\004\044\uffc7\001\002\000\006" +
    "\044\uffc4\057\226\001\002\000\004\044\uffc5\001\002\000" +
    "\006\045\uffec\057\uffec\001\002\000\006\045\uffe8\057\235" +
    "\001\002\000\004\045\240\001\002\000\004\022\236\001" +
    "\002\000\006\045\uffe8\057\235\001\002\000\004\045\uffe9" +
    "\001\002\000\030\004\016\005\017\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\022\uffea\053\uffea\054\uffea" +
    "\001\002\000\024\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\022\uffeb\053\uffeb\054\uffeb\001\002\000\006" +
    "\044\ufff2\057\ufff2\001\002\000\006\044\uffee\057\244\001" +
    "\002\000\006\004\016\005\017\001\002\000\004\044\ufff1" +
    "\001\002\000\004\022\247\001\002\000\006\044\uffee\057" +
    "\244\001\002\000\004\044\uffef\001\002\000\004\002\uffff" +
    "\001\002\000\004\043\ufff5\001\002\000\004\043\254\001" +
    "\002\000\010\004\016\005\017\044\ufff0\001\002\000\004" +
    "\044\256\001\002\000\004\053\044\001\002\000\012\004" +
    "\016\005\017\017\013\054\ufff3\001\002\000\004\054\ufff4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\006\005" +
    "\013\010\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\036\001\001\000\004\044\021\001\001" +
    "\000\004\037\023\001\001\000\004\031\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\027\001\001\000\002\001\001\000\004\026\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\040\032\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\044\001\001\000\006\007\051\010" +
    "\050\001\001\000\006\005\045\010\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\036\001\001\000" +
    "\002\001\001\000\014\011\063\013\053\014\055\015\064" +
    "\057\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\074\014\055\015\075\016\161\025\107\026\105\027" +
    "\104\036\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\072\001" +
    "\001\000\004\006\066\001\001\000\014\011\067\013\053" +
    "\014\055\015\064\057\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\074\014\055" +
    "\015\075\016\076\025\107\026\105\027\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\112\021\125\022\124\023\113\024\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\074\014\055" +
    "\015\075\016\136\025\107\026\105\027\104\001\001\000" +
    "\020\013\074\014\055\015\075\016\134\025\107\026\105" +
    "\027\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\074\014\055\015\075\016\110" +
    "\025\107\026\105\027\104\001\001\000\002\001\001\000" +
    "\014\020\112\021\125\022\124\023\113\024\126\001\001" +
    "\000\002\001\001\000\020\013\074\014\055\015\075\016" +
    "\133\025\107\026\105\027\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\112\021" +
    "\125\022\124\023\113\024\126\001\001\000\014\020\112" +
    "\021\125\022\124\023\113\024\126\001\001\000\002\001" +
    "\001\000\014\020\112\021\125\022\124\023\113\024\126" +
    "\001\001\000\004\051\140\001\001\000\014\011\141\013" +
    "\053\014\055\015\064\057\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\074\014" +
    "\055\015\075\016\145\025\107\026\105\027\104\001\001" +
    "\000\014\020\112\021\125\022\124\023\113\024\126\001" +
    "\001\000\020\013\074\014\055\015\075\016\147\025\107" +
    "\026\105\027\104\001\001\000\016\020\112\021\125\022" +
    "\124\023\113\024\126\053\150\001\001\000\004\006\151" +
    "\001\001\000\014\011\152\013\053\014\055\015\064\057" +
    "\065\001\001\000\002\001\001\000\020\013\074\014\055" +
    "\015\075\016\154\025\107\026\105\027\104\001\001\000" +
    "\014\020\112\021\125\022\124\023\113\024\126\001\001" +
    "\000\002\001\001\000\004\056\157\001\001\000\014\011" +
    "\160\013\053\014\055\015\064\057\065\001\001\000\002" +
    "\001\001\000\014\020\112\021\125\022\124\023\113\024" +
    "\126\001\001\000\002\001\001\000\004\054\164\001\001" +
    "\000\014\011\165\013\053\014\055\015\064\057\065\001" +
    "\001\000\002\001\001\000\020\013\074\014\055\015\075" +
    "\016\167\025\107\026\105\027\104\001\001\000\014\020" +
    "\112\021\125\022\124\023\113\024\126\001\001\000\004" +
    "\052\171\001\001\000\004\006\172\001\001\000\004\035" +
    "\173\001\001\000\014\011\177\013\053\014\055\015\064" +
    "\057\065\001\001\000\004\060\175\001\001\000\004\006" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\074\014\055\015\075\016\201\025\107\026\105\027" +
    "\104\040\202\001\001\000\016\020\112\021\125\022\124" +
    "\023\113\024\126\041\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\074\014\055\015\075\016\206" +
    "\025\107\026\105\027\104\001\001\000\002\001\001\000" +
    "\016\020\112\021\125\022\124\023\113\024\126\041\207" +
    "\001\001\000\002\001\001\000\004\055\211\001\001\000" +
    "\014\011\212\013\053\014\055\015\064\057\065\001\001" +
    "\000\002\001\001\000\014\011\214\013\053\014\055\015" +
    "\064\057\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\220\001\001\000\022\013\074\014\055\015" +
    "\075\016\222\017\224\025\107\026\105\027\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\112\021" +
    "\125\022\124\023\113\024\126\001\001\000\002\001\001" +
    "\000\004\043\226\001\001\000\022\013\074\014\055\015" +
    "\075\016\222\017\227\025\107\026\105\027\104\001\001" +
    "\000\002\001\001\000\004\043\230\001\001\000\002\001" +
    "\001\000\004\050\232\001\001\000\004\034\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\236\001" +
    "\001\000\002\001\001\000\006\007\240\010\050\001\001" +
    "\000\002\001\001\000\004\047\242\001\001\000\004\033" +
    "\244\001\001\000\004\010\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\252\001\001\000\002" +
    "\001\001\000\006\010\040\032\254\001\001\000\002\001" +
    "\001\000\004\006\256\001\001\000\006\005\257\010\046" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public void syntax_error(Symbol s){
        //this.s = s;
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna: " +(s.left)+ ". Identificador " +s.value + " no reconocido." + "el type: " + s.sym);
    }
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

    public Symbol getS(){
        return this.s;
    }
 

    public Semantic_fun TABLA = new Semantic_fun();
    public int global_scope = 0;
    
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bool_literal ::= False 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    tmp.setValor("false");
    tmp.settype("Boolean");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_literal ::= True 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    tmp.setValor("true");
    tmp.settype("Boolean");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // int_literal ::= Digit 
            {
              Object RESULT =null;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("Digit");
    tmp.setValor("" + dig);
    tmp.settype("Int");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // int_literal ::= Hex_literal 
            {
              Object RESULT =null;
		int hexlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hexlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object hexl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("Hex_literal");
    // convertirlo. 
    tmp.setValor("" + hexl);
    tmp.settype("Int");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // int_literal ::= Decimal_literal 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("int_literal");
    tmp.setValor("" + dl);
    tmp.settype("Int");
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= bool_literal 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo bool = (Nodo) bl;
    tmp.setValor( bool.getValor());
    tmp.settype( bool.gettype());
    
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo chl = (Nodo) cl;
    tmp.setValor( chl.getValor());
    tmp.settype( chl.gettype());
    
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= int_literal 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    Nodo inl = (Nodo) il;
    tmp.setValor( inl.getValor());
    tmp.settype( inl.gettype());
    
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond_op ::= OR 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("OR");
        tmp.setValor("OR");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond_op ::= AND 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("AND");
        tmp.setValor("AND");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // eq_op ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("NOT_EQUAL");
        tmp.setValor("NOT_EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // eq_op ::= EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("EQUAL");
        tmp.setValor("EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rel_op ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("GREATER_EQUAL");
        tmp.setValor("GREATER_EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rel_op ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("LESS_EQUAL");
        tmp.setValor("LESS_EQUAL");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rel_op ::= LESS 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("LESS");
        tmp.setValor("LESS");
        RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rel_op ::= GREATER 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("GREATER");
        tmp.setValor("GREATER");
        RESULT = tmp;

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arith_op ::= Mod 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Mod");
        tmp.setValor("Mod");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arith_op ::= Division 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Div");
        tmp.setValor("Div");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arith_op ::= Multiplicacion 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Multi");
        tmp.setValor("Multi");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arith_op ::= Menos 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Menos");
        tmp.setValor("Menos");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arith_op ::= Mas 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("Mas");
        tmp.setValor("Mas");
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bin_op ::= cond_op 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("cond_op");
        Nodo cov = (Nodo) co;
        tmp.setValor(cov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bin_op ::= eq_op 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("eq_op");
        Nodo eov = (Nodo) eo;
        tmp.setValor(eov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bin_op ::= rel_op 
            {
              Object RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("rel_op");
        Nodo rov = (Nodo) ro;
        tmp.setValor(rov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_op ::= arith_op 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("arith_op");
        Nodo aov = (Nodo) ao;
        tmp.setValor(aov.getValor());
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // callout_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("callout_arg");

        Nodo strl   = new Nodo("STRING_LITERAL");
        strl.setValor("STRING_LITERAL");
        strl.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) strl); 

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // callout_arg ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("callout_arg");

        tmp.addHijo((Nodo) ex);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = (Nodo) ex;

        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= Exclamacion expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
       Nodo tmp = new Nodo("expr");
        Nodo expr1 = (Nodo) ex;
        if (expr1.gettype().equals("Boolean")){
            tmp.settype("Boolean");
        }
        else {
            System.out.println("No se puede usar el signo ! con integers");
            System.exit(0);
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= Menos expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");
        Nodo expr1 = (Nodo) ex;
        if (expr1.gettype().equals("Int")){
            tmp.settype("Int");
        }
        else {
            System.out.println("No se puede usar el - menos con booleanos");
            System.exit(0);
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr bin_op expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo expr1 = (Nodo) ex;
        Nodo bin_op_ = (Nodo) bo;
        Nodo expr2 = (Nodo) ex2;


        if (bin_op_.getNombre().equals("arith_op") || bin_op_.getNombre().equals("rel_op") )
        {
            if(expr1.gettype().equals("Int")){
                if (expr1.gettype().equals(expr2.gettype())){
                switch(bin_op_.getValor()) {
                    case "Mas":
                            tmp.settype(expr1.gettype());
                        break;
                    case "Menos":
                            tmp.settype(expr1.gettype());
                        break;
                    case "Multi":
                            tmp.settype(expr1.gettype());
                        break;
                    case "Div":
                            tmp.settype(expr1.gettype());
                        break;
                    case "Mod":
                            tmp.settype(expr1.gettype());
                        break;
                    case "GREATER":
                            tmp.settype("Boolean"); 
                        break;
                    case "LESS":
                            tmp.settype("Boolean"); 
                        break;
                    case "LESS_EQUAL":
                            tmp.settype("Boolean"); 
                        break;
                    case "GREATER_EQUAL":
                            tmp.settype("Boolean"); 
                        break;
                    default:
                        System.out.println("No entro nada");
                
                    }
                }
                else {
                    System.out.println("Operación de distinto tipo");
                    System.exit(0);
                }

            }
            else {
                System.out.println("No se pueden operar las variables booleanas con este signo: " + bin_op_.getValor());
                System.exit(0);
                }
    
        }else{
            if(expr1.gettype().equals(expr2.gettype())){
                tmp.settype("Boolean");
                }
            else{
                System.out.println("Operación de variables de distintos tipos");
                System.exit(0);
            }
        }
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) lit);
        Nodo liter = (Nodo) lit;
        tmp.settype(liter.gettype());
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= method_call 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) mc);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= location 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        // buscar el id del location
        // guardar su valor en tmp.setValor();
        Nodo loc = (Nodo) l;
        int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
        if (bandera[0] == 1) {
           tmp.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
        }
        else {
            System.out.println("La variable " + loc.getIdentifier() + " no ha sido declarada");
            System.exit(0);
        }
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // location ::= Id Corche_A expr Corche_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("location");


        tmp.setIdentifier(id + "");
        System.out.println("ENTRE A LOCATION ::= Id[num]");
        
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // location ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("location");


        tmp.setIdentifier(id + "");
        System.out.println("ENTRE A LOCATION ::= Id");
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // method_name ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_name");
        
        Nodo id_ = new Nodo("id");
            id_.setValor("id");
            id_.setNumNodo(parser.contador++);

            id_.setIdentifier(id + "");
            id_.setLocation(idright + 1);
            tmp.addHijo((Nodo) id_);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_name",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_call_coma_callout ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_call_coma_callout ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_coma_callout");

                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);
                tmp.addHijo((Nodo) ca);
                tmp.addHijo((Nodo) mccc);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // method_call_corche_dos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // method_call_corche_dos ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche_dos");
                
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) ca);

                tmp.addHijo((Nodo) mccc);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // method_call_corche_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // method_call_corche_expr ::= Coma expr method_call_corche_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche_expr");
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) ex);
                
                tmp.addHijo((Nodo) mcce);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_call_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call_corche ::= expr method_call_corche_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche");

                tmp.addHijo((Nodo) ex);
                
                tmp.addHijo((Nodo) mcce);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call ::= Callout LEFT_PAR STRING_LITERAL method_call_corche_dos RIGHT_PAR 
            {
              Object RESULT =null;
		int mccdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mccd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("method_call");
                Nodo call_out   = new Nodo("Callout");
                call_out.setValor("Callout");
                call_out.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) call_out); 

                Nodo lpar  = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 

                 Nodo strl   = new Nodo("STRING_LITERAL");
                strl.setValor("STRING_LITERAL");
                strl.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) strl); 

                tmp.addHijo((Nodo) mccd); 

                Nodo rpar  = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call ::= method_name LEFT_PAR method_call_corche RIGHT_PAR 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int mccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mcc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("method_call");
                tmp.addHijo((Nodo) mn);
                Nodo lpar  = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 
                tmp.addHijo((Nodo) mcc);
                Nodo rpar  = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assign_op ::= MINUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo mn_e  = new Nodo("MINUS_EQUAL");
                mn_e.setValor("MINUS_EQUAL");
                tmp.setValor("MINUS_EQUAL");
                mn_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) mn_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_op ::= PLUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo pl_e  = new Nodo("PLUS_EQUAL");
                pl_e.setValor("PLUS_EQUAL");
                tmp.setValor("PLUS_EQUAL");
                pl_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pl_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo assing  = new Nodo("ASSIGN");
                assing.setValor("ASSIGN");
                tmp.setValor("ASSIGN");
                assing.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) assing); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_expr ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("statement_expr");
        Nodo e = (Nodo) ex;
        tmp.settype(e.gettype());        
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement_else_block ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_else_block ::= Else NT$12 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$12 ::= 
            {
              Object RESULT =null;

        parser.global_scope = parser.global_scope + 1;
        parser.TABLA.pushScope(parser.global_scope);
    
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= NT$11 block statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT =null;

                Nodo tmp = new Nodo("statement");
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= Continue Punto_coma NT$10 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT =null;

                Nodo tmp = new Nodo("statement");
                
                if (parser.TABLA.BANDERAS.get("For").equals("Si")){
                    System.out.println("Continue correcto");
                    parser.TABLA.BANDERAS.replace("For", "");
                }
                else {
                    System.out.println("No puede usar Continue si no se está dentro de un For");
                    System.exit(0);
                }
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= Break Punto_coma NT$9 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT =null;

                Nodo tmp = new Nodo("statement");
                
                if (parser.TABLA.BANDERAS.get("For").equals("Si")){
                    System.out.println("Break correcto");
                    parser.TABLA.BANDERAS.replace("For", "");
                }
                else {
                    System.out.println("No puede usar break si no se está dentro de un For");
                    System.exit(0);
                }
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= Return statement_expr Punto_coma NT$8 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmexleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stmexright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stmex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =null;
		int stmexleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stmexright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stmex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

                Nodo tmp = new Nodo("statement");
                
                Nodo stmex_x = (Nodo) stmex;
                if (parser.TABLA.BANDERAS.get("Funcion_type").equals(stmex_x.gettype())){
                    System.out.println("Return correcto");
                }
                else {
                    System.out.println("El valor de retorno no es del mismo type de la funcion: " + parser.TABLA.BANDERAS.get("Funcion_type") + " != " + stmex_x.gettype());
                    System.exit(0);
                }

                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= For Id ASSIGN expr Coma expr NT$7 block statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("statement");
                Nodo e = (Nodo) ex;
                Nodo e2 = (Nodo) ex2;
                tmp.setIdentifier("" + id);
                int [] bandera = parser.TABLA.lookup(tmp, parser.global_scope);
                if (bandera[0] == 1) {  
                    // se crea nuevo scope
                    tmp.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                    
                    if (tmp.gettype().equals(e.gettype())){
                        parser.global_scope = parser.global_scope + 1;
                        parser.TABLA.pushScope(parser.global_scope);
                        
                        if(e2.gettype().equals("Int")){
                            System.out.println("Asignacion correcta");
                            parser.TABLA.BANDERAS.replace("For", "Si");
                        }
                        else
                        {
                        System.out.println("La variable del loop debe ser integer");
                        System.exit(0);
                            }
                   }
                   else {
                        System.out.println("La variable " + tmp.getIdentifier() + "no es del mismo type del valor asignado");
                        System.exit(0);
                    }
                }
                else {
                    //  genera nuevo scope y entra la variable
                    parser.global_scope = parser.global_scope + 1;
                    parser.TABLA.pushScope(parser.global_scope);

                    Nodo nueva = new Nodo("id");
                    nueva.setllamada("variable");
                    nueva.setIdentifier(id + "");
                    nueva.settype("Int");
                    nueva.setValor("0");
                    nueva.setLocation(idright + 1);
                    nueva.setmemoria(4);
                    nueva.setscope(parser.global_scope);

                    parser.TABLA.insertSymbol(nueva, parser.global_scope);
                    if (nueva.gettype().equals(e.gettype())){
                        if(e2.gettype().equals("Int")){
                            System.out.println("Asignacion correcta");
                            parser.TABLA.BANDERAS.replace("For", "Si");
                        }
                        else
                        {
                        System.out.println("La variable del loop debe ser integer");
                        System.exit(0);
                            }
                   }
                   else {
                        System.out.println("La variable " + nueva.getIdentifier() + "no es del mismo type del valor asignado");
                        System.exit(0);
                    }
                    
                }
                
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= If LEFT_PAR expr RIGHT_PAR NT$6 block statement_else_block statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sebleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sebright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$6 ::= 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
            Nodo tmp = new Nodo("statement");
                Nodo expr_r = (Nodo) ex;
                if (expr_r.gettype().equals("Int")){
                    System.out.println("El resultado de expr no es boolean");
                    System.exit(0);
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;
                

             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= method_call Punto_coma statement 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                tmp.addHijo((Nodo) mc);

                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= location assign_op expr Punto_coma NT$5 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

                Nodo tmp = new Nodo("statement");
                
                Nodo loc = (Nodo) l;
                Nodo e = (Nodo) ex;
                Nodo asig = (Nodo) asop;
                if (asig.getValor().equals("ASSIGN"))
                {
                    // buscar el id en la tabla
                    //System.out.println("El type de loc es: " + loc.gettype());
                    //System.out.println("El type de e es: " + e.gettype());
                    int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
                    if (bandera[0] == 1) {
                        loc.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                        if (loc.gettype().equals(e.gettype())){
                            System.out.println("Asignacion correcta");
                       }
                       else {
                            System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                            System.exit(0);
                        }
                    }
                    else {
                        System.out.println("La variable " + loc.getIdentifier() + ",no existe");
                        System.exit(0);
                    }
                }
                else if (asig.getValor().equals("PLUS_EQUAL")) 
                {
                    int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
                    if (bandera[0] == 1) {
                        loc.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                        if (loc.gettype().equals("Int")){
                            if (loc.gettype().equals(e.gettype())){
                                System.out.println("Asignacion correcta");
                           }
                           else {
                                System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                System.exit(0);
                            }
                        }
                        else {
                            System.out.println("No se puede realizar la operacion += con booleanos");
                            System.exit(0);
                        }

                    }
                    else {
                        System.out.println("La variable " + loc.getIdentifier() + ",no existe");
                        System.exit(0);
                    }
                }
                else {
                    int [] bandera = parser.TABLA.lookup(loc, parser.global_scope);
                    if (bandera[0] == 1) {
                        loc.settype(parser.TABLA.Tabla.get("Scope: " + bandera[2]).get(bandera[1]).data.get("type"));
                        if (loc.gettype().equals("Int")){
                            if (loc.gettype().equals(e.gettype())){
                                System.out.println("Asignacion correcta");
                           }
                           else {
                                System.out.println("La variable " + loc.getIdentifier() + "no es del mismo type del valor asignado");
                                System.exit(0);
                            }
                        }
                        else {
                            System.out.println("No se puede realizar la operacion -= con booleanos");
                            System.exit(0);
                        }

                    }
                    else {
                        System.out.println("La variable " + loc.getIdentifier() + ",no existe");
                        System.exit(0);
                    }
                }
                
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= Boolean 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        tmp.setValor("Boolean");
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= Int 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        tmp.setValor("Int");
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_decl_coma_id ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_decl_coma_id ::= Coma Id var_decl_coma_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("var_decl_coma_id");
                tmp.setllamada("variable");
                tmp.settype(parser.TABLA.BANDERAS.get("Type"));
                if (tmp.gettype().equals("Boolean")){ tmp.setValor("True");} else {tmp.setValor("0");}
                if (tmp.gettype().equals("Boolean")){ tmp.setmemoria(1);} else {tmp.setmemoria(4);}
                
                tmp.setIdentifier(id + "");
                tmp.setLocation(idright + 1);
                tmp.setscope(parser.global_scope);
                tmp.setValor("0");
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE LAS COMAS var_decl: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                }
                else {
                    System.out.println("La variable " + tmp.getIdentifier() + ", esta repetida");
                    System.exit(0);
                }
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decl ::= type Id NT$4 var_decl_coma_id Punto_coma var_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            Nodo tmp = new Nodo("var decl");                
            Nodo ty = (Nodo) t;
            tmp.setllamada("variable");
            parser.TABLA.BANDERAS.replace("Type", ty.getValor());
            tmp.settype(ty.getValor());
            tmp.setIdentifier(id + "");
            tmp.setscope(parser.global_scope);
            tmp.setValor("0");
            if (tmp.gettype().equals("Boolean")){ tmp.setValor("True");} else {tmp.setValor("0");}
            if (tmp.gettype().equals("Boolean")){ tmp.setmemoria(1);} else {tmp.setmemoria(4);}
            tmp.setLocation(idright + 1);
            int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
            System.out.println("La bandera trae: " + bandera);
            if (bandera == 2){
                System.out.println("La variable " + tmp.getIdentifier() + ", se guardará");
                parser.TABLA.insertSymbol(tmp, parser.global_scope);
            }
            else {
                System.out.println("La variable " + tmp.getIdentifier() + ",está repetida");
                System.exit(0);
            }
            RESULT = tmp;
    
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= Llave_A var_decl statement Llave_C 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("block");
        



        // ultimo
        
        parser.TABLA.popScope(parser.global_scope);
        parser.global_scope = parser.global_scope - 1;
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_decl_corche_coma_type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl_corche_coma_type ::= Coma type Id method_decl_corche_coma_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_decl_corche_coma_type");

        tmp.setllamada("variable");
        Nodo ty = (Nodo) t;
        tmp.settype(ty.getValor());
        tmp.setIdentifier(id + "");
        if (tmp.gettype().equals("Int")) 
        { 
            tmp.setValor("0"); 
        } 
        else 
        { 
            tmp.setValor("True"); 
        }
        tmp.setLocation(idright + 1);
        if (tmp.gettype().equals("Int")){ tmp.setmemoria(4); } else { tmp.setmemoria(1); }
        
        tmp.setscope(parser.global_scope);
        tmp.setfuncion(parser.TABLA.BANDERAS.get("Funcion"));
        

        System.out.println("DESDE variables del metodo el resto: La variable" + tmp.getIdentifier() + ", se guardará");
        parser.TABLA.insertSymbol_m(tmp);
        RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl_corche ::= type Id NT$3 method_decl_corche_coma_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Nodo tmp = new Nodo("method_decl_corche");

        tmp.setllamada("variable");
        Nodo ty = (Nodo) t;
        tmp.settype(ty.getValor());
        tmp.setIdentifier(id + "");
        if (tmp.gettype().equals("Int")){ tmp.setValor("0"); } else { tmp.setValor("True"); }
        tmp.setLocation(idright + 1);
        if (tmp.gettype().equals("Int")){ tmp.setmemoria(4);} else { tmp.setmemoria(1); }
        
        System.out.print("El global_scope es: " + parser.global_scope);
        System.out.print("El Funcion guardado es: " + parser.TABLA.BANDERAS.get("Funcion"));
        tmp.setscope(parser.global_scope);
        tmp.setfuncion(parser.TABLA.BANDERAS.get("Funcion"));
        

        System.out.println("DESDE variables del metodo: La variable " + tmp.getIdentifier() + ", se guardará");
        parser.TABLA.insertSymbol_m(tmp);
        
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl ::= Void Id NT$2 LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;


                Nodo tmp = new Nodo("method_decl");
                tmp.setllamada("Metodo");
                tmp.settype("Void");
                tmp.setIdentifier(id + "");
                tmp.setValor(""); 
                tmp.setLocation(idright + 1);
                tmp.setmemoria(0);
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE METHOD VOID: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                    parser.TABLA.BANDERAS.replace("Funcion", tmp.getIdentifier());
                    parser.TABLA.BANDERAS.replace("Funcion_type", tmp.gettype());
                }
                else {
                    System.out.println("El nombre del método esta repetido:  " + tmp.getIdentifier());
                    System.exit(0);
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl ::= type Id NT$1 LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("method_decl");
                tmp.setllamada("Metodo");
                Nodo ty = (Nodo) t;
                System.out.println("El valor es: " + ty.getValor());
                tmp.settype(ty.getValor());
                tmp.setIdentifier(id + "");
                if (tmp.gettype().equals("Int")){ tmp.setValor("0"); } else { tmp.setValor("True"); }
                tmp.setLocation(idright + 1);
                if (tmp.gettype().equals("Int")){ tmp.setmemoria(4);} else { tmp.setmemoria(1); }
                tmp.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(tmp, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE METHOD: La variable " + tmp.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(tmp, parser.global_scope);
                    parser.TABLA.BANDERAS.replace("Funcion", tmp.getIdentifier());
                    parser.TABLA.BANDERAS.replace("Funcion_type", tmp.gettype());
                }
                else {
                    System.out.println("El nombre del metodo esta repetido " + tmp.getIdentifier());
                    System.exit(0);
                }
                parser.global_scope = parser.global_scope + 1;
                parser.TABLA.pushScope(parser.global_scope);
                RESULT = tmp;



                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_decl_coma_field ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl_coma_field ::= Coma field_name field_decl_coma_field 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("field_decl_coma_field");
                
                Nodo field = (Nodo) fn;
                field.settype(parser.TABLA.BANDERAS.get("Type"));
                if (field.gettype().equals("Boolean")){ field.setValor("True");}
                if (field.gettype().equals("Int")){ field.setmemoria(field.getmemoria() * 4);} else { field.setmemoria(field.getmemoria() * 1); }
                field.setscope(parser.global_scope);
                int bandera = parser.TABLA.lookup_f(field, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("DESDE LAS COMAS: La variable " + field.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(field, parser.global_scope);
                }
                else {
                    System.out.println("La variable " + field.getIdentifier() + ", esta repetida");
                    System.exit(0);
                }
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl ::= field_decl type field_name NT$0 field_decl_coma_field Punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                Nodo tmp = new Nodo("field decl");
                Nodo field = (Nodo) fn;
                if (parser.global_scope != 0){
                    System.out.println("MAS DE 1 SCOPE");
                }
                else {
                    System.out.println("HACER EL 1 SCOPE");
                    System.out.println("La cree con: " + field.getIdentifier());
                    parser.global_scope = parser.global_scope + 1;
                    parser.TABLA.pushScope(parser.global_scope);
                    
                
                }
                
                
                Nodo ty = (Nodo) t;
                parser.TABLA.BANDERAS.replace("Type", ty.getValor());
                field.settype(ty.getValor());
                field.setscope(parser.global_scope);
                if (field.gettype().equals("Boolean")){ field.setValor("True");}
                if (field.gettype().equals("Int")){ field.setmemoria(field.getmemoria() * 4);} else { field.setmemoria(field.getmemoria() * 1); }
                int bandera = parser.TABLA.lookup_f(field, parser.global_scope);
                System.out.println("La bandera trae: " + bandera);
                if (bandera == 2){
                    System.out.println("La variable " + field.getIdentifier() + ", se guardará");
                    parser.TABLA.insertSymbol(field, parser.global_scope);
                }
                else {
                    System.out.println("La variable " + field.getIdentifier() + " ya existe");
                    System.exit(0);
                }
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_name ::= Id Corche_A int_literal Corche_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Nodo tmp = new Nodo("field_name_vector");
            
            tmp.setllamada("vector");
            tmp.setIdentifier(id + "");
            tmp.setValor("0");
            tmp.setLocation(idright + 1);
            Nodo inl = (Nodo) il;
            try {
                tmp.setmemoria(Integer.valueOf(inl.getValor()));
                }
            catch(Exception es){
                System.out.println(es);
                }
            
            RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_name ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            
            Nodo tmp = new Nodo("field_name_id");
            tmp.setllamada("variable");
            tmp.setIdentifier(id + "");
            tmp.setValor("0");
            tmp.setLocation(idright + 1);
            tmp.setmemoria(1);
            RESULT = tmp;
            
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Class Program Llave_A field_decl method_decl Llave_C 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		

            Nodo tmp = new Nodo("program");
            Nodo class_ = new Nodo("class");
            class_.setValor("class");
            class_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) class_);
            
            Nodo pr = new Nodo("Program");
            pr.setValor("Program");
            pr.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) pr);

            Nodo llavea = new Nodo("Llave_A");
            llavea.setValor("Llave_A");
            llavea.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavea);

            tmp.addHijo((Nodo) fd);
            tmp.addHijo((Nodo) md);

            Nodo llavec = new Nodo("Llave_C");
            llavec.setValor("Llave_C");
            llavec.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavec);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= program 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) s);
            parser.padre = (Nodo) tmp;
            System.out.println("Correcto");
            RESULT=tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

