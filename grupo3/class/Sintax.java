
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 20 19:20:02 CST 2022
//----------------------------------------------------

package compiler.parser;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 20 19:20:02 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\037\003\000\002\037\006\000\002\004\007" +
    "\000\002\004\002\000\002\045\005\000\002\045\002\000" +
    "\002\005\011\000\002\005\011\000\002\005\002\000\002" +
    "\040\005\000\002\040\002\000\002\041\006\000\002\041" +
    "\002\000\002\006\003\000\002\006\003\000\002\007\006" +
    "\000\002\010\007\000\002\010\002\000\002\042\005\000" +
    "\002\042\002\000\002\011\003\000\002\011\003\000\002" +
    "\012\007\000\002\012\005\000\002\012\011\000\002\012" +
    "\012\000\002\012\006\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\012\002\000\002\043\004\000" +
    "\002\043\002\000\002\044\003\000\002\044\002\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\016\007\000\002\046\004\000\002\046\002" +
    "\000\002\047\005\000\002\047\002\000\002\050\005\000" +
    "\002\050\002\000\002\051\005\000\002\051\002\000\002" +
    "\017\003\000\002\020\003\000\002\020\006\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\005\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\002\000" +
    "\002\013\004\000\002\014\004\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\020\005\001\002\000\004\002\000\001" +
    "\002\000\004\021\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\053\011\001\002\000" +
    "\012\004\ufffb\005\ufffb\017\ufffb\054\ufffb\001\002\000\012" +
    "\004\016\005\017\017\013\054\ufff6\001\002\000\004\023" +
    "\021\001\002\000\004\054\264\001\002\000\004\023\021" +
    "\001\002\000\004\023\uffea\001\002\000\004\023\uffe9\001" +
    "\002\000\012\043\040\045\ufffe\055\031\057\ufffe\001\002" +
    "\000\062\024\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002" +
    "\000\006\045\ufff9\057\023\001\002\000\004\023\021\001" +
    "\002\000\004\045\025\001\002\000\012\004\ufffc\005\ufffc" +
    "\017\ufffc\054\ufffc\001\002\000\010\045\ufffe\055\031\057" +
    "\ufffe\001\002\000\006\045\ufff9\057\023\001\002\000\004" +
    "\045\ufffa\001\002\000\006\026\032\027\034\001\002\000" +
    "\046\030\uffae\031\uffae\032\uffae\033\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\056\uffae\057\uffae\001\002" +
    "\000\004\056\035\001\002\000\046\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\037\uffad\040\uffad\041\uffad\042\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\056\uffad\057\uffad\001\002\000\006\045\ufffd\057\ufffd" +
    "\001\002\000\062\024\037\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\001\002\000\062\024\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\001\002\000\010\004\016\005\017\044\ufff4\001\002\000" +
    "\004\023\021\001\002\000\004\044\043\001\002\000\004" +
    "\053\044\001\002\000\030\004\016\005\017\006\uffed\007" +
    "\uffed\010\uffed\012\uffed\013\uffed\014\uffed\023\uffed\053\uffed" +
    "\054\uffed\001\002\000\012\004\016\005\017\017\013\054" +
    "\ufff6\001\002\000\004\054\ufff8\001\002\000\004\023\021" +
    "\001\002\000\004\043\040\001\002\000\004\023\021\001" +
    "\002\000\024\006\053\007\060\010\064\012\056\013\055" +
    "\014\061\023\021\053\044\054\uffe0\001\002\000\004\043" +
    "\216\001\002\000\004\045\214\001\002\000\004\045\212" +
    "\001\002\000\030\006\053\015\076\016\101\023\021\026" +
    "\032\027\034\043\103\045\uffdc\047\106\060\102\061\100" +
    "\001\002\000\004\043\176\001\002\000\004\043\166\001" +
    "\002\000\004\045\164\001\002\000\060\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffce\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\161\056" +
    "\uffcd\057\uffcd\001\002\000\024\006\053\007\060\010\064" +
    "\012\056\013\055\014\061\023\021\053\044\054\uffe0\001" +
    "\002\000\004\023\021\001\002\000\004\054\150\001\002" +
    "\000\010\034\070\035\072\036\067\001\002\000\026\006" +
    "\uffd9\015\uffd9\016\uffd9\023\uffd9\026\uffd9\027\uffd9\043\uffd9" +
    "\047\uffd9\060\uffd9\061\uffd9\001\002\000\026\006\uffda\015" +
    "\uffda\016\uffda\023\uffda\026\uffda\027\uffda\043\uffda\047\uffda" +
    "\060\uffda\061\uffda\001\002\000\026\006\053\015\076\016" +
    "\101\023\021\026\032\027\034\043\103\047\106\060\102" +
    "\061\100\001\002\000\026\006\uffdb\015\uffdb\016\uffdb\023" +
    "\uffdb\026\uffdb\027\uffdb\043\uffdb\047\uffdb\060\uffdb\061\uffdb" +
    "\001\002\000\046\030\uffca\031\uffca\032\uffca\033\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\056\uffca\057" +
    "\uffca\001\002\000\046\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\056\uffcb" +
    "\057\uffcb\001\002\000\036\030\123\031\132\032\115\033" +
    "\121\037\117\040\122\041\111\042\114\045\146\046\116" +
    "\047\130\050\131\051\127\052\120\001\002\000\046\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\056\uffac\057\uffac\001\002\000\046" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\056\uffb0\057\uffb0\001\002\000" +
    "\024\022\142\023\140\030\141\031\144\046\116\047\130" +
    "\050\131\051\127\052\120\001\002\000\046\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\056\uffab\057\uffab\001\002\000\026\006\053" +
    "\015\076\016\101\023\021\026\032\027\034\043\103\047" +
    "\106\060\102\061\100\001\002\000\026\006\053\015\076" +
    "\016\101\023\021\026\032\027\034\043\103\047\106\060" +
    "\102\061\100\001\002\000\046\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\056\uffaf\057\uffaf\001\002\000\046\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\056\uffb1\057\uffb1\001\002\000\026\006\053\015\076" +
    "\016\101\023\021\026\032\027\034\043\103\047\106\060" +
    "\102\061\100\001\002\000\046\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\056\uffc9\057\uffc9\001\002\000\046\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\056\uffc7\057\uffc7\001\002\000\026\006\uffb3\015\uffb3" +
    "\016\uffb3\023\uffb3\026\uffb3\027\uffb3\043\uffb3\047\uffb3\060" +
    "\uffb3\061\uffb3\001\002\000\026\006\053\015\076\016\101" +
    "\023\021\026\032\027\034\043\103\047\106\060\102\061" +
    "\100\001\002\000\026\006\uffc0\015\uffc0\016\uffc0\023\uffc0" +
    "\026\uffc0\027\uffc0\043\uffc0\047\uffc0\060\uffc0\061\uffc0\001" +
    "\002\000\026\006\uffb2\015\uffb2\016\uffb2\023\uffb2\026\uffb2" +
    "\027\uffb2\043\uffb2\047\uffb2\060\uffb2\061\uffb2\001\002\000" +
    "\026\006\uffb7\015\uffb7\016\uffb7\023\uffb7\026\uffb7\027\uffb7" +
    "\043\uffb7\047\uffb7\060\uffb7\061\uffb7\001\002\000\046\006" +
    "\uffbe\015\uffbe\016\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\043\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\026" +
    "\006\uffb5\015\uffb5\016\uffb5\023\uffb5\026\uffb5\027\uffb5\043" +
    "\uffb5\047\uffb5\060\uffb5\061\uffb5\001\002\000\046\006\uffba" +
    "\015\uffba\016\uffba\022\uffba\023\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\043\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\060\uffba\061\uffba\062\uffba\001\002\000\026\006" +
    "\uffb6\015\uffb6\016\uffb6\023\uffb6\026\uffb6\027\uffb6\043\uffb6" +
    "\047\uffb6\060\uffb6\061\uffb6\001\002\000\026\006\uffb4\015" +
    "\uffb4\016\uffb4\023\uffb4\026\uffb4\027\uffb4\043\uffb4\047\uffb4" +
    "\060\uffb4\061\uffb4\001\002\000\026\006\uffb9\015\uffb9\016" +
    "\uffb9\023\uffb9\026\uffb9\027\uffb9\043\uffb9\047\uffb9\060\uffb9" +
    "\061\uffb9\001\002\000\026\006\uffc1\015\uffc1\016\uffc1\023" +
    "\uffc1\026\uffc1\027\uffc1\043\uffc1\047\uffc1\060\uffc1\061\uffc1" +
    "\001\002\000\026\006\uffc2\015\uffc2\016\uffc2\023\uffc2\026" +
    "\uffc2\027\uffc2\043\uffc2\047\uffc2\060\uffc2\061\uffc2\001\002" +
    "\000\026\006\uffbf\015\uffbf\016\uffbf\023\uffbf\026\uffbf\027" +
    "\uffbf\043\uffbf\047\uffbf\060\uffbf\061\uffbf\001\002\000\046" +
    "\006\uffbb\015\uffbb\016\uffbb\022\uffbb\023\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000" +
    "\046\006\uffbd\015\uffbd\016\uffbd\022\uffbd\023\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\043\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002" +
    "\000\046\006\uffbc\015\uffbc\016\uffbc\022\uffbc\023\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\043\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\060\uffbc\061\uffbc\062\uffbc\001" +
    "\002\000\026\006\uffb8\015\uffb8\016\uffb8\023\uffb8\026\uffb8" +
    "\027\uffb8\043\uffb8\047\uffb8\060\uffb8\061\uffb8\001\002\000" +
    "\046\030\123\031\132\032\115\033\121\037\117\040\122" +
    "\041\111\042\114\044\uffc8\045\uffc8\046\116\047\130\050" +
    "\131\051\127\052\120\053\uffc8\056\uffc8\057\uffc8\001\002" +
    "\000\036\030\123\031\132\032\115\033\121\037\117\040" +
    "\122\041\111\042\114\044\135\046\116\047\130\050\131" +
    "\051\127\052\120\001\002\000\046\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\056\uffc5\057\uffc5\001\002\000\046\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\044" +
    "\uffc6\045\uffc6\046\116\047\130\050\131\051\127\052\120" +
    "\053\uffc6\056\uffc6\057\uffc6\001\002\000\004\061\145\001" +
    "\002\000\004\061\uffa9\001\002\000\004\061\uffa5\001\002" +
    "\000\004\061\uffa8\001\002\000\004\061\uffa7\001\002\000" +
    "\004\061\uffa6\001\002\000\046\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\056\uffaa\057\uffaa\001\002\000\024\006\053\007\060\010" +
    "\064\012\056\013\055\014\061\023\021\053\044\054\uffe0" +
    "\001\002\000\004\054\uffe8\001\002\000\034\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\017\uffef\023\uffef\053\uffef\054\uffef\001\002\000" +
    "\004\035\152\001\002\000\026\006\053\015\076\016\101" +
    "\023\021\026\032\027\034\043\103\047\106\060\102\061" +
    "\100\001\002\000\036\030\123\031\132\032\115\033\121" +
    "\037\117\040\122\041\111\042\114\046\116\047\130\050" +
    "\131\051\127\052\120\057\154\001\002\000\026\006\053" +
    "\015\076\016\101\023\021\026\032\027\034\043\103\047" +
    "\106\060\102\061\100\001\002\000\036\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\046" +
    "\116\047\130\050\131\051\127\052\120\053\044\001\002" +
    "\000\024\006\053\007\060\010\064\012\056\013\055\014" +
    "\061\023\021\053\044\054\uffe0\001\002\000\004\054\uffe5" +
    "\001\002\000\004\054\uffe1\001\002\000\026\006\053\015" +
    "\076\016\101\023\021\026\032\027\034\043\103\047\106" +
    "\060\102\061\100\001\002\000\036\030\123\031\132\032" +
    "\115\033\121\037\117\040\122\041\111\042\114\046\116" +
    "\047\130\050\131\051\127\052\120\056\163\001\002\000" +
    "\054\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\056\uffcc\057\uffcc\001\002\000\024\006\053\007\060\010" +
    "\064\012\056\013\055\014\061\023\021\053\044\054\uffe0" +
    "\001\002\000\004\054\uffe2\001\002\000\026\006\053\015" +
    "\076\016\101\023\021\026\032\027\034\043\103\047\106" +
    "\060\102\061\100\001\002\000\036\030\123\031\132\032" +
    "\115\033\121\037\117\040\122\041\111\042\114\044\170" +
    "\046\116\047\130\050\131\051\127\052\120\001\002\000" +
    "\004\053\044\001\002\000\026\006\uffde\007\uffde\010\uffde" +
    "\011\173\012\uffde\013\uffde\014\uffde\023\uffde\053\uffde\054" +
    "\uffde\001\002\000\024\006\053\007\060\010\064\012\056" +
    "\013\055\014\061\023\021\053\044\054\uffe0\001\002\000" +
    "\004\053\044\001\002\000\024\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\023\uffdf\053\uffdf\054\uffdf\001" +
    "\002\000\004\054\uffe6\001\002\000\030\006\053\015\076" +
    "\016\101\023\021\026\032\027\034\043\103\044\uffd5\047" +
    "\106\060\102\061\100\001\002\000\040\030\123\031\132" +
    "\032\115\033\121\037\117\040\122\041\111\042\114\044" +
    "\uffd3\046\116\047\130\050\131\051\127\052\120\057\202" +
    "\001\002\000\004\044\201\001\002\000\046\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\056\uffd8\057\uffd8\001\002\000\026\006\053" +
    "\015\076\016\101\023\021\026\032\027\034\043\103\047" +
    "\106\060\102\061\100\001\002\000\004\044\uffd6\001\002" +
    "\000\040\030\123\031\132\032\115\033\121\037\117\040" +
    "\122\041\111\042\114\044\uffd3\046\116\047\130\050\131" +
    "\051\127\052\120\057\202\001\002\000\004\044\uffd4\001" +
    "\002\000\036\030\123\031\132\032\115\033\121\037\117" +
    "\040\122\041\111\042\114\045\uffdd\046\116\047\130\050" +
    "\131\051\127\052\120\001\002\000\004\045\210\001\002" +
    "\000\024\006\053\007\060\010\064\012\056\013\055\014" +
    "\061\023\021\053\044\054\uffe0\001\002\000\004\054\uffe4" +
    "\001\002\000\024\006\053\007\060\010\064\012\056\013" +
    "\055\014\061\023\021\053\044\054\uffe0\001\002\000\004" +
    "\054\uffe3\001\002\000\024\006\053\007\060\010\064\012" +
    "\056\013\055\014\061\023\021\053\044\054\uffe0\001\002" +
    "\000\004\054\uffe7\001\002\000\004\062\217\001\002\000" +
    "\026\022\236\023\233\030\235\031\240\046\116\047\130" +
    "\050\131\051\127\052\120\062\uff9e\001\002\000\006\044" +
    "\uffd1\057\221\001\002\000\030\006\053\015\076\016\101" +
    "\023\021\026\032\027\034\043\103\047\106\060\102\061" +
    "\100\062\217\001\002\000\004\044\223\001\002\000\046" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\056\uffd7\057\uffd7\001\002\000" +
    "\040\030\123\031\132\032\115\033\121\037\117\040\122" +
    "\041\111\042\114\044\uffc4\046\116\047\130\050\131\051" +
    "\127\052\120\057\uffc4\001\002\000\006\044\uffc3\057\uffc3" +
    "\001\002\000\006\044\uffcf\057\227\001\002\000\030\006" +
    "\053\015\076\016\101\023\021\026\032\027\034\043\103" +
    "\047\106\060\102\061\100\062\217\001\002\000\004\044" +
    "\uffd2\001\002\000\006\044\uffcf\057\227\001\002\000\004" +
    "\044\uffd0\001\002\000\026\022\236\023\233\030\235\031" +
    "\240\046\116\047\130\050\131\051\127\052\120\062\uff9e" +
    "\001\002\000\004\062\245\001\002\000\026\022\236\023" +
    "\233\030\235\031\240\046\116\047\130\050\131\051\127" +
    "\052\120\062\uff9e\001\002\000\026\022\236\023\233\030" +
    "\235\031\240\046\116\047\130\050\131\051\127\052\120" +
    "\062\uff9e\001\002\000\026\022\236\023\233\030\235\031" +
    "\240\046\116\047\130\050\131\051\127\052\120\062\uff9e" +
    "\001\002\000\026\022\236\023\233\030\235\031\240\046" +
    "\116\047\130\050\131\051\127\052\120\062\uff9e\001\002" +
    "\000\004\062\uffa0\001\002\000\004\062\uffa1\001\002\000" +
    "\004\062\uffa2\001\002\000\004\062\uff9f\001\002\000\006" +
    "\044\uffa4\057\uffa4\001\002\000\004\062\uffa3\001\002\000" +
    "\006\045\uffeb\057\251\001\002\000\004\045\254\001\002" +
    "\000\004\023\021\001\002\000\006\045\uffeb\057\251\001" +
    "\002\000\004\045\uffec\001\002\000\030\004\016\005\017" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\023" +
    "\uffed\053\uffed\054\uffed\001\002\000\024\006\uffee\007\uffee" +
    "\010\uffee\012\uffee\013\uffee\014\uffee\023\uffee\053\uffee\054" +
    "\uffee\001\002\000\006\044\ufff2\057\257\001\002\000\006" +
    "\004\016\005\017\001\002\000\004\044\ufff5\001\002\000" +
    "\004\023\021\001\002\000\006\044\ufff2\057\257\001\002" +
    "\000\004\044\ufff3\001\002\000\004\002\uffff\001\002\000" +
    "\004\043\266\001\002\000\010\004\016\005\017\044\ufff4" +
    "\001\002\000\004\044\270\001\002\000\004\053\044\001" +
    "\002\000\012\004\016\005\017\017\013\054\ufff6\001\002" +
    "\000\004\054\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\006\005" +
    "\013\011\014\001\001\000\004\013\264\001\001\000\002" +
    "\001\001\000\006\013\017\037\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\035" +
    "\001\001\000\004\045\023\001\001\000\006\013\025\037" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\027\001\001\000\002\001\001\000" +
    "\004\031\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\040\040\041\001\001\000\004" +
    "\013\255\001\001\000\002\001\001\000\004\007\044\001" +
    "\001\000\006\010\051\011\050\001\001\000\006\005\045" +
    "\011\046\001\001\000\002\001\001\000\004\013\047\001" +
    "\001\000\002\001\001\000\004\013\246\001\001\000\016" +
    "\007\062\012\064\013\061\016\053\017\056\020\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\061\016\072\017\056\020\073\021\205\030" +
    "\106\031\104\032\103\033\076\044\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\062\012\157\013\061\016\053\017\056" +
    "\020\065\001\001\000\004\013\150\001\001\000\002\001" +
    "\001\000\004\015\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\013\061\016\072\017\056\020\073\021" +
    "\074\030\106\031\104\032\103\033\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\111\024\124\025\123\026\112\027\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\142\034\136\001" +
    "\001\000\002\001\001\000\024\013\061\016\072\017\056" +
    "\020\073\021\135\030\106\031\104\032\103\033\076\001" +
    "\001\000\024\013\061\016\072\017\056\020\073\021\133" +
    "\030\106\031\104\032\103\033\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\061\016\072\017\056" +
    "\020\073\021\107\030\106\031\104\032\103\033\076\001" +
    "\001\000\002\001\001\000\014\023\111\024\124\025\123" +
    "\026\112\027\125\001\001\000\002\001\001\000\024\013" +
    "\061\016\072\017\056\020\073\021\132\030\106\031\104" +
    "\032\103\033\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\111\024\124\025\123" +
    "\026\112\027\125\001\001\000\014\023\111\024\124\025" +
    "\123\026\112\027\125\001\001\000\002\001\001\000\014" +
    "\023\111\024\124\025\123\026\112\027\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\062\012\146\013\061\016\053\017\056" +
    "\020\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\013\061\016\072\017\056\020\073" +
    "\021\152\030\106\031\104\032\103\033\076\001\001\000" +
    "\014\023\111\024\124\025\123\026\112\027\125\001\001" +
    "\000\024\013\061\016\072\017\056\020\073\021\154\030" +
    "\106\031\104\032\103\033\076\001\001\000\016\007\155" +
    "\023\111\024\124\025\123\026\112\027\125\001\001\000" +
    "\016\007\062\012\156\013\061\016\053\017\056\020\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\013" +
    "\061\016\072\017\056\020\073\021\161\030\106\031\104" +
    "\032\103\033\076\001\001\000\014\023\111\024\124\025" +
    "\123\026\112\027\125\001\001\000\002\001\001\000\016" +
    "\007\062\012\164\013\061\016\053\017\056\020\065\001" +
    "\001\000\002\001\001\000\024\013\061\016\072\017\056" +
    "\020\073\021\166\030\106\031\104\032\103\033\076\001" +
    "\001\000\014\023\111\024\124\025\123\026\112\027\125" +
    "\001\001\000\004\007\170\001\001\000\004\043\171\001" +
    "\001\000\016\007\062\012\174\013\061\016\053\017\056" +
    "\020\065\001\001\000\004\007\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\013\061\016\072\017\056" +
    "\020\073\021\176\030\106\031\104\032\103\033\076\046" +
    "\177\001\001\000\016\023\111\024\124\025\123\026\112" +
    "\027\125\047\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\013\061\016\072\017\056\020\073\021\203" +
    "\030\106\031\104\032\103\033\076\001\001\000\002\001" +
    "\001\000\016\023\111\024\124\025\123\026\112\027\125" +
    "\047\204\001\001\000\002\001\001\000\014\023\111\024" +
    "\124\025\123\026\112\027\125\001\001\000\002\001\001" +
    "\000\016\007\062\012\210\013\061\016\053\017\056\020" +
    "\065\001\001\000\002\001\001\000\016\007\062\012\212" +
    "\013\061\016\053\017\056\020\065\001\001\000\002\001" +
    "\001\000\016\007\062\012\214\013\061\016\053\017\056" +
    "\020\065\001\001\000\002\001\001\000\004\035\217\001" +
    "\001\000\006\024\236\036\233\001\001\000\004\050\221" +
    "\001\001\000\030\013\061\016\072\017\056\020\073\021" +
    "\223\022\225\030\106\031\104\032\103\033\076\035\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\111\024\124\025\123\026\112\027\125\001\001\000\002" +
    "\001\001\000\004\051\227\001\001\000\030\013\061\016" +
    "\072\017\056\020\073\021\223\022\230\030\106\031\104" +
    "\032\103\033\076\035\224\001\001\000\002\001\001\000" +
    "\004\051\231\001\001\000\002\001\001\000\006\024\236" +
    "\036\245\001\001\000\002\001\001\000\006\024\236\036" +
    "\243\001\001\000\006\024\236\036\242\001\001\000\006" +
    "\024\236\036\241\001\001\000\006\024\236\036\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\247\001\001\000\002\001\001\000\004\013\251" +
    "\001\001\000\004\042\252\001\001\000\002\001\001\000" +
    "\006\010\254\011\050\001\001\000\002\001\001\000\004" +
    "\041\257\001\001\000\004\011\260\001\001\000\002\001" +
    "\001\000\004\013\261\001\001\000\004\041\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\040\040\266\001\001\000\002\001\001\000\004" +
    "\007\270\001\001\000\006\005\271\011\046\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public void syntax_error(Symbol s){
        //this.s = s;
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna: " +(s.left)+ ". Identificador " +s.value + " no reconocido." + "el type: " + s.sym);
    }
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Alpm ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alpm",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Alpm ::= Alpm Alpha_num 
            {
              Object RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Nodo tmp = new Nodo("Alpm");
    tmp.addHijo((Nodo) ass);
    Nodo Alpha_num_ = new Nodo("Alpha_num");
    Alpha_num_.setValor("Alpha_num");
    Alpha_num_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) Alpha_num_);
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp; 


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alpm",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Id ::= Alpha Alpm 
            {
              Object RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("Id");
    Nodo Alpha_ = new Nodo("Alpha");
    Alpha_.setValor("Alpha");
    Alpha_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) Alpha_);
    tmp.addHijo((Nodo) ass);
    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Id",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // char_asterisco ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // char_asterisco ::= GREATER char_asterisco 
            {
              Object RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("char_asterisco");
    Nodo greater_ = new Nodo("GREATER");
    greater_.setValor("GREATER");
    greater_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) greater_);

    tmp.addHijo((Nodo) cha);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // char_asterisco ::= LESS char_asterisco 
            {
              Object RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("char_asterisco");
    Nodo less_ = new Nodo("LESS");
    less_.setValor("LESS");
    less_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) less_);

    tmp.addHijo((Nodo) cha);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // char_asterisco ::= arith_op char_asterisco 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("char_asterisco");
    
    tmp.addHijo((Nodo) ao);
    tmp.addHijo((Nodo) cha);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // char_asterisco ::= Digit char_asterisco 
            {
              Object RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("char_asterisco");
    Nodo digit_ = new Nodo("digit");
    digit_.setValor("digit");
    digit_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) digit_);

    tmp.addHijo((Nodo) cha);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // char_asterisco ::= Alpha char_asterisco 
            {
              Object RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("char_asterisco");
    Nodo alpha_ = new Nodo("Alpha");
    alpha_.setValor("Alpha");
    alpha_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) alpha_);

    tmp.addHijo((Nodo) cha);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_asterisco",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // string_literal ::= ComillasDoble char_asterisco ComillasDoble 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Nodo tmp = new Nodo("string_literal");
    Nodo comillas_doble_ = new Nodo("ComillasDoble");
    comillas_doble_.setValor("ComillasDoble");
    comillas_doble_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) comillas_doble_);

    tmp.addHijo((Nodo) ca);

    Nodo comillas_doble_2 = new Nodo("ComillasDoble");
    comillas_doble_2.setValor("ComillasDoble");
    comillas_doble_2.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) comillas_doble_2);


    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("string_literal",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // char ::= GREATER 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("char");
    Nodo greater_ = new Nodo("GREATER");
    greater_.setValor("GREATER");
    greater_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) greater_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // char ::= LESS 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("char");
    Nodo less_ = new Nodo("LESS");
    less_.setValor("LESS");
    less_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) less_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // char ::= arith_op 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("char");
    tmp.addHijo((Nodo) ao);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // char ::= Digit 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("char");
    Nodo digit_ = new Nodo("Digit");
    digit_.setValor("Digit");
    digit_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) digit_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // char ::= Alpha 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("char");
    Nodo alpha_ = new Nodo("Alpha");
    alpha_.setValor("Alpha");
    alpha_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) alpha_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // char_literal ::= Comillas char Comillas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Nodo tmp = new Nodo("char_literal");
    Nodo comillas_ = new Nodo("Comillas");
    comillas_.setValor("Comillas");
    comillas_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) comillas_);

    tmp.addHijo((Nodo) c);

    Nodo comillas_2 = new Nodo("Comillas");
    comillas_2.setValor("Comillas");
    comillas_2.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) comillas_2);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("char_literal",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bool_literal ::= False 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    Nodo false_ = new Nodo("False");
    false_.setValor("False");
    false_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) false_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bool_literal ::= True 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("bool_literal");
    Nodo true_ = new Nodo("True");
    true_.setValor("True");
    true_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) true_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bool_literal",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // int_literal ::= Hex_literal 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("int_literal");
    Nodo hex_literal_ = new Nodo("Hex_literal");
    hex_literal_.setValor("Hex_literal");
    hex_literal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) hex_literal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // int_literal ::= Decimal_literal 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("int_literal");
    Nodo decimal_literal_ = new Nodo("Decimal_literal");
    decimal_literal_.setValor("Decimal_literal");
    decimal_literal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) decimal_literal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("int_literal",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= bool_literal 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    tmp.addHijo((Nodo) bl);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= char_literal 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    tmp.addHijo((Nodo) cl);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= int_literal 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Nodo tmp = new Nodo("literal");
    tmp.addHijo((Nodo) il);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond_op ::= OR 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("cond_op");
    Nodo or_ = new Nodo("OR");
    or_.setValor("OR");
    or_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) or_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond_op ::= AND 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("cond_op");
    Nodo and_ = new Nodo("AND");
    and_.setValor("AND");
    and_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) and_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cond_op",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // eq_op ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("eq_op");
    Nodo not_equal_ = new Nodo("NOT_EQUAL");
    not_equal_.setValor("NOT_EQUAL");
    not_equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) not_equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // eq_op ::= EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("eq_op");
    Nodo equal_ = new Nodo("EQUAL");
    equal_.setValor("EQUAL");
    equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("eq_op",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rel_op ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("rel_op");
    Nodo greater_equal_ = new Nodo("GREATER_EQUAL");
    greater_equal_.setValor("GREATER_EQUAL");
    greater_equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) greater_equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rel_op ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("rel_op");
    Nodo less_equal_ = new Nodo("LESS_EQUAL");
    less_equal_.setValor("LESS_EQUAL");
    less_equal_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) less_equal_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rel_op ::= LESS 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("rel_op");
    Nodo less_ = new Nodo("LESS");
    less_.setValor("LESS");
    less_.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo) less_);

    tmp.setNumNodo(parser.contador++);
    RESULT = tmp;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rel_op ::= GREATER 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("rel_op");
        Nodo greater_ = new Nodo("GREATER");
        greater_.setValor("GREATER");
        greater_.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) greater_);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arith_op ::= Mod 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo mod = new Nodo("Mod");
        mod.setValor("Mod");
        mod.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) mod);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arith_op ::= Division 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo division = new Nodo("Division");
        division.setValor("Division");
        division.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) division);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arith_op ::= Multiplicacion 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo multiplicacion = new Nodo("Multiplicacion");
        multiplicacion.setValor("Multiplicacion");
        multiplicacion.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) multiplicacion);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arith_op ::= Menos 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo menos = new Nodo("Menos");
        menos.setValor("Menos");
        menos.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) menos);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arith_op ::= Mas 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("arith_op");
        
        Nodo mas = new Nodo("Mas");
        mas.setValor("Mas");
        mas.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) mas);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arith_op",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bin_op ::= cond_op 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");
        
        tmp.addHijo((Nodo) co);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bin_op ::= eq_op 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");
        
        tmp.addHijo((Nodo) eo);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bin_op ::= rel_op 
            {
              Object RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");

        tmp.addHijo((Nodo) ro);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bin_op ::= arith_op 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("bin_op");

        tmp.addHijo((Nodo) ao);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bin_op",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // callout_arg ::= string_literal 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("callout_arg");

        tmp.addHijo((Nodo) sl); 

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // callout_arg ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("callout_arg");

        tmp.addHijo((Nodo) ex);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("callout_arg",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo lefp = new Nodo("LEFT_PAR");
        lefp.setValor("LEFT_PAR");
        lefp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) lefp);

        tmp.addHijo((Nodo) ex);

        Nodo rightp = new Nodo("RIGHT_PAR");
        rightp.setValor("RIGHT_PAR");
        rightp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) rightp);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= Exclamacion expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo exclamacion = new Nodo("Exclamacion");
        exclamacion.setValor("Exclamacion");
        exclamacion.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) exclamacion);

        tmp.addHijo((Nodo) ex);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= Menos expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        Nodo menos = new Nodo("Menos");
        menos.setValor("Menos");
        menos.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) menos);

        tmp.addHijo((Nodo) ex);
        
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr bin_op expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) ex);

        tmp.addHijo((Nodo) bo);

        tmp.addHijo((Nodo) ex2);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) lit);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= method_call 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) mc);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= location 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("expr");

        tmp.addHijo((Nodo) l);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // location ::= Id Corche_A expr Corche_C 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("location");
        tmp.addHijo((Nodo) ddd);

        Nodo Corche_a = new Nodo("Corche_A");
        Corche_a.setValor("Corche_A");
        Corche_a.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) Corche_a);

        tmp.addHijo((Nodo) ex);

        Nodo Corche_c = new Nodo("Corche_C");
        Corche_c.setValor("Corche_C");
        Corche_c.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) Corche_c);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // location ::= Id 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("location");

        tmp.addHijo((Nodo) ddd);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_name ::= Id 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_name");
        
        tmp.addHijo((Nodo) ddd);

        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_name",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call_coma_callout ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call_coma_callout ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_coma_callout");

                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);
                tmp.addHijo((Nodo) ca);
                tmp.addHijo((Nodo) mccc);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_coma_callout",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call_corche_dos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_call_corche_dos ::= Coma callout_arg method_call_coma_callout 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mccc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche_dos");
                
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) ca);

                tmp.addHijo((Nodo) mccc);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_dos",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call_corche_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_call_corche_expr ::= Coma expr method_call_corche_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche_expr");
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) ex);
                
                tmp.addHijo((Nodo) mcce);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche_expr",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_call_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_call_corche ::= expr method_call_corche_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mcce = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_call_corche");

                tmp.addHijo((Nodo) ex);
                
                tmp.addHijo((Nodo) mcce);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call_corche",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_call ::= Callout LEFT_PAR string_literal method_call_corche_dos RIGHT_PAR 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mccdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mccd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("method_call");
                Nodo call_out   = new Nodo("Callout");
                call_out.setValor("Callout");
                call_out.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) call_out); 

                Nodo lpar  = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 
                tmp.addHijo((Nodo) sl); 
                tmp.addHijo((Nodo) mccd); 

                Nodo rpar  = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_call ::= method_name LEFT_PAR method_call_corche RIGHT_PAR 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int mccleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mccright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mcc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("method_call");
                tmp.addHijo((Nodo) mn);
                Nodo lpar  = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 
                tmp.addHijo((Nodo) mcc);
                Nodo rpar  = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_call",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign_op ::= MINUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo mn_e  = new Nodo("MINUS_EQUAL");
                mn_e.setValor("MINUS_EQUAL");
                mn_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) mn_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_op ::= PLUS_EQUAL 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo pl_e  = new Nodo("PLUS_EQUAL");
                pl_e.setValor("PLUS_EQUAL");
                pl_e.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pl_e); 

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("assign_op");
                Nodo assing  = new Nodo("ASSIGN");
                assing.setValor("ASSIGN");
                assing.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) assing); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_op",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_expr ::= expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("statement_expr");
        tmp.addHijo((Nodo) ex);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_expr",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_else_block ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_else_block ::= Else block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("statement_else_block");
        Nodo el = new Nodo("Else");
        el.setValor("Else");
        el.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) el); 
        tmp.addHijo((Nodo) b); 
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_else_block",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= block statement 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                tmp.addHijo((Nodo) b); 
                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= Continue Punto_coma statement 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo cn = new Nodo("Continue");
                cn.setValor("Continue");
                cn.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cn); 
                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= Break Punto_coma statement 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo br = new Nodo("Break");
                br.setValor("Break");
                br.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) br); 
                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= Return statement_expr Punto_coma statement 
            {
              Object RESULT =null;
		int stmexleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stmexright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stmex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");

                Nodo rt = new Nodo("Return");
                rt.setValor("Return");
                rt.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rt); 

                tmp.addHijo((Nodo) stmex); 
                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 
                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= For Id ASSIGN expr Coma expr block statement 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo for_ = new Nodo("For");
                for_.setValor("For");
                for_.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) for_); 

                tmp.addHijo((Nodo) ddd);

                Nodo assing  = new Nodo("ASSIGN");
                assing.setValor("ASSIGN");
                assing.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) assing); 

                tmp.addHijo((Nodo) ex); 
                Nodo cm  = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm); 

                tmp.addHijo((Nodo) ex2); 
                tmp.addHijo((Nodo) b); 
                tmp.addHijo((Nodo) stm); 
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= If LEFT_PAR expr RIGHT_PAR block statement_else_block statement 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sebleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sebright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                Nodo if_ = new Nodo("If");
                if_.setValor("If");
                if_.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) if_); 

                Nodo lpar = new Nodo("LEFT_PAR");
                lpar.setValor("LEFT_PAR");
                lpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lpar); 

                tmp.addHijo((Nodo) ex);
                Nodo rpar = new Nodo("RIGHT_PAR");
                rpar.setValor("RIGHT_PAR");
                rpar.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rpar); 

                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) seb);
                tmp.addHijo((Nodo) stm);
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= method_call Punto_coma statement 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");
                tmp.addHijo((Nodo) mc);

                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm); 

                tmp.addHijo((Nodo) stm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= location assign_op expr Punto_coma statement 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int asopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int asopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object asop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("statement");

                tmp.addHijo((Nodo) l);
                tmp.addHijo((Nodo) asop);
                tmp.addHijo((Nodo) ex);

                Nodo pm = new Nodo("Punto_coma");
                pm.setValor("Punto_coma");
                pm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) pm);
                tmp.addHijo((Nodo) stm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= Boolean 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        Nodo bol = new Nodo("Boolean");
        bol.setValor("Boolean");
        bol.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) bol);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= Int 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("type");
        Nodo int_ = new Nodo("Int");
        int_.setValor("Int");
        int_.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) int_);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decl_coma_id ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decl_coma_id ::= Coma Id var_decl_coma_id 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("var_decl_coma_id");
                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);  
                tmp.addHijo((Nodo) ddd);
                tmp.addHijo((Nodo) vdci);
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl_coma_id",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_decl ::= type Id var_decl_coma_id Punto_coma var_decl 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vdcileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdciright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vdci = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("var_decl");
        tmp.addHijo((Nodo) t);

        tmp.addHijo((Nodo) ddd);

        tmp.addHijo((Nodo) vdci);
        Nodo pm = new Nodo("Punto_coma");
        pm.setValor("Punto_coma");
        pm.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) pm);
        tmp.addHijo((Nodo) vd);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= Llave_A var_decl statement Llave_C 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("block");
        Nodo llavea = new Nodo("Llave_A");
        llavea.setValor("Llave_A");
        llavea.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) llavea);

        tmp.addHijo((Nodo) vd);
        tmp.addHijo((Nodo) stm);

        Nodo llavec = new Nodo("Llave_C");
        llavec.setValor("Llave_C");
        llavec.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) llavec);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // agru_type_void ::= Void 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("agru_type_void");
                Nodo vd = new Nodo("Void");
                vd.setValor("Void");
                vd.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) vd);
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agru_type_void",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // agru_type_void ::= type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo tmp = new Nodo("agru_type_void"); tmp.addHijo((Nodo) t);
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agru_type_void",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl_corche_coma_type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl_corche_coma_type ::= Coma type Id method_decl_corche_coma_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_decl_corche_coma_type");
        Nodo cm = new Nodo("Coma");
        cm.setValor("Coma");
        cm.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) cm);

        tmp.addHijo((Nodo) t);
        tmp.addHijo((Nodo) ddd);
        tmp.addHijo((Nodo) mdcct);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche_coma_type",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl_corche ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl_corche ::= type Id method_decl_corche_coma_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdcctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdcctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mdcct = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("method_decl_corche");

        tmp.addHijo((Nodo) t);

        tmp.addHijo((Nodo) ddd);

        tmp.addHijo((Nodo) mdcct);
        tmp.setNumNodo(parser.contador++);
        RESULT = tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl_corche",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= Void Id LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_decl");

                Nodo vd = new Nodo("void");
                vd.setValor("void");
                vd.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) vd);
                
                tmp.addHijo((Nodo) ddd);

                Nodo lefp = new Nodo("LEFT_PAR");
                lefp.setValor("LEFT_PAR");
                lefp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lefp);

                tmp.addHijo((Nodo) mdc);

                Nodo rightp = new Nodo("RIGHT_PAR");
                rightp.setValor("RIGHT_PAR");
                rightp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rightp);

                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) md);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_decl ::= type Id LEFT_PAR method_decl_corche RIGHT_PAR block method_decl 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object mdc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("method_decl");

                tmp.addHijo((Nodo) t);
                tmp.addHijo((Nodo) ddd);

                Nodo lefp = new Nodo("LEFT_PAR");
                lefp.setValor("LEFT_PAR");
                lefp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) lefp);

                tmp.addHijo((Nodo) mdc);

                Nodo rightp = new Nodo("RIGHT_PAR");
                rightp.setValor("RIGHT_PAR");
                rightp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) rightp);

                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) md);
                
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl_coma_field ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl_coma_field ::= Coma field_name field_decl_coma_field 
            {
              Object RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Nodo tmp = new Nodo("field_decl_coma_field");

                Nodo cm = new Nodo("Coma");
                cm.setValor("Coma");
                cm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) cm);

                tmp.addHijo((Nodo) fn);
                tmp.addHijo((Nodo) fdcf);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl_coma_field",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_decl ::= field_decl type field_name field_decl_coma_field Punto_coma 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fdcfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fdcfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fdcf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Nodo tmp = new Nodo("field decl");
                tmp.addHijo((Nodo) fd);
                tmp.addHijo((Nodo) t);
                tmp.addHijo((Nodo) fn);
                tmp.addHijo((Nodo) fdcf);

                Nodo ptm = new Nodo("Punto_coma");
                ptm.setValor("Punto_coma");
                ptm.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) ptm);

                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_name ::= Id Corche_A int_literal Corche_C 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Nodo tmp = new Nodo("field_name");
            tmp.addHijo((Nodo) ddd);

            Nodo Corche_a = new Nodo("Corche_A");
            Corche_a.setValor("Corche_A");
            Corche_a.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) Corche_a);

            tmp.addHijo((Nodo) il);

            Nodo Corche_c = new Nodo("Corche_C");
            Corche_c.setValor("Corche_C");
            Corche_c.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) Corche_c);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_name ::= Id 
            {
              Object RESULT =null;
		int dddleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dddright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ddd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Nodo tmp = new Nodo("field_name");
            tmp.addHijo((Nodo) ddd);
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("field_name",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Class Program Llave_A field_decl method_decl Llave_C 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		

            Nodo tmp = new Nodo("program");
            Nodo class_ = new Nodo("class");
            class_.setValor("class");
            class_.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) class_);
            
            Nodo pr = new Nodo("Program");
            pr.setValor("Program");
            pr.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) pr);

            Nodo llavea = new Nodo("Llave_A");
            llavea.setValor("Llave_A");
            llavea.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavea);

            tmp.addHijo((Nodo) fd);
            tmp.addHijo((Nodo) md);

            Nodo llavec = new Nodo("Llave_C");
            llavec.setValor("Llave_C");
            llavec.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) llavec);

            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= program 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) s);
            parser.padre = (Nodo) tmp;
            System.out.println("Correcto");
            RESULT=tmp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

